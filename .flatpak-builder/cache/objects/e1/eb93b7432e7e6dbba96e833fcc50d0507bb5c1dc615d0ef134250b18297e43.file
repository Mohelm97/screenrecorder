/* VideoPlayer.c generated by valac 0.54.3, the Vala compiler
 * generated from VideoPlayer.vala, do not modify */

/*
* Copyright (c) 2018 mohelm97 (https://github.com/mohelm97/screenrecorder)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Mohammed ALMadhoun <mohelm97@gmail.com>
*/

#include <gtk/gtk.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <clutter-gst/clutter-gst.h>
#include <clutter-gtk/clutter-gtk.h>
#include <clutter/clutter.h>
#include <granite.h>
#include <float.h>
#include <math.h>
#include <glib/gi18n-lib.h>
#include <gdk/gdk.h>

#if !defined(VALA_EXTERN)
#if defined(_MSC_VER)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define SCREEN_RECORDER_TYPE_VIDEO_PLAYER (screen_recorder_video_player_get_type ())
#define SCREEN_RECORDER_VIDEO_PLAYER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SCREEN_RECORDER_TYPE_VIDEO_PLAYER, ScreenRecorderVideoPlayer))
#define SCREEN_RECORDER_VIDEO_PLAYER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SCREEN_RECORDER_TYPE_VIDEO_PLAYER, ScreenRecorderVideoPlayerClass))
#define SCREEN_RECORDER_IS_VIDEO_PLAYER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SCREEN_RECORDER_TYPE_VIDEO_PLAYER))
#define SCREEN_RECORDER_IS_VIDEO_PLAYER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SCREEN_RECORDER_TYPE_VIDEO_PLAYER))
#define SCREEN_RECORDER_VIDEO_PLAYER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SCREEN_RECORDER_TYPE_VIDEO_PLAYER, ScreenRecorderVideoPlayerClass))

typedef struct _ScreenRecorderVideoPlayer ScreenRecorderVideoPlayer;
typedef struct _ScreenRecorderVideoPlayerClass ScreenRecorderVideoPlayerClass;
typedef struct _ScreenRecorderVideoPlayerPrivate ScreenRecorderVideoPlayerPrivate;
enum  {
	SCREEN_RECORDER_VIDEO_PLAYER_0_PROPERTY,
	SCREEN_RECORDER_VIDEO_PLAYER_NUM_PROPERTIES
};
static GParamSpec* screen_recorder_video_player_properties[SCREEN_RECORDER_VIDEO_PLAYER_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _Block4Data Block4Data;

struct _ScreenRecorderVideoPlayer {
	GtkBox parent_instance;
	ScreenRecorderVideoPlayerPrivate * priv;
};

struct _ScreenRecorderVideoPlayerClass {
	GtkBoxClass parent_class;
};

struct _ScreenRecorderVideoPlayerPrivate {
	gchar* fileuri;
	ClutterGstPlayback* playback;
	GtkClutterEmbed* clutter;
	ClutterActor* video_actor;
	ClutterStage* stage;
	gint max_width_height;
	gint expected_width;
	gint expected_height;
};

struct _Block4Data {
	int _ref_count_;
	ScreenRecorderVideoPlayer* self;
	GraniteSeekBar* seek_bar;
	GtkButton* play_button;
};

static gint ScreenRecorderVideoPlayer_private_offset;
static gpointer screen_recorder_video_player_parent_class = NULL;

VALA_EXTERN GType screen_recorder_video_player_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ScreenRecorderVideoPlayer, g_object_unref)
VALA_EXTERN ScreenRecorderVideoPlayer* screen_recorder_video_player_new (const gchar* filepath,
                                                             gint expected_width,
                                                             gint expected_height,
                                                             gint max_width_height);
VALA_EXTERN ScreenRecorderVideoPlayer* screen_recorder_video_player_construct (GType object_type,
                                                                   const gchar* filepath,
                                                                   gint expected_width,
                                                                   gint expected_height,
                                                                   gint max_width_height);
static void screen_recorder_video_player_create_sink_and_play (ScreenRecorderVideoPlayer* self);
static void _screen_recorder_video_player_create_sink_and_play_gtk_widget_show (GtkWidget* _sender,
                                                                         gpointer self);
static void screen_recorder_video_player_stop_and_destroy (ScreenRecorderVideoPlayer* self);
static void _screen_recorder_video_player_stop_and_destroy_gtk_widget_destroy (GtkWidget* _sender,
                                                                        gpointer self);
static Block4Data* block4_data_ref (Block4Data* _data4_);
static void block4_data_unref (void * _userdata_);
static void __lambda8_ (ScreenRecorderVideoPlayer* self);
static void ___lambda8__clutter_gst_player_eos (ClutterGstPlayer* _sender,
                                         gpointer self);
static void __lambda9_ (Block4Data* _data4_);
static void ___lambda9__gtk_button_clicked (GtkButton* _sender,
                                     gpointer self);
static gboolean __lambda10_ (Block4Data* _data4_,
                      GdkEventButton* event);
static gboolean ___lambda10__gtk_widget_button_release_event (GtkWidget* _sender,
                                                       GdkEventButton* event,
                                                       gpointer self);
static void __lambda11_ (Block4Data* _data4_);
static void ___lambda11__g_object_notify (GObject* _sender,
                                   GParamSpec* pspec,
                                   gpointer self);
static void screen_recorder_video_player_real_get_preferred_width (GtkWidget* base,
                                                            gint* minimum_width,
                                                            gint* natural_width);
static void screen_recorder_video_player_finalize (GObject * obj);
static GType screen_recorder_video_player_get_type_once (void);

static inline gpointer
screen_recorder_video_player_get_instance_private (ScreenRecorderVideoPlayer* self)
{
	return G_STRUCT_MEMBER_P (self, ScreenRecorderVideoPlayer_private_offset);
}

static void
_screen_recorder_video_player_create_sink_and_play_gtk_widget_show (GtkWidget* _sender,
                                                                    gpointer self)
{
#line 42 "../src/Widgets/VideoPlayer.vala"
	screen_recorder_video_player_create_sink_and_play ((ScreenRecorderVideoPlayer*) self);
#line 151 "VideoPlayer.c"
}

static void
_screen_recorder_video_player_stop_and_destroy_gtk_widget_destroy (GtkWidget* _sender,
                                                                   gpointer self)
{
#line 43 "../src/Widgets/VideoPlayer.vala"
	screen_recorder_video_player_stop_and_destroy ((ScreenRecorderVideoPlayer*) self);
#line 160 "VideoPlayer.c"
}

ScreenRecorderVideoPlayer*
screen_recorder_video_player_construct (GType object_type,
                                        const gchar* filepath,
                                        gint expected_width,
                                        gint expected_height,
                                        gint max_width_height)
{
	ScreenRecorderVideoPlayer * self = NULL;
	gchar* _tmp0_;
#line 33 "../src/Widgets/VideoPlayer.vala"
	g_return_val_if_fail (filepath != NULL, NULL);
#line 34 "../src/Widgets/VideoPlayer.vala"
	self = (ScreenRecorderVideoPlayer*) g_object_new (object_type, "orientation", GTK_ORIENTATION_VERTICAL, "spacing", 0, NULL);
#line 38 "../src/Widgets/VideoPlayer.vala"
	self->priv->expected_width = expected_width;
#line 39 "../src/Widgets/VideoPlayer.vala"
	self->priv->expected_height = expected_height;
#line 40 "../src/Widgets/VideoPlayer.vala"
	self->priv->max_width_height = max_width_height;
#line 42 "../src/Widgets/VideoPlayer.vala"
	g_signal_connect_object ((GtkWidget*) self, "show", (GCallback) _screen_recorder_video_player_create_sink_and_play_gtk_widget_show, self, 0);
#line 43 "../src/Widgets/VideoPlayer.vala"
	g_signal_connect_object ((GtkWidget*) self, "destroy", (GCallback) _screen_recorder_video_player_stop_and_destroy_gtk_widget_destroy, self, 0);
#line 44 "../src/Widgets/VideoPlayer.vala"
	_tmp0_ = g_strconcat ("file://", filepath, NULL);
#line 44 "../src/Widgets/VideoPlayer.vala"
	_g_free0 (self->priv->fileuri);
#line 44 "../src/Widgets/VideoPlayer.vala"
	self->priv->fileuri = _tmp0_;
#line 33 "../src/Widgets/VideoPlayer.vala"
	return self;
#line 194 "VideoPlayer.c"
}

ScreenRecorderVideoPlayer*
screen_recorder_video_player_new (const gchar* filepath,
                                  gint expected_width,
                                  gint expected_height,
                                  gint max_width_height)
{
#line 33 "../src/Widgets/VideoPlayer.vala"
	return screen_recorder_video_player_construct (SCREEN_RECORDER_TYPE_VIDEO_PLAYER, filepath, expected_width, expected_height, max_width_height);
#line 205 "VideoPlayer.c"
}

static Block4Data*
block4_data_ref (Block4Data* _data4_)
{
#line 47 "../src/Widgets/VideoPlayer.vala"
	g_atomic_int_inc (&_data4_->_ref_count_);
#line 47 "../src/Widgets/VideoPlayer.vala"
	return _data4_;
#line 215 "VideoPlayer.c"
}

static void
block4_data_unref (void * _userdata_)
{
	Block4Data* _data4_;
	_data4_ = (Block4Data*) _userdata_;
#line 47 "../src/Widgets/VideoPlayer.vala"
	if (g_atomic_int_dec_and_test (&_data4_->_ref_count_)) {
#line 225 "VideoPlayer.c"
		ScreenRecorderVideoPlayer* self;
#line 47 "../src/Widgets/VideoPlayer.vala"
		self = _data4_->self;
#line 47 "../src/Widgets/VideoPlayer.vala"
		_g_object_unref0 (_data4_->play_button);
#line 47 "../src/Widgets/VideoPlayer.vala"
		_g_object_unref0 (_data4_->seek_bar);
#line 47 "../src/Widgets/VideoPlayer.vala"
		_g_object_unref0 (self);
#line 47 "../src/Widgets/VideoPlayer.vala"
		g_slice_free (Block4Data, _data4_);
#line 237 "VideoPlayer.c"
	}
}

static void
__lambda8_ (ScreenRecorderVideoPlayer* self)
{
	ClutterGstPlayback* _tmp0_;
	ClutterGstPlayback* _tmp1_;
#line 50 "../src/Widgets/VideoPlayer.vala"
	_tmp0_ = self->priv->playback;
#line 50 "../src/Widgets/VideoPlayer.vala"
	clutter_gst_playback_set_progress (_tmp0_, (gdouble) 0);
#line 51 "../src/Widgets/VideoPlayer.vala"
	_tmp1_ = self->priv->playback;
#line 51 "../src/Widgets/VideoPlayer.vala"
	clutter_gst_player_set_playing ((ClutterGstPlayer*) _tmp1_, TRUE);
#line 254 "VideoPlayer.c"
}

static void
___lambda8__clutter_gst_player_eos (ClutterGstPlayer* _sender,
                                    gpointer self)
{
#line 49 "../src/Widgets/VideoPlayer.vala"
	__lambda8_ ((ScreenRecorderVideoPlayer*) self);
#line 263 "VideoPlayer.c"
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 68 "../src/Widgets/VideoPlayer.vala"
	return self ? g_object_ref (self) : NULL;
#line 271 "VideoPlayer.c"
}

static void
__lambda9_ (Block4Data* _data4_)
{
	ScreenRecorderVideoPlayer* self;
	ClutterGstPlayback* _tmp0_;
	ClutterGstPlayback* _tmp1_;
	gboolean _tmp2_;
	gboolean _tmp3_;
	ClutterGstPlayback* _tmp4_;
	gboolean _tmp5_;
	gboolean _tmp6_;
#line 101 "../src/Widgets/VideoPlayer.vala"
	self = _data4_->self;
#line 102 "../src/Widgets/VideoPlayer.vala"
	_tmp0_ = self->priv->playback;
#line 102 "../src/Widgets/VideoPlayer.vala"
	_tmp1_ = self->priv->playback;
#line 102 "../src/Widgets/VideoPlayer.vala"
	_tmp2_ = clutter_gst_player_get_playing ((ClutterGstPlayer*) _tmp1_);
#line 102 "../src/Widgets/VideoPlayer.vala"
	_tmp3_ = _tmp2_;
#line 102 "../src/Widgets/VideoPlayer.vala"
	clutter_gst_player_set_playing ((ClutterGstPlayer*) _tmp0_, !_tmp3_);
#line 103 "../src/Widgets/VideoPlayer.vala"
	_tmp4_ = self->priv->playback;
#line 103 "../src/Widgets/VideoPlayer.vala"
	_tmp5_ = clutter_gst_player_get_playing ((ClutterGstPlayer*) _tmp4_);
#line 103 "../src/Widgets/VideoPlayer.vala"
	_tmp6_ = _tmp5_;
#line 103 "../src/Widgets/VideoPlayer.vala"
	if (_tmp6_) {
#line 305 "VideoPlayer.c"
		GtkWidget* _tmp7_;
		GtkWidget* _tmp8_;
#line 104 "../src/Widgets/VideoPlayer.vala"
		_tmp7_ = gtk_button_get_image (_data4_->play_button);
#line 104 "../src/Widgets/VideoPlayer.vala"
		_tmp8_ = _tmp7_;
#line 104 "../src/Widgets/VideoPlayer.vala"
		g_object_set (G_TYPE_CHECK_INSTANCE_CAST (_tmp8_, gtk_image_get_type (), GtkImage), "icon-name", "media-playback-pause-symbolic", NULL);
#line 314 "VideoPlayer.c"
	} else {
		GtkWidget* _tmp9_;
		GtkWidget* _tmp10_;
#line 106 "../src/Widgets/VideoPlayer.vala"
		_tmp9_ = gtk_button_get_image (_data4_->play_button);
#line 106 "../src/Widgets/VideoPlayer.vala"
		_tmp10_ = _tmp9_;
#line 106 "../src/Widgets/VideoPlayer.vala"
		g_object_set (G_TYPE_CHECK_INSTANCE_CAST (_tmp10_, gtk_image_get_type (), GtkImage), "icon-name", "media-playback-start-symbolic", NULL);
#line 324 "VideoPlayer.c"
	}
}

static void
___lambda9__gtk_button_clicked (GtkButton* _sender,
                                gpointer self)
{
#line 101 "../src/Widgets/VideoPlayer.vala"
	__lambda9_ (self);
#line 334 "VideoPlayer.c"
}

static gboolean
__lambda10_ (Block4Data* _data4_,
             GdkEventButton* event)
{
	ScreenRecorderVideoPlayer* self;
	ClutterGstPlayback* _tmp0_;
	gdouble _tmp1_;
	gdouble _tmp2_;
	gboolean result = FALSE;
#line 113 "../src/Widgets/VideoPlayer.vala"
	self = _data4_->self;
#line 113 "../src/Widgets/VideoPlayer.vala"
	g_return_val_if_fail (event != NULL, FALSE);
#line 114 "../src/Widgets/VideoPlayer.vala"
	_tmp0_ = self->priv->playback;
#line 114 "../src/Widgets/VideoPlayer.vala"
	_tmp1_ = granite_seek_bar_get_playback_progress (_data4_->seek_bar);
#line 114 "../src/Widgets/VideoPlayer.vala"
	_tmp2_ = _tmp1_;
#line 114 "../src/Widgets/VideoPlayer.vala"
	clutter_gst_playback_set_progress (_tmp0_, _tmp2_);
#line 115 "../src/Widgets/VideoPlayer.vala"
	result = FALSE;
#line 115 "../src/Widgets/VideoPlayer.vala"
	return result;
#line 362 "VideoPlayer.c"
}

static gboolean
___lambda10__gtk_widget_button_release_event (GtkWidget* _sender,
                                              GdkEventButton* event,
                                              gpointer self)
{
	gboolean result;
	result = __lambda10_ (self, event);
#line 113 "../src/Widgets/VideoPlayer.vala"
	return result;
#line 374 "VideoPlayer.c"
}

static void
__lambda11_ (Block4Data* _data4_)
{
	ScreenRecorderVideoPlayer* self;
	gboolean _tmp0_;
	gboolean _tmp1_;
#line 117 "../src/Widgets/VideoPlayer.vala"
	self = _data4_->self;
#line 118 "../src/Widgets/VideoPlayer.vala"
	_tmp0_ = granite_seek_bar_get_is_grabbing (_data4_->seek_bar);
#line 118 "../src/Widgets/VideoPlayer.vala"
	_tmp1_ = _tmp0_;
#line 118 "../src/Widgets/VideoPlayer.vala"
	if (!_tmp1_) {
#line 391 "VideoPlayer.c"
		ClutterGstPlayback* _tmp2_;
		gdouble _tmp3_;
		gdouble _tmp4_;
#line 119 "../src/Widgets/VideoPlayer.vala"
		_tmp2_ = self->priv->playback;
#line 119 "../src/Widgets/VideoPlayer.vala"
		_tmp3_ = clutter_gst_playback_get_progress (_tmp2_);
#line 119 "../src/Widgets/VideoPlayer.vala"
		_tmp4_ = _tmp3_;
#line 119 "../src/Widgets/VideoPlayer.vala"
		granite_seek_bar_set_playback_progress (_data4_->seek_bar, _tmp4_);
#line 403 "VideoPlayer.c"
	}
}

static void
___lambda11__g_object_notify (GObject* _sender,
                              GParamSpec* pspec,
                              gpointer self)
{
#line 117 "../src/Widgets/VideoPlayer.vala"
	__lambda11_ (self);
#line 414 "VideoPlayer.c"
}

static void
screen_recorder_video_player_create_sink_and_play (ScreenRecorderVideoPlayer* self)
{
	Block4Data* _data4_;
	ClutterGstPlayback* _tmp0_;
	ClutterGstPlayback* _tmp1_;
	ClutterGstPlayback* _tmp2_;
	GtkClutterEmbed* _tmp3_;
	gint width = 0;
	gint height = 0;
	gint scale = 0;
	GtkStyleContext* _tmp4_;
	GtkClutterEmbed* _tmp5_;
	GtkClutterEmbed* _tmp6_;
	ClutterActor* _tmp7_;
	ClutterStage* _tmp8_;
	ClutterStage* _tmp9_;
	ClutterColor _tmp10_ = {0};
	ClutterActor* _tmp11_;
	ClutterGstAspectratio* aspect_ratio = NULL;
	ClutterGstAspectratio* _tmp12_;
	ClutterGstPlayback* _tmp13_;
	ClutterActor* _tmp14_;
	ClutterActor* _tmp15_;
	ClutterStage* _tmp16_;
	ClutterBindConstraint* _tmp17_;
	ClutterBindConstraint* _tmp18_;
	ClutterActor* _tmp19_;
	ClutterStage* _tmp20_;
	ClutterBindConstraint* _tmp21_;
	ClutterBindConstraint* _tmp22_;
	ClutterStage* _tmp23_;
	ClutterActor* _tmp24_;
	GtkActionBar* action_bar = NULL;
	GtkActionBar* _tmp25_;
	ClutterGstPlayback* _tmp26_;
	GraniteSeekBar* _tmp27_;
	GtkButton* _tmp32_;
	ClutterGstPlayback* _tmp33_;
	ClutterGstPlayback* _tmp34_;
	ClutterGstPlayback* _tmp35_;
	const gchar* _tmp36_;
	ClutterGstPlayback* _tmp37_;
	GtkClutterEmbed* _tmp38_;
	GError* _inner_error0_ = NULL;
#line 47 "../src/Widgets/VideoPlayer.vala"
	g_return_if_fail (self != NULL);
#line 47 "../src/Widgets/VideoPlayer.vala"
	_data4_ = g_slice_new0 (Block4Data);
#line 47 "../src/Widgets/VideoPlayer.vala"
	_data4_->_ref_count_ = 1;
#line 47 "../src/Widgets/VideoPlayer.vala"
	_data4_->self = g_object_ref (self);
#line 48 "../src/Widgets/VideoPlayer.vala"
	_tmp0_ = clutter_gst_playback_new ();
#line 48 "../src/Widgets/VideoPlayer.vala"
	_g_object_unref0 (self->priv->playback);
#line 48 "../src/Widgets/VideoPlayer.vala"
	self->priv->playback = _tmp0_;
#line 49 "../src/Widgets/VideoPlayer.vala"
	_tmp1_ = self->priv->playback;
#line 49 "../src/Widgets/VideoPlayer.vala"
	g_signal_connect_object ((ClutterGstPlayer*) _tmp1_, "eos", (GCallback) ___lambda8__clutter_gst_player_eos, self, 0);
#line 53 "../src/Widgets/VideoPlayer.vala"
	_tmp2_ = self->priv->playback;
#line 53 "../src/Widgets/VideoPlayer.vala"
	clutter_gst_playback_set_seek_flags (_tmp2_, CLUTTER_GST_SEEK_FLAG_ACCURATE);
#line 55 "../src/Widgets/VideoPlayer.vala"
	_tmp3_ = (GtkClutterEmbed*) gtk_clutter_embed_new ();
#line 55 "../src/Widgets/VideoPlayer.vala"
	g_object_ref_sink (_tmp3_);
#line 55 "../src/Widgets/VideoPlayer.vala"
	_g_object_unref0 (self->priv->clutter);
#line 55 "../src/Widgets/VideoPlayer.vala"
	self->priv->clutter = _tmp3_;
#line 56 "../src/Widgets/VideoPlayer.vala"
	width = self->priv->expected_width;
#line 57 "../src/Widgets/VideoPlayer.vala"
	height = self->priv->expected_height;
#line 58 "../src/Widgets/VideoPlayer.vala"
	_tmp4_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 58 "../src/Widgets/VideoPlayer.vala"
	scale = gtk_style_context_get_scale (_tmp4_);
#line 59 "../src/Widgets/VideoPlayer.vala"
	if (width > height) {
#line 60 "../src/Widgets/VideoPlayer.vala"
		width = MIN (width, self->priv->max_width_height * scale);
#line 61 "../src/Widgets/VideoPlayer.vala"
		height = (width * height) / self->priv->expected_width;
#line 506 "VideoPlayer.c"
	} else {
#line 63 "../src/Widgets/VideoPlayer.vala"
		height = MIN (height, self->priv->max_width_height * scale);
#line 64 "../src/Widgets/VideoPlayer.vala"
		width = (height * width) / self->priv->expected_height;
#line 512 "VideoPlayer.c"
	}
#line 66 "../src/Widgets/VideoPlayer.vala"
	_tmp5_ = self->priv->clutter;
#line 66 "../src/Widgets/VideoPlayer.vala"
	gtk_widget_set_size_request ((GtkWidget*) _tmp5_, width / scale, height / scale);
#line 68 "../src/Widgets/VideoPlayer.vala"
	_tmp6_ = self->priv->clutter;
#line 68 "../src/Widgets/VideoPlayer.vala"
	_tmp7_ = gtk_clutter_embed_get_stage (_tmp6_);
#line 68 "../src/Widgets/VideoPlayer.vala"
	_tmp8_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_tmp7_, clutter_stage_get_type (), ClutterStage));
#line 68 "../src/Widgets/VideoPlayer.vala"
	_g_object_unref0 (self->priv->stage);
#line 68 "../src/Widgets/VideoPlayer.vala"
	self->priv->stage = _tmp8_;
#line 69 "../src/Widgets/VideoPlayer.vala"
	_tmp9_ = self->priv->stage;
#line 69 "../src/Widgets/VideoPlayer.vala"
	_tmp10_.red = (guint8) 0;
#line 69 "../src/Widgets/VideoPlayer.vala"
	_tmp10_.green = (guint8) 0;
#line 69 "../src/Widgets/VideoPlayer.vala"
	_tmp10_.blue = (guint8) 0;
#line 69 "../src/Widgets/VideoPlayer.vala"
	_tmp10_.alpha = (guint8) 0;
#line 69 "../src/Widgets/VideoPlayer.vala"
	clutter_actor_set_background_color ((ClutterActor*) _tmp9_, &_tmp10_);
#line 71 "../src/Widgets/VideoPlayer.vala"
	_tmp11_ = clutter_actor_new ();
#line 71 "../src/Widgets/VideoPlayer.vala"
	g_object_ref_sink (_tmp11_);
#line 71 "../src/Widgets/VideoPlayer.vala"
	_g_object_unref0 (self->priv->video_actor);
#line 71 "../src/Widgets/VideoPlayer.vala"
	self->priv->video_actor = _tmp11_;
#line 74 "../src/Widgets/VideoPlayer.vala"
	_tmp12_ = (ClutterGstAspectratio*) clutter_gst_aspectratio_new ();
#line 74 "../src/Widgets/VideoPlayer.vala"
	aspect_ratio = _tmp12_;
#line 79 "../src/Widgets/VideoPlayer.vala"
	g_object_set (G_TYPE_CHECK_INSTANCE_CAST (aspect_ratio, clutter_gst_aspectratio_get_type (), ClutterGstAspectratio), "paint-borders", FALSE, NULL);
#line 80 "../src/Widgets/VideoPlayer.vala"
	_tmp13_ = self->priv->playback;
#line 80 "../src/Widgets/VideoPlayer.vala"
	clutter_gst_content_set_player (G_TYPE_CHECK_INSTANCE_CAST (aspect_ratio, clutter_gst_content_get_type (), ClutterGstContent), (GObject*) _tmp13_);
#line 81 "../src/Widgets/VideoPlayer.vala"
	_tmp14_ = self->priv->video_actor;
#line 81 "../src/Widgets/VideoPlayer.vala"
	clutter_actor_set_content (_tmp14_, (ClutterContent*) aspect_ratio);
#line 83 "../src/Widgets/VideoPlayer.vala"
	_tmp15_ = self->priv->video_actor;
#line 83 "../src/Widgets/VideoPlayer.vala"
	_tmp16_ = self->priv->stage;
#line 83 "../src/Widgets/VideoPlayer.vala"
	_tmp17_ = (ClutterBindConstraint*) clutter_bind_constraint_new ((ClutterActor*) _tmp16_, CLUTTER_BIND_WIDTH, (gfloat) 0);
#line 83 "../src/Widgets/VideoPlayer.vala"
	g_object_ref_sink (_tmp17_);
#line 83 "../src/Widgets/VideoPlayer.vala"
	_tmp18_ = _tmp17_;
#line 83 "../src/Widgets/VideoPlayer.vala"
	clutter_actor_add_constraint (_tmp15_, (ClutterConstraint*) _tmp18_);
#line 83 "../src/Widgets/VideoPlayer.vala"
	_g_object_unref0 (_tmp18_);
#line 84 "../src/Widgets/VideoPlayer.vala"
	_tmp19_ = self->priv->video_actor;
#line 84 "../src/Widgets/VideoPlayer.vala"
	_tmp20_ = self->priv->stage;
#line 84 "../src/Widgets/VideoPlayer.vala"
	_tmp21_ = (ClutterBindConstraint*) clutter_bind_constraint_new ((ClutterActor*) _tmp20_, CLUTTER_BIND_HEIGHT, (gfloat) 0);
#line 84 "../src/Widgets/VideoPlayer.vala"
	g_object_ref_sink (_tmp21_);
#line 84 "../src/Widgets/VideoPlayer.vala"
	_tmp22_ = _tmp21_;
#line 84 "../src/Widgets/VideoPlayer.vala"
	clutter_actor_add_constraint (_tmp19_, (ClutterConstraint*) _tmp22_);
#line 84 "../src/Widgets/VideoPlayer.vala"
	_g_object_unref0 (_tmp22_);
#line 86 "../src/Widgets/VideoPlayer.vala"
	_tmp23_ = self->priv->stage;
#line 86 "../src/Widgets/VideoPlayer.vala"
	_tmp24_ = self->priv->video_actor;
#line 86 "../src/Widgets/VideoPlayer.vala"
	clutter_actor_add_child ((ClutterActor*) _tmp23_, _tmp24_);
#line 88 "../src/Widgets/VideoPlayer.vala"
	_tmp25_ = (GtkActionBar*) gtk_action_bar_new ();
#line 88 "../src/Widgets/VideoPlayer.vala"
	g_object_ref_sink (_tmp25_);
#line 88 "../src/Widgets/VideoPlayer.vala"
	action_bar = _tmp25_;
#line 89 "../src/Widgets/VideoPlayer.vala"
	_tmp26_ = self->priv->playback;
#line 89 "../src/Widgets/VideoPlayer.vala"
	_tmp27_ = granite_seek_bar_new (clutter_gst_playback_get_duration (_tmp26_));
#line 89 "../src/Widgets/VideoPlayer.vala"
	g_object_ref_sink (_tmp27_);
#line 89 "../src/Widgets/VideoPlayer.vala"
	_data4_->seek_bar = _tmp27_;
#line 90 "../src/Widgets/VideoPlayer.vala"
	gtk_widget_set_valign ((GtkWidget*) _data4_->seek_bar, GTK_ALIGN_CENTER);
#line 612 "VideoPlayer.c"
	{
		GtkCssProvider* slider_css = NULL;
		GtkCssProvider* _tmp28_;
		GtkScale* _tmp29_;
		GtkScale* _tmp30_;
		GtkStyleContext* _tmp31_;
#line 94 "../src/Widgets/VideoPlayer.vala"
		_tmp28_ = gtk_css_provider_new ();
#line 94 "../src/Widgets/VideoPlayer.vala"
		slider_css = _tmp28_;
#line 95 "../src/Widgets/VideoPlayer.vala"
		gtk_css_provider_load_from_data (slider_css, "slider {min-width:0;min-height:0;}", (gssize) -1, &_inner_error0_);
#line 95 "../src/Widgets/VideoPlayer.vala"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 95 "../src/Widgets/VideoPlayer.vala"
			_g_object_unref0 (slider_css);
#line 629 "VideoPlayer.c"
			goto __catch0_g_error;
		}
#line 96 "../src/Widgets/VideoPlayer.vala"
		_tmp29_ = granite_seek_bar_get_scale (_data4_->seek_bar);
#line 96 "../src/Widgets/VideoPlayer.vala"
		_tmp30_ = _tmp29_;
#line 96 "../src/Widgets/VideoPlayer.vala"
		_tmp31_ = gtk_widget_get_style_context ((GtkWidget*) _tmp30_);
#line 96 "../src/Widgets/VideoPlayer.vala"
		gtk_style_context_add_provider (_tmp31_, (GtkStyleProvider*) slider_css, (guint) (GTK_STYLE_PROVIDER_PRIORITY_USER + 1));
#line 93 "../src/Widgets/VideoPlayer.vala"
		_g_object_unref0 (slider_css);
#line 642 "VideoPlayer.c"
	}
	goto __finally0;
	__catch0_g_error:
	{
#line 93 "../src/Widgets/VideoPlayer.vala"
		g_clear_error (&_inner_error0_);
#line 649 "VideoPlayer.c"
	}
	__finally0:
#line 93 "../src/Widgets/VideoPlayer.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 93 "../src/Widgets/VideoPlayer.vala"
		_g_object_unref0 (action_bar);
#line 93 "../src/Widgets/VideoPlayer.vala"
		_g_object_unref0 (aspect_ratio);
#line 93 "../src/Widgets/VideoPlayer.vala"
		block4_data_unref (_data4_);
#line 93 "../src/Widgets/VideoPlayer.vala"
		_data4_ = NULL;
#line 93 "../src/Widgets/VideoPlayer.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 93 "../src/Widgets/VideoPlayer.vala"
		g_clear_error (&_inner_error0_);
#line 93 "../src/Widgets/VideoPlayer.vala"
		return;
#line 668 "VideoPlayer.c"
	}
#line 99 "../src/Widgets/VideoPlayer.vala"
	_tmp32_ = (GtkButton*) gtk_button_new_from_icon_name ("media-playback-pause-symbolic", (GtkIconSize) GTK_ICON_SIZE_BUTTON);
#line 99 "../src/Widgets/VideoPlayer.vala"
	g_object_ref_sink (_tmp32_);
#line 99 "../src/Widgets/VideoPlayer.vala"
	_data4_->play_button = _tmp32_;
#line 100 "../src/Widgets/VideoPlayer.vala"
	gtk_widget_set_tooltip_text ((GtkWidget*) _data4_->play_button, _ ("Toggle playing"));
#line 101 "../src/Widgets/VideoPlayer.vala"
	g_signal_connect_data (_data4_->play_button, "clicked", (GCallback) ___lambda9__gtk_button_clicked, block4_data_ref (_data4_), (GClosureNotify) block4_data_unref, 0);
#line 109 "../src/Widgets/VideoPlayer.vala"
	gtk_action_bar_pack_start (action_bar, (GtkWidget*) _data4_->play_button);
#line 110 "../src/Widgets/VideoPlayer.vala"
	gtk_action_bar_set_center_widget (action_bar, (GtkWidget*) _data4_->seek_bar);
#line 112 "../src/Widgets/VideoPlayer.vala"
	_tmp33_ = self->priv->playback;
#line 112 "../src/Widgets/VideoPlayer.vala"
	g_object_bind_property_with_closures ((GObject*) _tmp33_, "duration", (GObject*) _data4_->seek_bar, "playback_duration", G_BINDING_DEFAULT, (GClosure*) ((NULL == NULL) ? NULL : g_cclosure_new ((GCallback) NULL, NULL, (GClosureNotify) NULL)), (GClosure*) ((NULL == NULL) ? NULL : g_cclosure_new ((GCallback) NULL, NULL, (GClosureNotify) NULL)));
#line 113 "../src/Widgets/VideoPlayer.vala"
	g_signal_connect_data ((GtkWidget*) _data4_->seek_bar, "button-release-event", (GCallback) ___lambda10__gtk_widget_button_release_event, block4_data_ref (_data4_), (GClosureNotify) block4_data_unref, 0);
#line 117 "../src/Widgets/VideoPlayer.vala"
	_tmp34_ = self->priv->playback;
#line 117 "../src/Widgets/VideoPlayer.vala"
	g_signal_connect_data ((GObject*) _tmp34_, "notify::progress", (GCallback) ___lambda11__g_object_notify, block4_data_ref (_data4_), (GClosureNotify) block4_data_unref, 0);
#line 123 "../src/Widgets/VideoPlayer.vala"
	_tmp35_ = self->priv->playback;
#line 123 "../src/Widgets/VideoPlayer.vala"
	_tmp36_ = self->priv->fileuri;
#line 123 "../src/Widgets/VideoPlayer.vala"
	clutter_gst_playback_set_uri (_tmp35_, _tmp36_);
#line 124 "../src/Widgets/VideoPlayer.vala"
	_tmp37_ = self->priv->playback;
#line 124 "../src/Widgets/VideoPlayer.vala"
	clutter_gst_player_set_playing ((ClutterGstPlayer*) _tmp37_, TRUE);
#line 126 "../src/Widgets/VideoPlayer.vala"
	_tmp38_ = self->priv->clutter;
#line 126 "../src/Widgets/VideoPlayer.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp38_);
#line 127 "../src/Widgets/VideoPlayer.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) action_bar);
#line 128 "../src/Widgets/VideoPlayer.vala"
	gtk_widget_show_all ((GtkWidget*) self);
#line 47 "../src/Widgets/VideoPlayer.vala"
	_g_object_unref0 (action_bar);
#line 47 "../src/Widgets/VideoPlayer.vala"
	_g_object_unref0 (aspect_ratio);
#line 47 "../src/Widgets/VideoPlayer.vala"
	block4_data_unref (_data4_);
#line 47 "../src/Widgets/VideoPlayer.vala"
	_data4_ = NULL;
#line 720 "VideoPlayer.c"
}

static void
screen_recorder_video_player_stop_and_destroy (ScreenRecorderVideoPlayer* self)
{
	ClutterGstPlayback* _tmp0_;
	ClutterGstPlayback* _tmp1_;
#line 131 "../src/Widgets/VideoPlayer.vala"
	g_return_if_fail (self != NULL);
#line 132 "../src/Widgets/VideoPlayer.vala"
	_tmp0_ = self->priv->playback;
#line 132 "../src/Widgets/VideoPlayer.vala"
	clutter_gst_player_set_playing ((ClutterGstPlayer*) _tmp0_, FALSE);
#line 133 "../src/Widgets/VideoPlayer.vala"
	_tmp1_ = self->priv->playback;
#line 133 "../src/Widgets/VideoPlayer.vala"
	clutter_gst_playback_set_uri (_tmp1_, NULL);
#line 738 "VideoPlayer.c"
}

static void
screen_recorder_video_player_real_get_preferred_width (GtkWidget* base,
                                                       gint* minimum_width,
                                                       gint* natural_width)
{
	ScreenRecorderVideoPlayer * self;
	gint _vala_minimum_width = 0;
	gint _vala_natural_width = 0;
	GtkClutterEmbed* _tmp0_;
	gint _tmp1_;
	gint _tmp2_;
	GtkClutterEmbed* _tmp3_;
	gint _tmp4_;
	gint _tmp5_;
#line 136 "../src/Widgets/VideoPlayer.vala"
	self = (ScreenRecorderVideoPlayer*) base;
#line 137 "../src/Widgets/VideoPlayer.vala"
	_tmp0_ = self->priv->clutter;
#line 137 "../src/Widgets/VideoPlayer.vala"
	g_object_get ((GtkWidget*) _tmp0_, "width-request", &_tmp1_, NULL);
#line 137 "../src/Widgets/VideoPlayer.vala"
	_tmp2_ = _tmp1_;
#line 137 "../src/Widgets/VideoPlayer.vala"
	_vala_minimum_width = _tmp2_;
#line 138 "../src/Widgets/VideoPlayer.vala"
	_tmp3_ = self->priv->clutter;
#line 138 "../src/Widgets/VideoPlayer.vala"
	g_object_get ((GtkWidget*) _tmp3_, "width-request", &_tmp4_, NULL);
#line 138 "../src/Widgets/VideoPlayer.vala"
	_tmp5_ = _tmp4_;
#line 138 "../src/Widgets/VideoPlayer.vala"
	_vala_natural_width = _tmp5_;
#line 136 "../src/Widgets/VideoPlayer.vala"
	if (minimum_width) {
#line 136 "../src/Widgets/VideoPlayer.vala"
		*minimum_width = _vala_minimum_width;
#line 777 "VideoPlayer.c"
	}
#line 136 "../src/Widgets/VideoPlayer.vala"
	if (natural_width) {
#line 136 "../src/Widgets/VideoPlayer.vala"
		*natural_width = _vala_natural_width;
#line 783 "VideoPlayer.c"
	}
}

static void
screen_recorder_video_player_class_init (ScreenRecorderVideoPlayerClass * klass,
                                         gpointer klass_data)
{
#line 23 "../src/Widgets/VideoPlayer.vala"
	screen_recorder_video_player_parent_class = g_type_class_peek_parent (klass);
#line 23 "../src/Widgets/VideoPlayer.vala"
	g_type_class_adjust_private_offset (klass, &ScreenRecorderVideoPlayer_private_offset);
#line 23 "../src/Widgets/VideoPlayer.vala"
	((GtkWidgetClass *) klass)->get_preferred_width = (void (*) (GtkWidget*, gint*, gint*)) screen_recorder_video_player_real_get_preferred_width;
#line 23 "../src/Widgets/VideoPlayer.vala"
	G_OBJECT_CLASS (klass)->finalize = screen_recorder_video_player_finalize;
#line 799 "VideoPlayer.c"
}

static void
screen_recorder_video_player_instance_init (ScreenRecorderVideoPlayer * self,
                                            gpointer klass)
{
#line 23 "../src/Widgets/VideoPlayer.vala"
	self->priv = screen_recorder_video_player_get_instance_private (self);
#line 808 "VideoPlayer.c"
}

static void
screen_recorder_video_player_finalize (GObject * obj)
{
	ScreenRecorderVideoPlayer * self;
#line 23 "../src/Widgets/VideoPlayer.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, SCREEN_RECORDER_TYPE_VIDEO_PLAYER, ScreenRecorderVideoPlayer);
#line 24 "../src/Widgets/VideoPlayer.vala"
	_g_free0 (self->priv->fileuri);
#line 25 "../src/Widgets/VideoPlayer.vala"
	_g_object_unref0 (self->priv->playback);
#line 26 "../src/Widgets/VideoPlayer.vala"
	_g_object_unref0 (self->priv->clutter);
#line 27 "../src/Widgets/VideoPlayer.vala"
	_g_object_unref0 (self->priv->video_actor);
#line 28 "../src/Widgets/VideoPlayer.vala"
	_g_object_unref0 (self->priv->stage);
#line 23 "../src/Widgets/VideoPlayer.vala"
	G_OBJECT_CLASS (screen_recorder_video_player_parent_class)->finalize (obj);
#line 829 "VideoPlayer.c"
}

static GType
screen_recorder_video_player_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (ScreenRecorderVideoPlayerClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) screen_recorder_video_player_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ScreenRecorderVideoPlayer), 0, (GInstanceInitFunc) screen_recorder_video_player_instance_init, NULL };
	GType screen_recorder_video_player_type_id;
	screen_recorder_video_player_type_id = g_type_register_static (gtk_box_get_type (), "ScreenRecorderVideoPlayer", &g_define_type_info, 0);
	ScreenRecorderVideoPlayer_private_offset = g_type_add_instance_private (screen_recorder_video_player_type_id, sizeof (ScreenRecorderVideoPlayerPrivate));
	return screen_recorder_video_player_type_id;
}

GType
screen_recorder_video_player_get_type (void)
{
	static volatile gsize screen_recorder_video_player_type_id__volatile = 0;
	if (g_once_init_enter (&screen_recorder_video_player_type_id__volatile)) {
		GType screen_recorder_video_player_type_id;
		screen_recorder_video_player_type_id = screen_recorder_video_player_get_type_once ();
		g_once_init_leave (&screen_recorder_video_player_type_id__volatile, screen_recorder_video_player_type_id);
	}
	return screen_recorder_video_player_type_id__volatile;
}

