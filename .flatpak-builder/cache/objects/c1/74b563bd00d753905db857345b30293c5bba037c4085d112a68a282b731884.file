/* FormatComboBox.c generated by valac 0.54.3, the Vala compiler
 * generated from FormatComboBox.vala, do not modify */

/*
* Copyright (c) 2018 mohelm97 (https://github.com/mohelm97/screenrecorder)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Mohammed ALMadhoun <mohelm97@gmail.com>
*/

#include <gtk/gtk.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>

#if !defined(VALA_EXTERN)
#if defined(_MSC_VER)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define SCREEN_RECORDER_TYPE_FORMAT_COMBO_BOX (screen_recorder_format_combo_box_get_type ())
#define SCREEN_RECORDER_FORMAT_COMBO_BOX(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SCREEN_RECORDER_TYPE_FORMAT_COMBO_BOX, ScreenRecorderFormatComboBox))
#define SCREEN_RECORDER_FORMAT_COMBO_BOX_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SCREEN_RECORDER_TYPE_FORMAT_COMBO_BOX, ScreenRecorderFormatComboBoxClass))
#define SCREEN_RECORDER_IS_FORMAT_COMBO_BOX(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SCREEN_RECORDER_TYPE_FORMAT_COMBO_BOX))
#define SCREEN_RECORDER_IS_FORMAT_COMBO_BOX_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SCREEN_RECORDER_TYPE_FORMAT_COMBO_BOX))
#define SCREEN_RECORDER_FORMAT_COMBO_BOX_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SCREEN_RECORDER_TYPE_FORMAT_COMBO_BOX, ScreenRecorderFormatComboBoxClass))

typedef struct _ScreenRecorderFormatComboBox ScreenRecorderFormatComboBox;
typedef struct _ScreenRecorderFormatComboBoxClass ScreenRecorderFormatComboBoxClass;
typedef struct _ScreenRecorderFormatComboBoxPrivate ScreenRecorderFormatComboBoxPrivate;
enum  {
	SCREEN_RECORDER_FORMAT_COMBO_BOX_0_PROPERTY,
	SCREEN_RECORDER_FORMAT_COMBO_BOX_TEXT_VALUE_PROPERTY,
	SCREEN_RECORDER_FORMAT_COMBO_BOX_NUM_PROPERTIES
};
static GParamSpec* screen_recorder_format_combo_box_properties[SCREEN_RECORDER_FORMAT_COMBO_BOX_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))

struct _ScreenRecorderFormatComboBox {
	GtkComboBoxText parent_instance;
	ScreenRecorderFormatComboBoxPrivate * priv;
};

struct _ScreenRecorderFormatComboBoxClass {
	GtkComboBoxTextClass parent_class;
};

struct _ScreenRecorderFormatComboBoxPrivate {
	gchar* _text_value;
};

static gint ScreenRecorderFormatComboBox_private_offset;
static gpointer screen_recorder_format_combo_box_parent_class = NULL;

VALA_EXTERN GType screen_recorder_format_combo_box_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ScreenRecorderFormatComboBox, g_object_unref)
VALA_EXTERN ScreenRecorderFormatComboBox* screen_recorder_format_combo_box_new (void);
VALA_EXTERN ScreenRecorderFormatComboBox* screen_recorder_format_combo_box_construct (GType object_type);
static void __lambda12_ (ScreenRecorderFormatComboBox* self);
VALA_EXTERN void screen_recorder_format_combo_box_set_text_value (ScreenRecorderFormatComboBox* self,
                                                      const gchar* value);
static void ___lambda12__gtk_combo_box_changed (GtkComboBox* _sender,
                                         gpointer self);
VALA_EXTERN const gchar* screen_recorder_format_combo_box_get_text_value (ScreenRecorderFormatComboBox* self);
static void screen_recorder_format_combo_box_finalize (GObject * obj);
static GType screen_recorder_format_combo_box_get_type_once (void);
static void _vala_screen_recorder_format_combo_box_get_property (GObject * object,
                                                          guint property_id,
                                                          GValue * value,
                                                          GParamSpec * pspec);
static void _vala_screen_recorder_format_combo_box_set_property (GObject * object,
                                                          guint property_id,
                                                          const GValue * value,
                                                          GParamSpec * pspec);

static inline gpointer
screen_recorder_format_combo_box_get_instance_private (ScreenRecorderFormatComboBox* self)
{
	return G_STRUCT_MEMBER_P (self, ScreenRecorderFormatComboBox_private_offset);
}

static void
__lambda12_ (ScreenRecorderFormatComboBox* self)
{
	gchar* _tmp0_;
	gchar* _tmp1_;
#line 47 "../src/Widgets/FormatComboBox.vala"
	_tmp0_ = gtk_combo_box_text_get_active_text ((GtkComboBoxText*) self);
#line 47 "../src/Widgets/FormatComboBox.vala"
	_tmp1_ = _tmp0_;
#line 47 "../src/Widgets/FormatComboBox.vala"
	screen_recorder_format_combo_box_set_text_value (self, _tmp1_);
#line 47 "../src/Widgets/FormatComboBox.vala"
	_g_free0 (_tmp1_);
#line 116 "FormatComboBox.c"
}

static void
___lambda12__gtk_combo_box_changed (GtkComboBox* _sender,
                                    gpointer self)
{
#line 46 "../src/Widgets/FormatComboBox.vala"
	__lambda12_ ((ScreenRecorderFormatComboBox*) self);
#line 125 "FormatComboBox.c"
}

ScreenRecorderFormatComboBox*
screen_recorder_format_combo_box_construct (GType object_type)
{
	ScreenRecorderFormatComboBox * self = NULL;
#line 42 "../src/Widgets/FormatComboBox.vala"
	self = (ScreenRecorderFormatComboBox*) g_object_new (object_type, NULL);
#line 43 "../src/Widgets/FormatComboBox.vala"
	gtk_combo_box_text_append_text ((GtkComboBoxText*) self, "mp4");
#line 44 "../src/Widgets/FormatComboBox.vala"
	gtk_combo_box_text_append_text ((GtkComboBoxText*) self, "mov");
#line 45 "../src/Widgets/FormatComboBox.vala"
	gtk_combo_box_text_append_text ((GtkComboBoxText*) self, "gif");
#line 46 "../src/Widgets/FormatComboBox.vala"
	g_signal_connect_object ((GtkComboBox*) self, "changed", (GCallback) ___lambda12__gtk_combo_box_changed, self, 0);
#line 42 "../src/Widgets/FormatComboBox.vala"
	return self;
#line 144 "FormatComboBox.c"
}

ScreenRecorderFormatComboBox*
screen_recorder_format_combo_box_new (void)
{
#line 42 "../src/Widgets/FormatComboBox.vala"
	return screen_recorder_format_combo_box_construct (SCREEN_RECORDER_TYPE_FORMAT_COMBO_BOX);
#line 152 "FormatComboBox.c"
}

const gchar*
screen_recorder_format_combo_box_get_text_value (ScreenRecorderFormatComboBox* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 26 "../src/Widgets/FormatComboBox.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 26 "../src/Widgets/FormatComboBox.vala"
	_tmp0_ = self->priv->_text_value;
#line 26 "../src/Widgets/FormatComboBox.vala"
	result = _tmp0_;
#line 26 "../src/Widgets/FormatComboBox.vala"
	return result;
#line 168 "FormatComboBox.c"
}

void
screen_recorder_format_combo_box_set_text_value (ScreenRecorderFormatComboBox* self,
                                                 const gchar* value)
{
	gchar* _tmp0_;
	const gchar* _tmp1_;
	GQuark _tmp3_ = 0U;
#line 29 "../src/Widgets/FormatComboBox.vala"
	static GQuark _tmp2_label0 = 0;
#line 29 "../src/Widgets/FormatComboBox.vala"
	static GQuark _tmp2_label1 = 0;
#line 29 "../src/Widgets/FormatComboBox.vala"
	static GQuark _tmp2_label2 = 0;
#line 27 "../src/Widgets/FormatComboBox.vala"
	g_return_if_fail (self != NULL);
#line 28 "../src/Widgets/FormatComboBox.vala"
	_tmp0_ = g_strdup (value);
#line 28 "../src/Widgets/FormatComboBox.vala"
	_g_free0 (self->priv->_text_value);
#line 28 "../src/Widgets/FormatComboBox.vala"
	self->priv->_text_value = _tmp0_;
#line 29 "../src/Widgets/FormatComboBox.vala"
	_tmp1_ = value;
#line 29 "../src/Widgets/FormatComboBox.vala"
	_tmp3_ = (NULL == _tmp1_) ? 0 : g_quark_from_string (_tmp1_);
#line 29 "../src/Widgets/FormatComboBox.vala"
	if (_tmp3_ == ((0 != _tmp2_label0) ? _tmp2_label0 : (_tmp2_label0 = g_quark_from_static_string ("mp4")))) {
#line 29 "../src/Widgets/FormatComboBox.vala"
		switch (0) {
#line 200 "FormatComboBox.c"
			default:
			{
#line 31 "../src/Widgets/FormatComboBox.vala"
				gtk_combo_box_set_active ((GtkComboBox*) self, 0);
#line 32 "../src/Widgets/FormatComboBox.vala"
				break;
#line 207 "FormatComboBox.c"
			}
		}
	} else if (_tmp3_ == ((0 != _tmp2_label1) ? _tmp2_label1 : (_tmp2_label1 = g_quark_from_static_string ("mov")))) {
#line 29 "../src/Widgets/FormatComboBox.vala"
		switch (0) {
#line 213 "FormatComboBox.c"
			default:
			{
#line 34 "../src/Widgets/FormatComboBox.vala"
				gtk_combo_box_set_active ((GtkComboBox*) self, 1);
#line 35 "../src/Widgets/FormatComboBox.vala"
				break;
#line 220 "FormatComboBox.c"
			}
		}
	} else if (_tmp3_ == ((0 != _tmp2_label2) ? _tmp2_label2 : (_tmp2_label2 = g_quark_from_static_string ("gif")))) {
#line 29 "../src/Widgets/FormatComboBox.vala"
		switch (0) {
#line 226 "FormatComboBox.c"
			default:
			{
#line 37 "../src/Widgets/FormatComboBox.vala"
				gtk_combo_box_set_active ((GtkComboBox*) self, 2);
#line 38 "../src/Widgets/FormatComboBox.vala"
				break;
#line 233 "FormatComboBox.c"
			}
		}
	}
#line 27 "../src/Widgets/FormatComboBox.vala"
	g_object_notify_by_pspec ((GObject *) self, screen_recorder_format_combo_box_properties[SCREEN_RECORDER_FORMAT_COMBO_BOX_TEXT_VALUE_PROPERTY]);
#line 239 "FormatComboBox.c"
}

static void
screen_recorder_format_combo_box_class_init (ScreenRecorderFormatComboBoxClass * klass,
                                             gpointer klass_data)
{
#line 23 "../src/Widgets/FormatComboBox.vala"
	screen_recorder_format_combo_box_parent_class = g_type_class_peek_parent (klass);
#line 23 "../src/Widgets/FormatComboBox.vala"
	g_type_class_adjust_private_offset (klass, &ScreenRecorderFormatComboBox_private_offset);
#line 23 "../src/Widgets/FormatComboBox.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_screen_recorder_format_combo_box_get_property;
#line 23 "../src/Widgets/FormatComboBox.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_screen_recorder_format_combo_box_set_property;
#line 23 "../src/Widgets/FormatComboBox.vala"
	G_OBJECT_CLASS (klass)->finalize = screen_recorder_format_combo_box_finalize;
#line 23 "../src/Widgets/FormatComboBox.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), SCREEN_RECORDER_FORMAT_COMBO_BOX_TEXT_VALUE_PROPERTY, screen_recorder_format_combo_box_properties[SCREEN_RECORDER_FORMAT_COMBO_BOX_TEXT_VALUE_PROPERTY] = g_param_spec_string ("text-value", "text-value", "text-value", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 258 "FormatComboBox.c"
}

static void
screen_recorder_format_combo_box_instance_init (ScreenRecorderFormatComboBox * self,
                                                gpointer klass)
{
#line 23 "../src/Widgets/FormatComboBox.vala"
	self->priv = screen_recorder_format_combo_box_get_instance_private (self);
#line 267 "FormatComboBox.c"
}

static void
screen_recorder_format_combo_box_finalize (GObject * obj)
{
	ScreenRecorderFormatComboBox * self;
#line 23 "../src/Widgets/FormatComboBox.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, SCREEN_RECORDER_TYPE_FORMAT_COMBO_BOX, ScreenRecorderFormatComboBox);
#line 24 "../src/Widgets/FormatComboBox.vala"
	_g_free0 (self->priv->_text_value);
#line 23 "../src/Widgets/FormatComboBox.vala"
	G_OBJECT_CLASS (screen_recorder_format_combo_box_parent_class)->finalize (obj);
#line 280 "FormatComboBox.c"
}

static GType
screen_recorder_format_combo_box_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (ScreenRecorderFormatComboBoxClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) screen_recorder_format_combo_box_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ScreenRecorderFormatComboBox), 0, (GInstanceInitFunc) screen_recorder_format_combo_box_instance_init, NULL };
	GType screen_recorder_format_combo_box_type_id;
	screen_recorder_format_combo_box_type_id = g_type_register_static (gtk_combo_box_text_get_type (), "ScreenRecorderFormatComboBox", &g_define_type_info, 0);
	ScreenRecorderFormatComboBox_private_offset = g_type_add_instance_private (screen_recorder_format_combo_box_type_id, sizeof (ScreenRecorderFormatComboBoxPrivate));
	return screen_recorder_format_combo_box_type_id;
}

GType
screen_recorder_format_combo_box_get_type (void)
{
	static volatile gsize screen_recorder_format_combo_box_type_id__volatile = 0;
	if (g_once_init_enter (&screen_recorder_format_combo_box_type_id__volatile)) {
		GType screen_recorder_format_combo_box_type_id;
		screen_recorder_format_combo_box_type_id = screen_recorder_format_combo_box_get_type_once ();
		g_once_init_leave (&screen_recorder_format_combo_box_type_id__volatile, screen_recorder_format_combo_box_type_id);
	}
	return screen_recorder_format_combo_box_type_id__volatile;
}

static void
_vala_screen_recorder_format_combo_box_get_property (GObject * object,
                                                     guint property_id,
                                                     GValue * value,
                                                     GParamSpec * pspec)
{
	ScreenRecorderFormatComboBox * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, SCREEN_RECORDER_TYPE_FORMAT_COMBO_BOX, ScreenRecorderFormatComboBox);
#line 23 "../src/Widgets/FormatComboBox.vala"
	switch (property_id) {
#line 23 "../src/Widgets/FormatComboBox.vala"
		case SCREEN_RECORDER_FORMAT_COMBO_BOX_TEXT_VALUE_PROPERTY:
#line 23 "../src/Widgets/FormatComboBox.vala"
		g_value_set_string (value, screen_recorder_format_combo_box_get_text_value (self));
#line 23 "../src/Widgets/FormatComboBox.vala"
		break;
#line 321 "FormatComboBox.c"
		default:
#line 23 "../src/Widgets/FormatComboBox.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 23 "../src/Widgets/FormatComboBox.vala"
		break;
#line 327 "FormatComboBox.c"
	}
}

static void
_vala_screen_recorder_format_combo_box_set_property (GObject * object,
                                                     guint property_id,
                                                     const GValue * value,
                                                     GParamSpec * pspec)
{
	ScreenRecorderFormatComboBox * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, SCREEN_RECORDER_TYPE_FORMAT_COMBO_BOX, ScreenRecorderFormatComboBox);
#line 23 "../src/Widgets/FormatComboBox.vala"
	switch (property_id) {
#line 23 "../src/Widgets/FormatComboBox.vala"
		case SCREEN_RECORDER_FORMAT_COMBO_BOX_TEXT_VALUE_PROPERTY:
#line 23 "../src/Widgets/FormatComboBox.vala"
		screen_recorder_format_combo_box_set_text_value (self, g_value_get_string (value));
#line 23 "../src/Widgets/FormatComboBox.vala"
		break;
#line 347 "FormatComboBox.c"
		default:
#line 23 "../src/Widgets/FormatComboBox.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 23 "../src/Widgets/FormatComboBox.vala"
		break;
#line 353 "FormatComboBox.c"
	}
}

