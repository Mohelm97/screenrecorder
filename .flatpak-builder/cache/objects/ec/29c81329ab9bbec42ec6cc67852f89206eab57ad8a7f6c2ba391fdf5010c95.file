/* MainWindow.c generated by valac 0.54.3, the Vala compiler
 * generated from MainWindow.vala, do not modify */

/*
* Copyright (c) 2018 mohelm97 (https://github.com/mohelm97/screenrecorder)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Mohammed ALMadhoun <mohelm97@gmail.com>
*/

#include <gtk/gtk.h>
#include <glib-object.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>
#include <gdk/gdk.h>
#include <granite.h>
#include <cairo-gobject.h>
#include <float.h>
#include <math.h>
#include <gio/gio.h>
#include <glib/gi18n-lib.h>

#if !defined(VALA_EXTERN)
#if defined(_MSC_VER)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define SCREEN_RECORDER_TYPE_MAIN_WINDOW (screen_recorder_main_window_get_type ())
#define SCREEN_RECORDER_MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SCREEN_RECORDER_TYPE_MAIN_WINDOW, ScreenRecorderMainWindow))
#define SCREEN_RECORDER_MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SCREEN_RECORDER_TYPE_MAIN_WINDOW, ScreenRecorderMainWindowClass))
#define SCREEN_RECORDER_IS_MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SCREEN_RECORDER_TYPE_MAIN_WINDOW))
#define SCREEN_RECORDER_IS_MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SCREEN_RECORDER_TYPE_MAIN_WINDOW))
#define SCREEN_RECORDER_MAIN_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SCREEN_RECORDER_TYPE_MAIN_WINDOW, ScreenRecorderMainWindowClass))

typedef struct _ScreenRecorderMainWindow ScreenRecorderMainWindow;
typedef struct _ScreenRecorderMainWindowClass ScreenRecorderMainWindowClass;
typedef struct _ScreenRecorderMainWindowPrivate ScreenRecorderMainWindowPrivate;

#define SCREEN_RECORDER_TYPE_FFMPEG_WRAPPER (screen_recorder_ffmpeg_wrapper_get_type ())
#define SCREEN_RECORDER_FFMPEG_WRAPPER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SCREEN_RECORDER_TYPE_FFMPEG_WRAPPER, ScreenRecorderFFmpegWrapper))
#define SCREEN_RECORDER_FFMPEG_WRAPPER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SCREEN_RECORDER_TYPE_FFMPEG_WRAPPER, ScreenRecorderFFmpegWrapperClass))
#define SCREEN_RECORDER_IS_FFMPEG_WRAPPER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SCREEN_RECORDER_TYPE_FFMPEG_WRAPPER))
#define SCREEN_RECORDER_IS_FFMPEG_WRAPPER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SCREEN_RECORDER_TYPE_FFMPEG_WRAPPER))
#define SCREEN_RECORDER_FFMPEG_WRAPPER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SCREEN_RECORDER_TYPE_FFMPEG_WRAPPER, ScreenRecorderFFmpegWrapperClass))

typedef struct _ScreenRecorderFFmpegWrapper ScreenRecorderFFmpegWrapper;
typedef struct _ScreenRecorderFFmpegWrapperClass ScreenRecorderFFmpegWrapperClass;
typedef enum  {
	SCREEN_RECORDER_MAIN_WINDOW_CAPTURE_TYPE_SCREEN,
	SCREEN_RECORDER_MAIN_WINDOW_CAPTURE_TYPE_AREA
} ScreenRecorderMainWindowCaptureType;

#define SCREEN_RECORDER_MAIN_WINDOW_TYPE_CAPTURE_TYPE (screen_recorder_main_window_capture_type_get_type ())
enum  {
	SCREEN_RECORDER_MAIN_WINDOW_0_PROPERTY,
	SCREEN_RECORDER_MAIN_WINDOW_NUM_PROPERTIES
};
static GParamSpec* screen_recorder_main_window_properties[SCREEN_RECORDER_MAIN_WINDOW_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))

#define SCREENSHOT_WIDGETS_TYPE_SELECTION_AREA (screenshot_widgets_selection_area_get_type ())
#define SCREENSHOT_WIDGETS_SELECTION_AREA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SCREENSHOT_WIDGETS_TYPE_SELECTION_AREA, ScreenshotWidgetsSelectionArea))
#define SCREENSHOT_WIDGETS_SELECTION_AREA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SCREENSHOT_WIDGETS_TYPE_SELECTION_AREA, ScreenshotWidgetsSelectionAreaClass))
#define SCREENSHOT_WIDGETS_IS_SELECTION_AREA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SCREENSHOT_WIDGETS_TYPE_SELECTION_AREA))
#define SCREENSHOT_WIDGETS_IS_SELECTION_AREA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SCREENSHOT_WIDGETS_TYPE_SELECTION_AREA))
#define SCREENSHOT_WIDGETS_SELECTION_AREA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SCREENSHOT_WIDGETS_TYPE_SELECTION_AREA, ScreenshotWidgetsSelectionAreaClass))

typedef struct _ScreenshotWidgetsSelectionArea ScreenshotWidgetsSelectionArea;
typedef struct _ScreenshotWidgetsSelectionAreaClass ScreenshotWidgetsSelectionAreaClass;
typedef struct _Block1Data Block1Data;

#define SCREEN_RECORDER_TYPE_SAVE_DIALOG (screen_recorder_save_dialog_get_type ())
#define SCREEN_RECORDER_SAVE_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SCREEN_RECORDER_TYPE_SAVE_DIALOG, ScreenRecorderSaveDialog))
#define SCREEN_RECORDER_SAVE_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SCREEN_RECORDER_TYPE_SAVE_DIALOG, ScreenRecorderSaveDialogClass))
#define SCREEN_RECORDER_IS_SAVE_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SCREEN_RECORDER_TYPE_SAVE_DIALOG))
#define SCREEN_RECORDER_IS_SAVE_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SCREEN_RECORDER_TYPE_SAVE_DIALOG))
#define SCREEN_RECORDER_SAVE_DIALOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SCREEN_RECORDER_TYPE_SAVE_DIALOG, ScreenRecorderSaveDialogClass))

typedef struct _ScreenRecorderSaveDialog ScreenRecorderSaveDialog;
typedef struct _ScreenRecorderSaveDialogClass ScreenRecorderSaveDialogClass;

#define SCREEN_RECORDER_TYPE_SCALE_COMBO_BOX (screen_recorder_scale_combo_box_get_type ())
#define SCREEN_RECORDER_SCALE_COMBO_BOX(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SCREEN_RECORDER_TYPE_SCALE_COMBO_BOX, ScreenRecorderScaleComboBox))
#define SCREEN_RECORDER_SCALE_COMBO_BOX_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SCREEN_RECORDER_TYPE_SCALE_COMBO_BOX, ScreenRecorderScaleComboBoxClass))
#define SCREEN_RECORDER_IS_SCALE_COMBO_BOX(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SCREEN_RECORDER_TYPE_SCALE_COMBO_BOX))
#define SCREEN_RECORDER_IS_SCALE_COMBO_BOX_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SCREEN_RECORDER_TYPE_SCALE_COMBO_BOX))
#define SCREEN_RECORDER_SCALE_COMBO_BOX_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SCREEN_RECORDER_TYPE_SCALE_COMBO_BOX, ScreenRecorderScaleComboBoxClass))

typedef struct _ScreenRecorderScaleComboBox ScreenRecorderScaleComboBox;
typedef struct _ScreenRecorderScaleComboBoxClass ScreenRecorderScaleComboBoxClass;
typedef struct _Block2Data Block2Data;

#define SCREEN_RECORDER_TYPE_FORMAT_COMBO_BOX (screen_recorder_format_combo_box_get_type ())
#define SCREEN_RECORDER_FORMAT_COMBO_BOX(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SCREEN_RECORDER_TYPE_FORMAT_COMBO_BOX, ScreenRecorderFormatComboBox))
#define SCREEN_RECORDER_FORMAT_COMBO_BOX_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SCREEN_RECORDER_TYPE_FORMAT_COMBO_BOX, ScreenRecorderFormatComboBoxClass))
#define SCREEN_RECORDER_IS_FORMAT_COMBO_BOX(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SCREEN_RECORDER_TYPE_FORMAT_COMBO_BOX))
#define SCREEN_RECORDER_IS_FORMAT_COMBO_BOX_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SCREEN_RECORDER_TYPE_FORMAT_COMBO_BOX))
#define SCREEN_RECORDER_FORMAT_COMBO_BOX_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SCREEN_RECORDER_TYPE_FORMAT_COMBO_BOX, ScreenRecorderFormatComboBoxClass))

typedef struct _ScreenRecorderFormatComboBox ScreenRecorderFormatComboBox;
typedef struct _ScreenRecorderFormatComboBoxClass ScreenRecorderFormatComboBoxClass;

#define TYPE_KEYBINDING_MANAGER (keybinding_manager_get_type ())
#define KEYBINDING_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_KEYBINDING_MANAGER, KeybindingManager))
#define KEYBINDING_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_KEYBINDING_MANAGER, KeybindingManagerClass))
#define IS_KEYBINDING_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_KEYBINDING_MANAGER))
#define IS_KEYBINDING_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_KEYBINDING_MANAGER))
#define KEYBINDING_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_KEYBINDING_MANAGER, KeybindingManagerClass))

typedef struct _KeybindingManager KeybindingManager;
typedef struct _KeybindingManagerClass KeybindingManagerClass;
typedef void (*KeybindingManagerKeybindingHandlerFunc) (GdkEvent* event, gpointer user_data);

struct _ScreenRecorderMainWindow {
	GtkApplicationWindow parent_instance;
	ScreenRecorderMainWindowPrivate * priv;
};

struct _ScreenRecorderMainWindowClass {
	GtkApplicationWindowClass parent_class;
};

struct _ScreenRecorderMainWindowPrivate {
	ScreenRecorderFFmpegWrapper* ffmpegwrapper;
	ScreenRecorderMainWindowCaptureType capture_mode;
	GtkGrid* grid;
	GtkButtonBox* actions;
	GtkButton* record_btn;
	GtkButton* stop_btn;
	GtkSwitch* record_cmp_switch;
	GtkSwitch* record_mic_switch;
	GtkSwitch* pointer_switch;
	GtkSwitch* borders_switch;
	GtkComboBoxText* format_cmb;
	gboolean recording;
	gboolean save_dialog_present;
	gint delay;
	gint framerate;
	gint scale_percentage;
	gchar* tmpfilepath;
	gint last_recording_width;
	gint last_recording_height;
};

struct _Block1Data {
	int _ref_count_;
	ScreenRecorderMainWindow* self;
	ScreenshotWidgetsSelectionArea* selection_area;
	GdkWindow* win;
};

struct _Block2Data {
	int _ref_count_;
	ScreenRecorderMainWindow* self;
	GSettings* settings;
	GtkSpinButton* delay_spin;
	GtkSpinButton* framerate_spin;
	ScreenRecorderScaleComboBox* scale_combobox;
	GraniteSettings* granite_settings;
	GtkSettings* gtk_settings;
};

static gint ScreenRecorderMainWindow_private_offset;
static gpointer screen_recorder_main_window_parent_class = NULL;
VALA_EXTERN GSettings* screen_recorder_screen_recorder_app_settings;

VALA_EXTERN GType screen_recorder_main_window_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ScreenRecorderMainWindow, g_object_unref)
VALA_EXTERN GType screen_recorder_ffmpeg_wrapper_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ScreenRecorderFFmpegWrapper, g_object_unref)
static GType screen_recorder_main_window_capture_type_get_type (void) G_GNUC_CONST  G_GNUC_UNUSED ;
VALA_EXTERN ScreenRecorderMainWindow* screen_recorder_main_window_new (GtkApplication* app);
VALA_EXTERN ScreenRecorderMainWindow* screen_recorder_main_window_construct (GType object_type,
                                                                 GtkApplication* app);
static void screen_recorder_main_window_capture_screen (ScreenRecorderMainWindow* self);
static gboolean __lambda4_ (ScreenRecorderMainWindow* self);
static void screen_recorder_main_window_start_recording (ScreenRecorderMainWindow* self,
                                                  GdkWindow* win);
static gboolean ___lambda4__gsource_func (gpointer self);
static void screen_recorder_main_window_capture_area (ScreenRecorderMainWindow* self);
VALA_EXTERN GType screenshot_widgets_selection_area_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ScreenshotWidgetsSelectionArea, g_object_unref)
static Block1Data* block1_data_ref (Block1Data* _data1_);
static void block1_data_unref (void * _userdata_);
VALA_EXTERN ScreenshotWidgetsSelectionArea* screenshot_widgets_selection_area_new (void);
VALA_EXTERN ScreenshotWidgetsSelectionArea* screenshot_widgets_selection_area_construct (GType object_type);
static void __lambda5_ (Block1Data* _data1_);
VALA_EXTERN void screenshot_widgets_selection_area_close (ScreenshotWidgetsSelectionArea* self);
static void ___lambda5__screenshot_widgets_selection_area_cancelled (ScreenshotWidgetsSelectionArea* _sender,
                                                              gpointer self);
static void __lambda6_ (Block1Data* _data1_);
static gboolean __lambda7_ (Block1Data* _data1_);
static gboolean ___lambda7__gsource_func (gpointer self);
static void ___lambda6__screenshot_widgets_selection_area_captured (ScreenshotWidgetsSelectionArea* _sender,
                                                             gpointer self);
VALA_EXTERN ScreenRecorderFFmpegWrapper* screen_recorder_ffmpeg_wrapper_new (const gchar* filepath,
                                                                 const gchar* ext,
                                                                 gint framerate,
                                                                 gint start_x,
                                                                 gint start_y,
                                                                 gint width,
                                                                 gint height,
                                                                 gfloat scale,
                                                                 gboolean show_mouse,
                                                                 gboolean show_borders,
                                                                 gboolean record_cmp,
                                                                 gboolean record_mic);
VALA_EXTERN ScreenRecorderFFmpegWrapper* screen_recorder_ffmpeg_wrapper_construct (GType object_type,
                                                                       const gchar* filepath,
                                                                       const gchar* ext,
                                                                       gint framerate,
                                                                       gint start_x,
                                                                       gint start_y,
                                                                       gint width,
                                                                       gint height,
                                                                       gfloat scale,
                                                                       gboolean show_mouse,
                                                                       gboolean show_borders,
                                                                       gboolean record_cmp,
                                                                       gboolean record_mic);
static void screen_recorder_main_window_stop_recording (ScreenRecorderMainWindow* self);
VALA_EXTERN void screen_recorder_ffmpeg_wrapper_stop (ScreenRecorderFFmpegWrapper* self);
VALA_EXTERN GType screen_recorder_save_dialog_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ScreenRecorderSaveDialog, g_object_unref)
VALA_EXTERN ScreenRecorderSaveDialog* screen_recorder_save_dialog_new (const gchar* filepath,
                                                           GtkWindow* parent,
                                                           gint expected_width,
                                                           gint expected_height);
VALA_EXTERN ScreenRecorderSaveDialog* screen_recorder_save_dialog_construct (GType object_type,
                                                                 const gchar* filepath,
                                                                 GtkWindow* parent,
                                                                 gint expected_width,
                                                                 gint expected_height);
static void __lambda16_ (ScreenRecorderMainWindow* self);
static void ___lambda16__gtk_dialog_close (GtkDialog* _sender,
                                    gpointer self);
static GObject * screen_recorder_main_window_constructor (GType type,
                                                   guint n_construct_properties,
                                                   GObjectConstructParam * construct_properties);
VALA_EXTERN GType screen_recorder_scale_combo_box_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ScreenRecorderScaleComboBox, g_object_unref)
static Block2Data* block2_data_ref (Block2Data* _data2_);
static void block2_data_unref (void * _userdata_);
VALA_EXTERN ScreenRecorderScaleComboBox* screen_recorder_scale_combo_box_new (void);
VALA_EXTERN ScreenRecorderScaleComboBox* screen_recorder_scale_combo_box_construct (GType object_type);
VALA_EXTERN ScreenRecorderFormatComboBox* screen_recorder_format_combo_box_new (void);
VALA_EXTERN ScreenRecorderFormatComboBox* screen_recorder_format_combo_box_construct (GType object_type);
VALA_EXTERN GType screen_recorder_format_combo_box_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ScreenRecorderFormatComboBox, g_object_unref)
static void _screen_recorder_main_window___lambda18_ (Block2Data* _data2_);
static void __screen_recorder_main_window___lambda18__g_object_notify (GObject* _sender,
                                                                GParamSpec* pspec,
                                                                gpointer self);
VALA_EXTERN gint screen_recorder_scale_combo_box_get_scale (ScreenRecorderScaleComboBox* self);
static void _screen_recorder_main_window___lambda19_ (ScreenRecorderMainWindow* self);
static void __screen_recorder_main_window___lambda19__gtk_combo_box_changed (GtkComboBox* _sender,
                                                                      gpointer self);
static void _screen_recorder_main_window___lambda20_ (Block2Data* _data2_);
static void __screen_recorder_main_window___lambda20__gtk_spin_button_value_changed (GtkSpinButton* _sender,
                                                                              gpointer self);
static void _screen_recorder_main_window___lambda21_ (Block2Data* _data2_);
static void __screen_recorder_main_window___lambda21__gtk_spin_button_value_changed (GtkSpinButton* _sender,
                                                                              gpointer self);
static void _screen_recorder_main_window___lambda22_ (Block2Data* _data2_);
static void __screen_recorder_main_window___lambda22__gtk_combo_box_changed (GtkComboBox* _sender,
                                                                      gpointer self);
static void _screen_recorder_main_window___lambda23_ (Block2Data* _data2_);
static void __screen_recorder_main_window___lambda23__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                                          gpointer self);
static void _screen_recorder_main_window___lambda24_ (Block2Data* _data2_);
static void __screen_recorder_main_window___lambda24__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                                          gpointer self);
static void _screen_recorder_main_window___lambda25_ (ScreenRecorderMainWindow* self);
static void __screen_recorder_main_window___lambda25__gtk_button_clicked (GtkButton* _sender,
                                                                   gpointer self);
static void _screen_recorder_main_window_stop_recording_gtk_button_clicked (GtkButton* _sender,
                                                                     gpointer self);
static gboolean _screen_recorder_main_window___lambda26_ (ScreenRecorderMainWindow* self);
static gboolean __screen_recorder_main_window___lambda26__gtk_widget_delete_event (GtkWidget* _sender,
                                                                            GdkEventAny* event,
                                                                            gpointer self);
VALA_EXTERN GType keybinding_manager_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (KeybindingManager, g_object_unref)
VALA_EXTERN KeybindingManager* keybinding_manager_new (void);
VALA_EXTERN KeybindingManager* keybinding_manager_construct (GType object_type);
VALA_EXTERN void keybinding_manager_bind (KeybindingManager* self,
                              const gchar* accelerator,
                              KeybindingManagerKeybindingHandlerFunc handler,
                              gpointer handler_target);
static void _screen_recorder_main_window___lambda27_ (ScreenRecorderMainWindow* self);
static void __screen_recorder_main_window___lambda27__keybinding_manager_keybinding_handler_func (GdkEvent* event,
                                                                                           gpointer self);
static void screen_recorder_main_window_finalize (GObject * obj);
static GType screen_recorder_main_window_get_type_once (void);
static void _vala_array_destroy (gpointer array,
                          gssize array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gssize array_length,
                       GDestroyNotify destroy_func);

static inline gpointer
screen_recorder_main_window_get_instance_private (ScreenRecorderMainWindow* self)
{
	return G_STRUCT_MEMBER_P (self, ScreenRecorderMainWindow_private_offset);
}

static GType
screen_recorder_main_window_capture_type_get_type_once (void)
{
	static const GEnumValue values[] = {{SCREEN_RECORDER_MAIN_WINDOW_CAPTURE_TYPE_SCREEN, "SCREEN_RECORDER_MAIN_WINDOW_CAPTURE_TYPE_SCREEN", "screen"}, {SCREEN_RECORDER_MAIN_WINDOW_CAPTURE_TYPE_AREA, "SCREEN_RECORDER_MAIN_WINDOW_CAPTURE_TYPE_AREA", "area"}, {0, NULL, NULL}};
	GType screen_recorder_main_window_capture_type_type_id;
	screen_recorder_main_window_capture_type_type_id = g_enum_register_static ("ScreenRecorderMainWindowCaptureType", values);
	return screen_recorder_main_window_capture_type_type_id;
}

static GType
screen_recorder_main_window_capture_type_get_type (void)
{
	static volatile gsize screen_recorder_main_window_capture_type_type_id__volatile = 0;
	if (g_once_init_enter (&screen_recorder_main_window_capture_type_type_id__volatile)) {
		GType screen_recorder_main_window_capture_type_type_id;
		screen_recorder_main_window_capture_type_type_id = screen_recorder_main_window_capture_type_get_type_once ();
		g_once_init_leave (&screen_recorder_main_window_capture_type_type_id__volatile, screen_recorder_main_window_capture_type_type_id);
	}
	return screen_recorder_main_window_capture_type_type_id__volatile;
}

ScreenRecorderMainWindow*
screen_recorder_main_window_construct (GType object_type,
                                       GtkApplication* app)
{
	ScreenRecorderMainWindow * self = NULL;
#line 49 "../src/MainWindow.vala"
	g_return_val_if_fail (app != NULL, NULL);
#line 50 "../src/MainWindow.vala"
	self = (ScreenRecorderMainWindow*) g_object_new (object_type, "application", app, "border-width", 6, "resizable", FALSE, NULL);
#line 49 "../src/MainWindow.vala"
	return self;
#line 362 "MainWindow.c"
}

ScreenRecorderMainWindow*
screen_recorder_main_window_new (GtkApplication* app)
{
#line 49 "../src/MainWindow.vala"
	return screen_recorder_main_window_construct (SCREEN_RECORDER_TYPE_MAIN_WINDOW, app);
#line 370 "MainWindow.c"
}

static gboolean
__lambda4_ (ScreenRecorderMainWindow* self)
{
	gboolean result = FALSE;
#line 288 "../src/MainWindow.vala"
	screen_recorder_main_window_start_recording (self, NULL);
#line 289 "../src/MainWindow.vala"
	result = FALSE;
#line 289 "../src/MainWindow.vala"
	return result;
#line 383 "MainWindow.c"
}

static gboolean
___lambda4__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda4_ ((ScreenRecorderMainWindow*) self);
#line 287 "../src/MainWindow.vala"
	return result;
#line 393 "MainWindow.c"
}

static void
screen_recorder_main_window_capture_screen (ScreenRecorderMainWindow* self)
{
#line 285 "../src/MainWindow.vala"
	g_return_if_fail (self != NULL);
#line 286 "../src/MainWindow.vala"
	gtk_window_iconify ((GtkWindow*) self);
#line 287 "../src/MainWindow.vala"
	g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) self->priv->delay, ___lambda4__gsource_func, g_object_ref (self), g_object_unref);
#line 405 "MainWindow.c"
}

static Block1Data*
block1_data_ref (Block1Data* _data1_)
{
#line 293 "../src/MainWindow.vala"
	g_atomic_int_inc (&_data1_->_ref_count_);
#line 293 "../src/MainWindow.vala"
	return _data1_;
#line 415 "MainWindow.c"
}

static void
block1_data_unref (void * _userdata_)
{
	Block1Data* _data1_;
	_data1_ = (Block1Data*) _userdata_;
#line 293 "../src/MainWindow.vala"
	if (g_atomic_int_dec_and_test (&_data1_->_ref_count_)) {
#line 425 "MainWindow.c"
		ScreenRecorderMainWindow* self;
#line 293 "../src/MainWindow.vala"
		self = _data1_->self;
#line 293 "../src/MainWindow.vala"
		_g_object_unref0 (_data1_->win);
#line 293 "../src/MainWindow.vala"
		_g_object_unref0 (_data1_->selection_area);
#line 293 "../src/MainWindow.vala"
		_g_object_unref0 (self);
#line 293 "../src/MainWindow.vala"
		g_slice_free (Block1Data, _data1_);
#line 437 "MainWindow.c"
	}
}

static void
__lambda5_ (Block1Data* _data1_)
{
	ScreenRecorderMainWindow* self;
#line 297 "../src/MainWindow.vala"
	self = _data1_->self;
#line 298 "../src/MainWindow.vala"
	screenshot_widgets_selection_area_close (_data1_->selection_area);
#line 449 "MainWindow.c"
}

static void
___lambda5__screenshot_widgets_selection_area_cancelled (ScreenshotWidgetsSelectionArea* _sender,
                                                         gpointer self)
{
#line 297 "../src/MainWindow.vala"
	__lambda5_ (self);
#line 458 "MainWindow.c"
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 301 "../src/MainWindow.vala"
	return self ? g_object_ref (self) : NULL;
#line 466 "MainWindow.c"
}

static gboolean
__lambda7_ (Block1Data* _data1_)
{
	ScreenRecorderMainWindow* self;
	gboolean result = FALSE;
#line 306 "../src/MainWindow.vala"
	self = _data1_->self;
#line 307 "../src/MainWindow.vala"
	screen_recorder_main_window_start_recording (self, _data1_->win);
#line 308 "../src/MainWindow.vala"
	result = FALSE;
#line 308 "../src/MainWindow.vala"
	return result;
#line 482 "MainWindow.c"
}

static gboolean
___lambda7__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda7_ (self);
#line 306 "../src/MainWindow.vala"
	return result;
#line 492 "MainWindow.c"
}

static void
__lambda6_ (Block1Data* _data1_)
{
	ScreenRecorderMainWindow* self;
#line 303 "../src/MainWindow.vala"
	self = _data1_->self;
#line 304 "../src/MainWindow.vala"
	gtk_window_iconify ((GtkWindow*) self);
#line 305 "../src/MainWindow.vala"
	screenshot_widgets_selection_area_close (_data1_->selection_area);
#line 306 "../src/MainWindow.vala"
	g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) self->priv->delay, ___lambda7__gsource_func, block1_data_ref (_data1_), block1_data_unref);
#line 507 "MainWindow.c"
}

static void
___lambda6__screenshot_widgets_selection_area_captured (ScreenshotWidgetsSelectionArea* _sender,
                                                        gpointer self)
{
#line 303 "../src/MainWindow.vala"
	__lambda6_ (self);
#line 516 "MainWindow.c"
}

static void
screen_recorder_main_window_capture_area (ScreenRecorderMainWindow* self)
{
	Block1Data* _data1_;
	ScreenshotWidgetsSelectionArea* _tmp0_;
	GdkWindow* _tmp1_;
	GdkWindow* _tmp2_;
#line 293 "../src/MainWindow.vala"
	g_return_if_fail (self != NULL);
#line 293 "../src/MainWindow.vala"
	_data1_ = g_slice_new0 (Block1Data);
#line 293 "../src/MainWindow.vala"
	_data1_->_ref_count_ = 1;
#line 293 "../src/MainWindow.vala"
	_data1_->self = g_object_ref (self);
#line 294 "../src/MainWindow.vala"
	_tmp0_ = screenshot_widgets_selection_area_new ();
#line 294 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp0_);
#line 294 "../src/MainWindow.vala"
	_data1_->selection_area = _tmp0_;
#line 295 "../src/MainWindow.vala"
	gtk_widget_show_all ((GtkWidget*) _data1_->selection_area);
#line 297 "../src/MainWindow.vala"
	g_signal_connect_data (_data1_->selection_area, "cancelled", (GCallback) ___lambda5__screenshot_widgets_selection_area_cancelled, block1_data_ref (_data1_), (GClosureNotify) block1_data_unref, 0);
#line 301 "../src/MainWindow.vala"
	_tmp1_ = gtk_widget_get_window ((GtkWidget*) _data1_->selection_area);
#line 301 "../src/MainWindow.vala"
	_tmp2_ = _g_object_ref0 (_tmp1_);
#line 301 "../src/MainWindow.vala"
	_data1_->win = _tmp2_;
#line 303 "../src/MainWindow.vala"
	g_signal_connect_data (_data1_->selection_area, "captured", (GCallback) ___lambda6__screenshot_widgets_selection_area_captured, block1_data_ref (_data1_), (GClosureNotify) block1_data_unref, 0);
#line 293 "../src/MainWindow.vala"
	block1_data_unref (_data1_);
#line 293 "../src/MainWindow.vala"
	_data1_ = NULL;
#line 556 "MainWindow.c"
}

static void
screen_recorder_main_window_start_recording (ScreenRecorderMainWindow* self,
                                             GdkWindow* win)
{
	GdkRectangle selection_rect = {0};
	GdkRectangle _tmp1_ = {0};
	gchar* temp_dir = NULL;
	const gchar* _tmp2_;
	gchar* _tmp3_;
	gchar* extension = NULL;
	GtkComboBoxText* _tmp4_;
	gchar* _tmp5_;
	const gchar* _tmp6_;
	const gchar* _tmp8_;
	const gchar* _tmp9_;
	gchar* _tmp10_;
	gchar* _tmp11_;
	gchar* _tmp12_;
	const gchar* _tmp13_;
	GdkRectangle _tmp14_;
	GdkRectangle _tmp15_;
	GdkRectangle _tmp16_;
	GdkRectangle _tmp17_;
	GdkRectangle _tmp18_;
	GdkRectangle _tmp19_;
	const gchar* _tmp20_;
	GtkComboBoxText* _tmp21_;
	gchar* _tmp22_;
	gchar* _tmp23_;
	GdkRectangle _tmp24_;
	GdkRectangle _tmp25_;
	GdkRectangle _tmp26_;
	GdkRectangle _tmp27_;
	GtkSwitch* _tmp28_;
	GtkSwitch* _tmp29_;
	GtkSwitch* _tmp30_;
	GtkSwitch* _tmp31_;
	ScreenRecorderFFmpegWrapper* _tmp32_;
	GtkGrid* _tmp33_;
	GtkButtonBox* _tmp34_;
	GtkButton* _tmp35_;
	GtkButtonBox* _tmp36_;
	GtkButton* _tmp37_;
	GtkButton* _tmp38_;
#line 313 "../src/MainWindow.vala"
	g_return_if_fail (self != NULL);
#line 314 "../src/MainWindow.vala"
	if (win == NULL) {
#line 607 "MainWindow.c"
		GdkWindow* _tmp0_;
#line 315 "../src/MainWindow.vala"
		_tmp0_ = gdk_get_default_root_window ();
#line 315 "../src/MainWindow.vala"
		win = _tmp0_;
#line 613 "MainWindow.c"
	}
#line 319 "../src/MainWindow.vala"
	gdk_window_get_frame_extents (win, &_tmp1_);
#line 319 "../src/MainWindow.vala"
	selection_rect = _tmp1_;
#line 320 "../src/MainWindow.vala"
	_tmp2_ = g_get_tmp_dir ();
#line 320 "../src/MainWindow.vala"
	_tmp3_ = g_strdup (_tmp2_);
#line 320 "../src/MainWindow.vala"
	temp_dir = _tmp3_;
#line 321 "../src/MainWindow.vala"
	_tmp4_ = self->priv->format_cmb;
#line 321 "../src/MainWindow.vala"
	_tmp5_ = gtk_combo_box_text_get_active_text (_tmp4_);
#line 321 "../src/MainWindow.vala"
	extension = _tmp5_;
#line 322 "../src/MainWindow.vala"
	_tmp6_ = extension;
#line 322 "../src/MainWindow.vala"
	if (g_strcmp0 (_tmp6_, "gif") == 0) {
#line 635 "MainWindow.c"
		gchar* _tmp7_;
#line 323 "../src/MainWindow.vala"
		_tmp7_ = g_strdup ("mp4");
#line 323 "../src/MainWindow.vala"
		_g_free0 (extension);
#line 323 "../src/MainWindow.vala"
		extension = _tmp7_;
#line 643 "MainWindow.c"
	}
#line 325 "../src/MainWindow.vala"
	_tmp8_ = temp_dir;
#line 325 "../src/MainWindow.vala"
	_tmp9_ = extension;
#line 325 "../src/MainWindow.vala"
	_tmp10_ = g_strdup_printf ("screenrecorder-%08x.%s", (guint) g_random_int (), _tmp9_);
#line 325 "../src/MainWindow.vala"
	_tmp11_ = _tmp10_;
#line 325 "../src/MainWindow.vala"
	_tmp12_ = g_build_filename (_tmp8_, _tmp11_, NULL);
#line 325 "../src/MainWindow.vala"
	_g_free0 (self->priv->tmpfilepath);
#line 325 "../src/MainWindow.vala"
	self->priv->tmpfilepath = _tmp12_;
#line 325 "../src/MainWindow.vala"
	_g_free0 (_tmp11_);
#line 326 "../src/MainWindow.vala"
	_tmp13_ = self->priv->tmpfilepath;
#line 326 "../src/MainWindow.vala"
	g_debug ("MainWindow.vala:326: Temp file created at: %s", _tmp13_);
#line 327 "../src/MainWindow.vala"
	_tmp14_ = selection_rect;
#line 327 "../src/MainWindow.vala"
	_tmp15_ = selection_rect;
#line 327 "../src/MainWindow.vala"
	selection_rect.width = _tmp14_.width + (_tmp15_.width % 2);
#line 328 "../src/MainWindow.vala"
	_tmp16_ = selection_rect;
#line 328 "../src/MainWindow.vala"
	_tmp17_ = selection_rect;
#line 328 "../src/MainWindow.vala"
	selection_rect.height = _tmp16_.height + (_tmp17_.height % 2);
#line 330 "../src/MainWindow.vala"
	_tmp18_ = selection_rect;
#line 330 "../src/MainWindow.vala"
	self->priv->last_recording_width = _tmp18_.width;
#line 331 "../src/MainWindow.vala"
	_tmp19_ = selection_rect;
#line 331 "../src/MainWindow.vala"
	self->priv->last_recording_height = _tmp19_.height;
#line 332 "../src/MainWindow.vala"
	_tmp20_ = self->priv->tmpfilepath;
#line 332 "../src/MainWindow.vala"
	_tmp21_ = self->priv->format_cmb;
#line 332 "../src/MainWindow.vala"
	_tmp22_ = gtk_combo_box_text_get_active_text (_tmp21_);
#line 332 "../src/MainWindow.vala"
	_tmp23_ = _tmp22_;
#line 332 "../src/MainWindow.vala"
	_tmp24_ = selection_rect;
#line 332 "../src/MainWindow.vala"
	_tmp25_ = selection_rect;
#line 332 "../src/MainWindow.vala"
	_tmp26_ = selection_rect;
#line 332 "../src/MainWindow.vala"
	_tmp27_ = selection_rect;
#line 332 "../src/MainWindow.vala"
	_tmp28_ = self->priv->pointer_switch;
#line 332 "../src/MainWindow.vala"
	_tmp29_ = self->priv->borders_switch;
#line 332 "../src/MainWindow.vala"
	_tmp30_ = self->priv->record_cmp_switch;
#line 332 "../src/MainWindow.vala"
	_tmp31_ = self->priv->record_mic_switch;
#line 332 "../src/MainWindow.vala"
	_tmp32_ = screen_recorder_ffmpeg_wrapper_new (_tmp20_, _tmp23_, self->priv->framerate, _tmp24_.x, _tmp25_.y, _tmp26_.width, _tmp27_.height, ((gfloat) self->priv->scale_percentage) / 100, gtk_switch_get_state (_tmp28_), gtk_switch_get_state (_tmp29_), gtk_switch_get_state (_tmp30_), gtk_switch_get_state (_tmp31_));
#line 332 "../src/MainWindow.vala"
	_g_object_unref0 (self->priv->ffmpegwrapper);
#line 332 "../src/MainWindow.vala"
	self->priv->ffmpegwrapper = _tmp32_;
#line 332 "../src/MainWindow.vala"
	_g_free0 (_tmp23_);
#line 345 "../src/MainWindow.vala"
	_tmp33_ = self->priv->grid;
#line 345 "../src/MainWindow.vala"
	gtk_widget_set_sensitive ((GtkWidget*) _tmp33_, FALSE);
#line 346 "../src/MainWindow.vala"
	self->priv->recording = TRUE;
#line 347 "../src/MainWindow.vala"
	_tmp34_ = self->priv->actions;
#line 347 "../src/MainWindow.vala"
	_tmp35_ = self->priv->record_btn;
#line 347 "../src/MainWindow.vala"
	gtk_container_remove ((GtkContainer*) _tmp34_, (GtkWidget*) _tmp35_);
#line 348 "../src/MainWindow.vala"
	_tmp36_ = self->priv->actions;
#line 348 "../src/MainWindow.vala"
	_tmp37_ = self->priv->stop_btn;
#line 348 "../src/MainWindow.vala"
	gtk_container_add ((GtkContainer*) _tmp36_, (GtkWidget*) _tmp37_);
#line 349 "../src/MainWindow.vala"
	_tmp38_ = self->priv->stop_btn;
#line 349 "../src/MainWindow.vala"
	gtk_widget_show ((GtkWidget*) _tmp38_);
#line 313 "../src/MainWindow.vala"
	_g_free0 (extension);
#line 313 "../src/MainWindow.vala"
	_g_free0 (temp_dir);
#line 743 "MainWindow.c"
}

static void
__lambda16_ (ScreenRecorderMainWindow* self)
{
#line 362 "../src/MainWindow.vala"
	self->priv->save_dialog_present = FALSE;
#line 751 "MainWindow.c"
}

static void
___lambda16__gtk_dialog_close (GtkDialog* _sender,
                               gpointer self)
{
#line 361 "../src/MainWindow.vala"
	__lambda16_ ((ScreenRecorderMainWindow*) self);
#line 760 "MainWindow.c"
}

static void
screen_recorder_main_window_stop_recording (ScreenRecorderMainWindow* self)
{
	ScreenRecorderFFmpegWrapper* _tmp0_;
	ScreenRecorderSaveDialog* save_dialog = NULL;
	const gchar* _tmp1_;
	ScreenRecorderSaveDialog* _tmp2_;
	GtkGrid* _tmp3_;
	GtkButtonBox* _tmp4_;
	GtkButton* _tmp5_;
	GtkButtonBox* _tmp6_;
	GtkButton* _tmp7_;
#line 352 "../src/MainWindow.vala"
	g_return_if_fail (self != NULL);
#line 353 "../src/MainWindow.vala"
	_tmp0_ = self->priv->ffmpegwrapper;
#line 353 "../src/MainWindow.vala"
	screen_recorder_ffmpeg_wrapper_stop (_tmp0_);
#line 354 "../src/MainWindow.vala"
	gtk_window_present ((GtkWindow*) self);
#line 355 "../src/MainWindow.vala"
	_tmp1_ = self->priv->tmpfilepath;
#line 355 "../src/MainWindow.vala"
	_tmp2_ = screen_recorder_save_dialog_new (_tmp1_, (GtkWindow*) self, self->priv->last_recording_width, self->priv->last_recording_height);
#line 355 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp2_);
#line 355 "../src/MainWindow.vala"
	save_dialog = _tmp2_;
#line 356 "../src/MainWindow.vala"
	self->priv->save_dialog_present = TRUE;
#line 358 "../src/MainWindow.vala"
	gtk_window_set_keep_above ((GtkWindow*) save_dialog, TRUE);
#line 359 "../src/MainWindow.vala"
	gtk_widget_show_all ((GtkWidget*) save_dialog);
#line 360 "../src/MainWindow.vala"
	gtk_window_set_keep_above ((GtkWindow*) save_dialog, FALSE);
#line 361 "../src/MainWindow.vala"
	g_signal_connect_object ((GtkDialog*) save_dialog, "close", (GCallback) ___lambda16__gtk_dialog_close, self, 0);
#line 364 "../src/MainWindow.vala"
	_tmp3_ = self->priv->grid;
#line 364 "../src/MainWindow.vala"
	gtk_widget_set_sensitive ((GtkWidget*) _tmp3_, TRUE);
#line 365 "../src/MainWindow.vala"
	self->priv->recording = FALSE;
#line 366 "../src/MainWindow.vala"
	_tmp4_ = self->priv->actions;
#line 366 "../src/MainWindow.vala"
	_tmp5_ = self->priv->stop_btn;
#line 366 "../src/MainWindow.vala"
	gtk_container_remove ((GtkContainer*) _tmp4_, (GtkWidget*) _tmp5_);
#line 367 "../src/MainWindow.vala"
	_tmp6_ = self->priv->actions;
#line 367 "../src/MainWindow.vala"
	_tmp7_ = self->priv->record_btn;
#line 367 "../src/MainWindow.vala"
	gtk_container_add ((GtkContainer*) _tmp6_, (GtkWidget*) _tmp7_);
#line 352 "../src/MainWindow.vala"
	_g_object_unref0 (save_dialog);
#line 821 "MainWindow.c"
}

static Block2Data*
block2_data_ref (Block2Data* _data2_)
{
#line 57 "../src/MainWindow.vala"
	g_atomic_int_inc (&_data2_->_ref_count_);
#line 57 "../src/MainWindow.vala"
	return _data2_;
#line 831 "MainWindow.c"
}

static void
block2_data_unref (void * _userdata_)
{
	Block2Data* _data2_;
	_data2_ = (Block2Data*) _userdata_;
#line 57 "../src/MainWindow.vala"
	if (g_atomic_int_dec_and_test (&_data2_->_ref_count_)) {
#line 841 "MainWindow.c"
		ScreenRecorderMainWindow* self;
#line 57 "../src/MainWindow.vala"
		self = _data2_->self;
#line 57 "../src/MainWindow.vala"
		_g_object_unref0 (_data2_->gtk_settings);
#line 57 "../src/MainWindow.vala"
		_g_object_unref0 (_data2_->granite_settings);
#line 57 "../src/MainWindow.vala"
		_g_object_unref0 (_data2_->scale_combobox);
#line 57 "../src/MainWindow.vala"
		_g_object_unref0 (_data2_->framerate_spin);
#line 57 "../src/MainWindow.vala"
		_g_object_unref0 (_data2_->delay_spin);
#line 57 "../src/MainWindow.vala"
		_g_object_unref0 (_data2_->settings);
#line 57 "../src/MainWindow.vala"
		_g_object_unref0 (self);
#line 57 "../src/MainWindow.vala"
		g_slice_free (Block2Data, _data2_);
#line 861 "MainWindow.c"
	}
}

static void
_screen_recorder_main_window___lambda18_ (Block2Data* _data2_)
{
	ScreenRecorderMainWindow* self;
	GtkSettings* _tmp0_;
	GraniteSettings* _tmp1_;
	GraniteSettingsColorScheme _tmp2_;
	GraniteSettingsColorScheme _tmp3_;
#line 200 "../src/MainWindow.vala"
	self = _data2_->self;
#line 201 "../src/MainWindow.vala"
	_tmp0_ = _data2_->gtk_settings;
#line 201 "../src/MainWindow.vala"
	_tmp1_ = _data2_->granite_settings;
#line 201 "../src/MainWindow.vala"
	_tmp2_ = granite_settings_get_prefers_color_scheme (_tmp1_);
#line 201 "../src/MainWindow.vala"
	_tmp3_ = _tmp2_;
#line 201 "../src/MainWindow.vala"
	g_object_set (_tmp0_, "gtk-application-prefer-dark-theme", _tmp3_ == GRANITE_SETTINGS_COLOR_SCHEME_DARK, NULL);
#line 885 "MainWindow.c"
}

static void
__screen_recorder_main_window___lambda18__g_object_notify (GObject* _sender,
                                                           GParamSpec* pspec,
                                                           gpointer self)
{
#line 200 "../src/MainWindow.vala"
	_screen_recorder_main_window___lambda18_ (self);
#line 895 "MainWindow.c"
}

static void
_screen_recorder_main_window___lambda19_ (ScreenRecorderMainWindow* self)
{
	GtkComboBoxText* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	gboolean _tmp3_;
#line 217 "../src/MainWindow.vala"
	_tmp0_ = self->priv->format_cmb;
#line 217 "../src/MainWindow.vala"
	_tmp1_ = gtk_combo_box_text_get_active_text (_tmp0_);
#line 217 "../src/MainWindow.vala"
	_tmp2_ = _tmp1_;
#line 217 "../src/MainWindow.vala"
	_tmp3_ = g_strcmp0 (_tmp2_, "gif") == 0;
#line 217 "../src/MainWindow.vala"
	_g_free0 (_tmp2_);
#line 217 "../src/MainWindow.vala"
	if (_tmp3_) {
#line 917 "MainWindow.c"
		GtkSwitch* _tmp4_;
		GtkSwitch* _tmp5_;
#line 218 "../src/MainWindow.vala"
		_tmp4_ = self->priv->record_cmp_switch;
#line 218 "../src/MainWindow.vala"
		gtk_widget_set_sensitive ((GtkWidget*) _tmp4_, FALSE);
#line 219 "../src/MainWindow.vala"
		_tmp5_ = self->priv->record_mic_switch;
#line 219 "../src/MainWindow.vala"
		gtk_widget_set_sensitive ((GtkWidget*) _tmp5_, FALSE);
#line 928 "MainWindow.c"
	} else {
		GtkSwitch* _tmp6_;
		GtkSwitch* _tmp7_;
#line 221 "../src/MainWindow.vala"
		_tmp6_ = self->priv->record_cmp_switch;
#line 221 "../src/MainWindow.vala"
		gtk_widget_set_sensitive ((GtkWidget*) _tmp6_, TRUE);
#line 222 "../src/MainWindow.vala"
		_tmp7_ = self->priv->record_mic_switch;
#line 222 "../src/MainWindow.vala"
		gtk_widget_set_sensitive ((GtkWidget*) _tmp7_, TRUE);
#line 940 "MainWindow.c"
	}
}

static void
__screen_recorder_main_window___lambda19__gtk_combo_box_changed (GtkComboBox* _sender,
                                                                 gpointer self)
{
#line 216 "../src/MainWindow.vala"
	_screen_recorder_main_window___lambda19_ ((ScreenRecorderMainWindow*) self);
#line 950 "MainWindow.c"
}

static void
_screen_recorder_main_window___lambda20_ (Block2Data* _data2_)
{
	ScreenRecorderMainWindow* self;
	GtkSpinButton* _tmp0_;
#line 235 "../src/MainWindow.vala"
	self = _data2_->self;
#line 236 "../src/MainWindow.vala"
	_tmp0_ = _data2_->delay_spin;
#line 236 "../src/MainWindow.vala"
	self->priv->delay = gtk_spin_button_get_value_as_int (_tmp0_) * 1000;
#line 964 "MainWindow.c"
}

static void
__screen_recorder_main_window___lambda20__gtk_spin_button_value_changed (GtkSpinButton* _sender,
                                                                         gpointer self)
{
#line 235 "../src/MainWindow.vala"
	_screen_recorder_main_window___lambda20_ (self);
#line 973 "MainWindow.c"
}

static void
_screen_recorder_main_window___lambda21_ (Block2Data* _data2_)
{
	ScreenRecorderMainWindow* self;
	GtkSpinButton* _tmp0_;
#line 239 "../src/MainWindow.vala"
	self = _data2_->self;
#line 240 "../src/MainWindow.vala"
	_tmp0_ = _data2_->framerate_spin;
#line 240 "../src/MainWindow.vala"
	self->priv->framerate = gtk_spin_button_get_value_as_int (_tmp0_);
#line 987 "MainWindow.c"
}

static void
__screen_recorder_main_window___lambda21__gtk_spin_button_value_changed (GtkSpinButton* _sender,
                                                                         gpointer self)
{
#line 239 "../src/MainWindow.vala"
	_screen_recorder_main_window___lambda21_ (self);
#line 996 "MainWindow.c"
}

static void
_screen_recorder_main_window___lambda22_ (Block2Data* _data2_)
{
	ScreenRecorderMainWindow* self;
	ScreenRecorderScaleComboBox* _tmp0_;
	gint _tmp1_;
	gint _tmp2_;
#line 243 "../src/MainWindow.vala"
	self = _data2_->self;
#line 244 "../src/MainWindow.vala"
	_tmp0_ = _data2_->scale_combobox;
#line 244 "../src/MainWindow.vala"
	_tmp1_ = screen_recorder_scale_combo_box_get_scale (_tmp0_);
#line 244 "../src/MainWindow.vala"
	_tmp2_ = _tmp1_;
#line 244 "../src/MainWindow.vala"
	self->priv->scale_percentage = _tmp2_;
#line 1016 "MainWindow.c"
}

static void
__screen_recorder_main_window___lambda22__gtk_combo_box_changed (GtkComboBox* _sender,
                                                                 gpointer self)
{
#line 243 "../src/MainWindow.vala"
	_screen_recorder_main_window___lambda22_ (self);
#line 1025 "MainWindow.c"
}

static void
_screen_recorder_main_window___lambda23_ (Block2Data* _data2_)
{
	ScreenRecorderMainWindow* self;
	GSettings* _tmp0_;
	ScreenRecorderMainWindowCaptureType _tmp1_;
#line 247 "../src/MainWindow.vala"
	self = _data2_->self;
#line 248 "../src/MainWindow.vala"
	self->priv->capture_mode = SCREEN_RECORDER_MAIN_WINDOW_CAPTURE_TYPE_SCREEN;
#line 249 "../src/MainWindow.vala"
	_tmp0_ = _data2_->settings;
#line 249 "../src/MainWindow.vala"
	_tmp1_ = self->priv->capture_mode;
#line 249 "../src/MainWindow.vala"
	g_settings_set_enum (_tmp0_, "last-capture-mode", (gint) _tmp1_);
#line 1044 "MainWindow.c"
}

static void
__screen_recorder_main_window___lambda23__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                                     gpointer self)
{
#line 247 "../src/MainWindow.vala"
	_screen_recorder_main_window___lambda23_ (self);
#line 1053 "MainWindow.c"
}

static void
_screen_recorder_main_window___lambda24_ (Block2Data* _data2_)
{
	ScreenRecorderMainWindow* self;
	GSettings* _tmp0_;
	ScreenRecorderMainWindowCaptureType _tmp1_;
#line 252 "../src/MainWindow.vala"
	self = _data2_->self;
#line 253 "../src/MainWindow.vala"
	self->priv->capture_mode = SCREEN_RECORDER_MAIN_WINDOW_CAPTURE_TYPE_AREA;
#line 254 "../src/MainWindow.vala"
	_tmp0_ = _data2_->settings;
#line 254 "../src/MainWindow.vala"
	_tmp1_ = self->priv->capture_mode;
#line 254 "../src/MainWindow.vala"
	g_settings_set_enum (_tmp0_, "last-capture-mode", (gint) _tmp1_);
#line 1072 "MainWindow.c"
}

static void
__screen_recorder_main_window___lambda24__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                                     gpointer self)
{
#line 252 "../src/MainWindow.vala"
	_screen_recorder_main_window___lambda24_ (self);
#line 1081 "MainWindow.c"
}

static void
_screen_recorder_main_window___lambda25_ (ScreenRecorderMainWindow* self)
{
	ScreenRecorderMainWindowCaptureType _tmp0_;
#line 258 "../src/MainWindow.vala"
	_tmp0_ = self->priv->capture_mode;
#line 258 "../src/MainWindow.vala"
	switch (_tmp0_) {
#line 258 "../src/MainWindow.vala"
		case SCREEN_RECORDER_MAIN_WINDOW_CAPTURE_TYPE_SCREEN:
#line 1094 "MainWindow.c"
		{
#line 260 "../src/MainWindow.vala"
			screen_recorder_main_window_capture_screen (self);
#line 261 "../src/MainWindow.vala"
			break;
#line 1100 "MainWindow.c"
		}
#line 258 "../src/MainWindow.vala"
		case SCREEN_RECORDER_MAIN_WINDOW_CAPTURE_TYPE_AREA:
#line 1104 "MainWindow.c"
		{
#line 263 "../src/MainWindow.vala"
			screen_recorder_main_window_capture_area (self);
#line 264 "../src/MainWindow.vala"
			break;
#line 1110 "MainWindow.c"
		}
		default:
#line 258 "../src/MainWindow.vala"
		break;
#line 1115 "MainWindow.c"
	}
}

static void
__screen_recorder_main_window___lambda25__gtk_button_clicked (GtkButton* _sender,
                                                              gpointer self)
{
#line 257 "../src/MainWindow.vala"
	_screen_recorder_main_window___lambda25_ ((ScreenRecorderMainWindow*) self);
#line 1125 "MainWindow.c"
}

static void
_screen_recorder_main_window_stop_recording_gtk_button_clicked (GtkButton* _sender,
                                                                gpointer self)
{
#line 267 "../src/MainWindow.vala"
	screen_recorder_main_window_stop_recording ((ScreenRecorderMainWindow*) self);
#line 1134 "MainWindow.c"
}

static gboolean
_screen_recorder_main_window___lambda26_ (ScreenRecorderMainWindow* self)
{
	gboolean result = FALSE;
#line 269 "../src/MainWindow.vala"
	if (self->priv->recording) {
#line 270 "../src/MainWindow.vala"
		screen_recorder_main_window_stop_recording (self);
#line 271 "../src/MainWindow.vala"
		result = TRUE;
#line 271 "../src/MainWindow.vala"
		return result;
#line 1149 "MainWindow.c"
	}
#line 273 "../src/MainWindow.vala"
	result = FALSE;
#line 273 "../src/MainWindow.vala"
	return result;
#line 1155 "MainWindow.c"
}

static gboolean
__screen_recorder_main_window___lambda26__gtk_widget_delete_event (GtkWidget* _sender,
                                                                   GdkEventAny* event,
                                                                   gpointer self)
{
	gboolean result;
	result = _screen_recorder_main_window___lambda26_ ((ScreenRecorderMainWindow*) self);
#line 268 "../src/MainWindow.vala"
	return result;
#line 1167 "MainWindow.c"
}

static void
_screen_recorder_main_window___lambda27_ (ScreenRecorderMainWindow* self)
{
#line 277 "../src/MainWindow.vala"
	if (self->priv->recording) {
#line 278 "../src/MainWindow.vala"
		screen_recorder_main_window_stop_recording (self);
#line 1177 "MainWindow.c"
	} else {
#line 279 "../src/MainWindow.vala"
		if (!self->priv->save_dialog_present) {
#line 1181 "MainWindow.c"
			GtkButton* _tmp0_;
#line 280 "../src/MainWindow.vala"
			_tmp0_ = self->priv->record_btn;
#line 280 "../src/MainWindow.vala"
			gtk_button_clicked (_tmp0_);
#line 1187 "MainWindow.c"
		}
	}
}

static void
__screen_recorder_main_window___lambda27__keybinding_manager_keybinding_handler_func (GdkEvent* event,
                                                                                      gpointer self)
{
#line 276 "../src/MainWindow.vala"
	_screen_recorder_main_window___lambda27_ ((ScreenRecorderMainWindow*) self);
#line 1198 "MainWindow.c"
}

static GObject *
screen_recorder_main_window_constructor (GType type,
                                         guint n_construct_properties,
                                         GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	ScreenRecorderMainWindow * self;
	Block2Data* _data2_;
	GSettings* _tmp0_;
	GSettings* _tmp1_;
	GtkRadioButton* all = NULL;
	GtkRadioButton* _tmp2_;
	GtkRadioButton* _tmp3_;
	GtkImage* _tmp4_;
	GtkImage* _tmp5_;
	GtkRadioButton* _tmp6_;
	GtkRadioButton* selection = NULL;
	GtkRadioButton* _tmp7_;
	GtkRadioButton* _tmp8_;
	GtkRadioButton* _tmp9_;
	GtkImage* _tmp10_;
	GtkImage* _tmp11_;
	GtkRadioButton* _tmp12_;
	GtkGrid* radio_grid = NULL;
	GtkGrid* _tmp13_;
	GtkGrid* _tmp14_;
	GtkGrid* _tmp15_;
	GtkGrid* _tmp16_;
	GtkGrid* _tmp17_;
	GtkStyleContext* _tmp18_;
	GtkGrid* _tmp19_;
	GtkRadioButton* _tmp20_;
	GtkGrid* _tmp21_;
	GtkRadioButton* _tmp22_;
	GtkLabel* pointer_label = NULL;
	GtkLabel* _tmp23_;
	GtkLabel* _tmp24_;
	GtkSwitch* _tmp25_;
	GtkSwitch* _tmp26_;
	GtkLabel* record_cmp_label = NULL;
	GtkLabel* _tmp27_;
	GtkLabel* _tmp28_;
	GtkSwitch* _tmp29_;
	GtkSwitch* _tmp30_;
	GtkSwitch* _tmp31_;
	GtkLabel* _tmp32_;
	GtkLabel* record_mic_label = NULL;
	GtkLabel* _tmp33_;
	GtkLabel* _tmp34_;
	GtkSwitch* _tmp35_;
	GtkSwitch* _tmp36_;
	GtkSwitch* _tmp37_;
	GtkLabel* _tmp38_;
	GtkLabel* borders_label = NULL;
	GtkLabel* _tmp39_;
	GtkLabel* _tmp40_;
	GtkSwitch* _tmp41_;
	GtkSwitch* _tmp42_;
	GtkLabel* delay_label = NULL;
	GtkLabel* _tmp43_;
	GtkLabel* _tmp44_;
	GtkSpinButton* _tmp45_;
	GtkLabel* framerate_label = NULL;
	GtkLabel* _tmp46_;
	GtkLabel* _tmp47_;
	GtkSpinButton* _tmp48_;
	GtkLabel* scale_label = NULL;
	GtkLabel* _tmp49_;
	GtkLabel* _tmp50_;
	ScreenRecorderScaleComboBox* _tmp51_;
	GtkLabel* format_label = NULL;
	GtkLabel* _tmp52_;
	GtkLabel* _tmp53_;
	ScreenRecorderFormatComboBox* _tmp54_;
	GtkButton* _tmp55_;
	GtkButton* _tmp56_;
	GtkStyleContext* _tmp57_;
	GtkButton* _tmp58_;
	GtkButton* _tmp59_;
	GtkButton* _tmp60_;
	GtkButton* _tmp61_;
	GtkStyleContext* _tmp62_;
	GtkButton* _tmp63_;
	GtkButton* _tmp64_;
	gchar* _tmp65_;
	gchar** _tmp66_;
	gchar** _tmp67_;
	gint _tmp67__length1;
	gchar* _tmp68_;
	gchar* _tmp69_;
	GtkButton* _tmp70_;
	GtkButton* _tmp71_;
	gchar* _tmp72_;
	gchar* _tmp73_;
	gchar* _tmp74_;
	GtkButton* _tmp75_;
	GtkButtonBox* _tmp76_;
	GtkButtonBox* _tmp77_;
	GtkButtonBox* _tmp78_;
	GtkButtonBox* _tmp79_;
	GtkButtonBox* _tmp80_;
	GtkButtonBox* _tmp81_;
	GtkButtonBox* _tmp82_;
	GtkButtonBox* _tmp83_;
	GtkButtonBox* _tmp84_;
	GtkButton* _tmp85_;
	GtkGrid* _tmp86_;
	GtkGrid* _tmp87_;
	GtkGrid* _tmp88_;
	GtkGrid* _tmp89_;
	GtkGrid* _tmp90_;
	GtkGrid* _tmp91_;
	GtkGrid* _tmp92_;
	GtkGrid* _tmp93_;
	GtkLabel* _tmp94_;
	GtkGrid* _tmp95_;
	GtkSwitch* _tmp96_;
	GtkGrid* _tmp97_;
	GtkLabel* _tmp98_;
	GtkGrid* _tmp99_;
	GtkSwitch* _tmp100_;
	GtkGrid* _tmp101_;
	GtkLabel* _tmp102_;
	GtkGrid* _tmp103_;
	GtkSwitch* _tmp104_;
	GtkGrid* _tmp105_;
	GtkLabel* _tmp106_;
	GtkGrid* _tmp107_;
	GtkSwitch* _tmp108_;
	GtkGrid* _tmp109_;
	GtkLabel* _tmp110_;
	GtkGrid* _tmp111_;
	GtkSpinButton* _tmp112_;
	GtkGrid* _tmp113_;
	GtkLabel* _tmp114_;
	GtkGrid* _tmp115_;
	GtkSpinButton* _tmp116_;
	GtkGrid* _tmp117_;
	GtkLabel* _tmp118_;
	GtkGrid* _tmp119_;
	ScreenRecorderScaleComboBox* _tmp120_;
	GtkGrid* _tmp121_;
	GtkLabel* _tmp122_;
	GtkGrid* _tmp123_;
	GtkComboBoxText* _tmp124_;
	GtkHeaderBar* titlebar = NULL;
	GtkHeaderBar* _tmp125_;
	GtkHeaderBar* _tmp126_;
	GtkHeaderBar* _tmp127_;
	GtkHeaderBar* _tmp128_;
	GtkStyleContext* titlebar_style_context = NULL;
	GtkHeaderBar* _tmp129_;
	GtkStyleContext* _tmp130_;
	GtkStyleContext* _tmp131_;
	GtkStyleContext* _tmp132_;
	GtkHeaderBar* _tmp133_;
	GtkBox* vbox = NULL;
	GtkBox* _tmp134_;
	GtkBox* _tmp135_;
	GtkGrid* _tmp136_;
	GtkBox* _tmp137_;
	GtkButtonBox* _tmp138_;
	GtkBox* _tmp139_;
	GraniteSettings* _tmp140_;
	GraniteSettings* _tmp141_;
	GtkSettings* _tmp142_;
	GtkSettings* _tmp143_;
	GtkSettings* _tmp144_;
	GraniteSettings* _tmp145_;
	GraniteSettingsColorScheme _tmp146_;
	GraniteSettingsColorScheme _tmp147_;
	GraniteSettings* _tmp148_;
	GSettings* _tmp149_;
	GtkSwitch* _tmp150_;
	GSettings* _tmp151_;
	GtkSwitch* _tmp152_;
	GSettings* _tmp153_;
	GtkSwitch* _tmp154_;
	GSettings* _tmp155_;
	GtkSwitch* _tmp156_;
	GSettings* _tmp157_;
	GtkSpinButton* _tmp158_;
	GSettings* _tmp159_;
	GtkSpinButton* _tmp160_;
	GSettings* _tmp161_;
	ScreenRecorderScaleComboBox* _tmp162_;
	GSettings* _tmp163_;
	GtkComboBoxText* _tmp164_;
	GtkSpinButton* _tmp165_;
	GtkSpinButton* _tmp166_;
	ScreenRecorderScaleComboBox* _tmp167_;
	gint _tmp168_;
	gint _tmp169_;
	GtkComboBoxText* _tmp170_;
	GtkComboBoxText* _tmp171_;
	gchar* _tmp172_;
	gchar* _tmp173_;
	gboolean _tmp174_;
	GSettings* _tmp177_;
	GtkSpinButton* _tmp179_;
	GtkSpinButton* _tmp180_;
	ScreenRecorderScaleComboBox* _tmp181_;
	GtkRadioButton* _tmp182_;
	GtkRadioButton* _tmp183_;
	GtkButton* _tmp184_;
	GtkButton* _tmp185_;
	KeybindingManager* manager = NULL;
	KeybindingManager* _tmp186_;
	KeybindingManager* _tmp187_;
#line 57 "../src/MainWindow.vala"
	parent_class = G_OBJECT_CLASS (screen_recorder_main_window_parent_class);
#line 57 "../src/MainWindow.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 57 "../src/MainWindow.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, SCREEN_RECORDER_TYPE_MAIN_WINDOW, ScreenRecorderMainWindow);
#line 57 "../src/MainWindow.vala"
	_data2_ = g_slice_new0 (Block2Data);
#line 57 "../src/MainWindow.vala"
	_data2_->_ref_count_ = 1;
#line 57 "../src/MainWindow.vala"
	_data2_->self = g_object_ref (self);
#line 58 "../src/MainWindow.vala"
	_tmp0_ = screen_recorder_screen_recorder_app_settings;
#line 58 "../src/MainWindow.vala"
	_tmp1_ = _g_object_ref0 (_tmp0_);
#line 58 "../src/MainWindow.vala"
	_data2_->settings = _tmp1_;
#line 60 "../src/MainWindow.vala"
	_tmp2_ = (GtkRadioButton*) gtk_radio_button_new (NULL);
#line 60 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp2_);
#line 60 "../src/MainWindow.vala"
	all = _tmp2_;
#line 61 "../src/MainWindow.vala"
	_tmp3_ = all;
#line 61 "../src/MainWindow.vala"
	_tmp4_ = (GtkImage*) gtk_image_new_from_icon_name ("grab-screen-symbolic", (GtkIconSize) GTK_ICON_SIZE_DND);
#line 61 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp4_);
#line 61 "../src/MainWindow.vala"
	_tmp5_ = _tmp4_;
#line 61 "../src/MainWindow.vala"
	gtk_button_set_image ((GtkButton*) _tmp3_, (GtkWidget*) _tmp5_);
#line 61 "../src/MainWindow.vala"
	_g_object_unref0 (_tmp5_);
#line 62 "../src/MainWindow.vala"
	_tmp6_ = all;
#line 62 "../src/MainWindow.vala"
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp6_, _ ("Grab the whole screen"));
#line 64 "../src/MainWindow.vala"
	_tmp7_ = all;
#line 64 "../src/MainWindow.vala"
	_tmp8_ = (GtkRadioButton*) gtk_radio_button_new_from_widget (_tmp7_);
#line 64 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp8_);
#line 64 "../src/MainWindow.vala"
	selection = _tmp8_;
#line 65 "../src/MainWindow.vala"
	_tmp9_ = selection;
#line 65 "../src/MainWindow.vala"
	_tmp10_ = (GtkImage*) gtk_image_new_from_icon_name ("grab-area-symbolic", (GtkIconSize) GTK_ICON_SIZE_DND);
#line 65 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp10_);
#line 65 "../src/MainWindow.vala"
	_tmp11_ = _tmp10_;
#line 65 "../src/MainWindow.vala"
	gtk_button_set_image ((GtkButton*) _tmp9_, (GtkWidget*) _tmp11_);
#line 65 "../src/MainWindow.vala"
	_g_object_unref0 (_tmp11_);
#line 66 "../src/MainWindow.vala"
	_tmp12_ = selection;
#line 66 "../src/MainWindow.vala"
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp12_, _ ("Select area to grab"));
#line 68 "../src/MainWindow.vala"
	_tmp13_ = (GtkGrid*) gtk_grid_new ();
#line 68 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp13_);
#line 68 "../src/MainWindow.vala"
	radio_grid = _tmp13_;
#line 69 "../src/MainWindow.vala"
	_tmp14_ = radio_grid;
#line 69 "../src/MainWindow.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp14_, GTK_ALIGN_CENTER);
#line 70 "../src/MainWindow.vala"
	_tmp15_ = radio_grid;
#line 70 "../src/MainWindow.vala"
	gtk_grid_set_column_spacing (_tmp15_, 24);
#line 71 "../src/MainWindow.vala"
	_tmp16_ = radio_grid;
#line 71 "../src/MainWindow.vala"
	g_object_set ((GtkWidget*) _tmp16_, "margin", 24, NULL);
#line 72 "../src/MainWindow.vala"
	_tmp17_ = radio_grid;
#line 72 "../src/MainWindow.vala"
	_tmp18_ = gtk_widget_get_style_context ((GtkWidget*) _tmp17_);
#line 72 "../src/MainWindow.vala"
	gtk_style_context_add_class (_tmp18_, GRANITE_STYLE_CLASS_ACCENT);
#line 73 "../src/MainWindow.vala"
	_tmp19_ = radio_grid;
#line 73 "../src/MainWindow.vala"
	_tmp20_ = all;
#line 73 "../src/MainWindow.vala"
	gtk_container_add ((GtkContainer*) _tmp19_, (GtkWidget*) _tmp20_);
#line 74 "../src/MainWindow.vala"
	_tmp21_ = radio_grid;
#line 74 "../src/MainWindow.vala"
	_tmp22_ = selection;
#line 74 "../src/MainWindow.vala"
	gtk_container_add ((GtkContainer*) _tmp21_, (GtkWidget*) _tmp22_);
#line 76 "../src/MainWindow.vala"
	_tmp23_ = (GtkLabel*) gtk_label_new (_ ("Grab mouse pointer:"));
#line 76 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp23_);
#line 76 "../src/MainWindow.vala"
	pointer_label = _tmp23_;
#line 77 "../src/MainWindow.vala"
	_tmp24_ = pointer_label;
#line 77 "../src/MainWindow.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp24_, GTK_ALIGN_END);
#line 79 "../src/MainWindow.vala"
	_tmp25_ = (GtkSwitch*) gtk_switch_new ();
#line 79 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp25_);
#line 79 "../src/MainWindow.vala"
	_g_object_unref0 (self->priv->pointer_switch);
#line 79 "../src/MainWindow.vala"
	self->priv->pointer_switch = _tmp25_;
#line 80 "../src/MainWindow.vala"
	_tmp26_ = self->priv->pointer_switch;
#line 80 "../src/MainWindow.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp26_, GTK_ALIGN_START);
#line 82 "../src/MainWindow.vala"
	_tmp27_ = (GtkLabel*) gtk_label_new (_ ("Record computer sounds:"));
#line 82 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp27_);
#line 82 "../src/MainWindow.vala"
	record_cmp_label = _tmp27_;
#line 83 "../src/MainWindow.vala"
	_tmp28_ = record_cmp_label;
#line 83 "../src/MainWindow.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp28_, GTK_ALIGN_END);
#line 85 "../src/MainWindow.vala"
	_tmp29_ = (GtkSwitch*) gtk_switch_new ();
#line 85 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp29_);
#line 85 "../src/MainWindow.vala"
	_g_object_unref0 (self->priv->record_cmp_switch);
#line 85 "../src/MainWindow.vala"
	self->priv->record_cmp_switch = _tmp29_;
#line 86 "../src/MainWindow.vala"
	_tmp30_ = self->priv->record_cmp_switch;
#line 86 "../src/MainWindow.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp30_, GTK_ALIGN_START);
#line 87 "../src/MainWindow.vala"
	_tmp31_ = self->priv->record_cmp_switch;
#line 87 "../src/MainWindow.vala"
	_tmp32_ = record_cmp_label;
#line 87 "../src/MainWindow.vala"
	g_object_bind_property_with_closures ((GObject*) _tmp31_, "sensitive", (GObject*) _tmp32_, "sensitive", G_BINDING_DEFAULT, (GClosure*) ((NULL == NULL) ? NULL : g_cclosure_new ((GCallback) NULL, NULL, (GClosureNotify) NULL)), (GClosure*) ((NULL == NULL) ? NULL : g_cclosure_new ((GCallback) NULL, NULL, (GClosureNotify) NULL)));
#line 89 "../src/MainWindow.vala"
	_tmp33_ = (GtkLabel*) gtk_label_new (_ ("Record from microphone:"));
#line 89 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp33_);
#line 89 "../src/MainWindow.vala"
	record_mic_label = _tmp33_;
#line 90 "../src/MainWindow.vala"
	_tmp34_ = record_mic_label;
#line 90 "../src/MainWindow.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp34_, GTK_ALIGN_END);
#line 92 "../src/MainWindow.vala"
	_tmp35_ = (GtkSwitch*) gtk_switch_new ();
#line 92 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp35_);
#line 92 "../src/MainWindow.vala"
	_g_object_unref0 (self->priv->record_mic_switch);
#line 92 "../src/MainWindow.vala"
	self->priv->record_mic_switch = _tmp35_;
#line 93 "../src/MainWindow.vala"
	_tmp36_ = self->priv->record_mic_switch;
#line 93 "../src/MainWindow.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp36_, GTK_ALIGN_START);
#line 94 "../src/MainWindow.vala"
	_tmp37_ = self->priv->record_mic_switch;
#line 94 "../src/MainWindow.vala"
	_tmp38_ = record_mic_label;
#line 94 "../src/MainWindow.vala"
	g_object_bind_property_with_closures ((GObject*) _tmp37_, "sensitive", (GObject*) _tmp38_, "sensitive", G_BINDING_DEFAULT, (GClosure*) ((NULL == NULL) ? NULL : g_cclosure_new ((GCallback) NULL, NULL, (GClosureNotify) NULL)), (GClosure*) ((NULL == NULL) ? NULL : g_cclosure_new ((GCallback) NULL, NULL, (GClosureNotify) NULL)));
#line 96 "../src/MainWindow.vala"
	_tmp39_ = (GtkLabel*) gtk_label_new (_ ("Show borders:"));
#line 96 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp39_);
#line 96 "../src/MainWindow.vala"
	borders_label = _tmp39_;
#line 97 "../src/MainWindow.vala"
	_tmp40_ = borders_label;
#line 97 "../src/MainWindow.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp40_, GTK_ALIGN_END);
#line 99 "../src/MainWindow.vala"
	_tmp41_ = (GtkSwitch*) gtk_switch_new ();
#line 99 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp41_);
#line 99 "../src/MainWindow.vala"
	_g_object_unref0 (self->priv->borders_switch);
#line 99 "../src/MainWindow.vala"
	self->priv->borders_switch = _tmp41_;
#line 100 "../src/MainWindow.vala"
	_tmp42_ = self->priv->borders_switch;
#line 100 "../src/MainWindow.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp42_, GTK_ALIGN_START);
#line 102 "../src/MainWindow.vala"
	_tmp43_ = (GtkLabel*) gtk_label_new (_ ("Delay in seconds:"));
#line 102 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp43_);
#line 102 "../src/MainWindow.vala"
	delay_label = _tmp43_;
#line 103 "../src/MainWindow.vala"
	_tmp44_ = delay_label;
#line 103 "../src/MainWindow.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp44_, GTK_ALIGN_END);
#line 105 "../src/MainWindow.vala"
	_tmp45_ = (GtkSpinButton*) gtk_spin_button_new_with_range ((gdouble) 0, (gdouble) 15, (gdouble) 1);
#line 105 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp45_);
#line 105 "../src/MainWindow.vala"
	_data2_->delay_spin = _tmp45_;
#line 107 "../src/MainWindow.vala"
	_tmp46_ = (GtkLabel*) gtk_label_new (_ ("Frame rate:"));
#line 107 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp46_);
#line 107 "../src/MainWindow.vala"
	framerate_label = _tmp46_;
#line 108 "../src/MainWindow.vala"
	_tmp47_ = framerate_label;
#line 108 "../src/MainWindow.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp47_, GTK_ALIGN_END);
#line 110 "../src/MainWindow.vala"
	_tmp48_ = (GtkSpinButton*) gtk_spin_button_new_with_range ((gdouble) 1, (gdouble) 120, (gdouble) 1);
#line 110 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp48_);
#line 110 "../src/MainWindow.vala"
	_data2_->framerate_spin = _tmp48_;
#line 112 "../src/MainWindow.vala"
	_tmp49_ = (GtkLabel*) gtk_label_new (_ ("Scale:"));
#line 112 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp49_);
#line 112 "../src/MainWindow.vala"
	scale_label = _tmp49_;
#line 113 "../src/MainWindow.vala"
	_tmp50_ = scale_label;
#line 113 "../src/MainWindow.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp50_, GTK_ALIGN_END);
#line 115 "../src/MainWindow.vala"
	_tmp51_ = screen_recorder_scale_combo_box_new ();
#line 115 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp51_);
#line 115 "../src/MainWindow.vala"
	_data2_->scale_combobox = _tmp51_;
#line 117 "../src/MainWindow.vala"
	_tmp52_ = (GtkLabel*) gtk_label_new (_ ("Format:"));
#line 117 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp52_);
#line 117 "../src/MainWindow.vala"
	format_label = _tmp52_;
#line 118 "../src/MainWindow.vala"
	_tmp53_ = format_label;
#line 118 "../src/MainWindow.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp53_, GTK_ALIGN_END);
#line 120 "../src/MainWindow.vala"
	_tmp54_ = screen_recorder_format_combo_box_new ();
#line 120 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp54_);
#line 120 "../src/MainWindow.vala"
	_g_object_unref0 (self->priv->format_cmb);
#line 120 "../src/MainWindow.vala"
	self->priv->format_cmb = (GtkComboBoxText*) _tmp54_;
#line 122 "../src/MainWindow.vala"
	_tmp55_ = (GtkButton*) gtk_button_new_with_label (_ ("Record Screen"));
#line 122 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp55_);
#line 122 "../src/MainWindow.vala"
	_g_object_unref0 (self->priv->record_btn);
#line 122 "../src/MainWindow.vala"
	self->priv->record_btn = _tmp55_;
#line 123 "../src/MainWindow.vala"
	_tmp56_ = self->priv->record_btn;
#line 123 "../src/MainWindow.vala"
	_tmp57_ = gtk_widget_get_style_context ((GtkWidget*) _tmp56_);
#line 123 "../src/MainWindow.vala"
	gtk_style_context_add_class (_tmp57_, GTK_STYLE_CLASS_SUGGESTED_ACTION);
#line 124 "../src/MainWindow.vala"
	_tmp58_ = self->priv->record_btn;
#line 124 "../src/MainWindow.vala"
	gtk_widget_set_can_default ((GtkWidget*) _tmp58_, TRUE);
#line 125 "../src/MainWindow.vala"
	_tmp59_ = self->priv->record_btn;
#line 125 "../src/MainWindow.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp59_, TRUE);
#line 127 "../src/MainWindow.vala"
	_tmp60_ = (GtkButton*) gtk_button_new_with_label (_ ("Stop Recording"));
#line 127 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp60_);
#line 127 "../src/MainWindow.vala"
	_g_object_unref0 (self->priv->stop_btn);
#line 127 "../src/MainWindow.vala"
	self->priv->stop_btn = _tmp60_;
#line 128 "../src/MainWindow.vala"
	_tmp61_ = self->priv->stop_btn;
#line 128 "../src/MainWindow.vala"
	_tmp62_ = gtk_widget_get_style_context ((GtkWidget*) _tmp61_);
#line 128 "../src/MainWindow.vala"
	gtk_style_context_add_class (_tmp62_, GTK_STYLE_CLASS_DESTRUCTIVE_ACTION);
#line 129 "../src/MainWindow.vala"
	_tmp63_ = self->priv->stop_btn;
#line 129 "../src/MainWindow.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp63_, TRUE);
#line 131 "../src/MainWindow.vala"
	_tmp64_ = self->priv->record_btn;
#line 131 "../src/MainWindow.vala"
	_tmp65_ = g_strdup ("<Ctrl><Shift>R");
#line 131 "../src/MainWindow.vala"
	_tmp66_ = g_new0 (gchar*, 1 + 1);
#line 131 "../src/MainWindow.vala"
	_tmp66_[0] = _tmp65_;
#line 131 "../src/MainWindow.vala"
	_tmp67_ = _tmp66_;
#line 131 "../src/MainWindow.vala"
	_tmp67__length1 = 1;
#line 131 "../src/MainWindow.vala"
	_tmp68_ = granite_markup_accel_tooltip (_tmp67_, (gint) 1, _ ("Toggle recording"));
#line 131 "../src/MainWindow.vala"
	_tmp69_ = _tmp68_;
#line 131 "../src/MainWindow.vala"
	gtk_widget_set_tooltip_markup ((GtkWidget*) _tmp64_, _tmp69_);
#line 131 "../src/MainWindow.vala"
	_g_free0 (_tmp69_);
#line 131 "../src/MainWindow.vala"
	_tmp67_ = (_vala_array_free (_tmp67_, _tmp67__length1, (GDestroyNotify) g_free), NULL);
#line 132 "../src/MainWindow.vala"
	_tmp70_ = self->priv->stop_btn;
#line 132 "../src/MainWindow.vala"
	_tmp71_ = self->priv->record_btn;
#line 132 "../src/MainWindow.vala"
	_tmp72_ = gtk_widget_get_tooltip_markup ((GtkWidget*) _tmp71_);
#line 132 "../src/MainWindow.vala"
	_tmp73_ = _tmp72_;
#line 132 "../src/MainWindow.vala"
	_tmp74_ = _tmp73_;
#line 132 "../src/MainWindow.vala"
	gtk_widget_set_tooltip_markup ((GtkWidget*) _tmp70_, _tmp74_);
#line 132 "../src/MainWindow.vala"
	_g_free0 (_tmp74_);
#line 134 "../src/MainWindow.vala"
	_tmp75_ = self->priv->record_btn;
#line 134 "../src/MainWindow.vala"
	gtk_window_set_default ((GtkWindow*) self, (GtkWidget*) _tmp75_);
#line 136 "../src/MainWindow.vala"
	_tmp76_ = (GtkButtonBox*) gtk_button_box_new (GTK_ORIENTATION_HORIZONTAL);
#line 136 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp76_);
#line 136 "../src/MainWindow.vala"
	_g_object_unref0 (self->priv->actions);
#line 136 "../src/MainWindow.vala"
	self->priv->actions = _tmp76_;
#line 137 "../src/MainWindow.vala"
	_tmp77_ = self->priv->actions;
#line 137 "../src/MainWindow.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp77_, GTK_ALIGN_CENTER);
#line 138 "../src/MainWindow.vala"
	_tmp78_ = self->priv->actions;
#line 138 "../src/MainWindow.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp78_, 24);
#line 139 "../src/MainWindow.vala"
	_tmp79_ = self->priv->actions;
#line 139 "../src/MainWindow.vala"
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp79_, 12);
#line 140 "../src/MainWindow.vala"
	_tmp80_ = self->priv->actions;
#line 140 "../src/MainWindow.vala"
	gtk_box_set_spacing ((GtkBox*) _tmp80_, 6);
#line 141 "../src/MainWindow.vala"
	_tmp81_ = self->priv->actions;
#line 141 "../src/MainWindow.vala"
	gtk_widget_set_hexpand_set ((GtkWidget*) _tmp81_, TRUE);
#line 142 "../src/MainWindow.vala"
	_tmp82_ = self->priv->actions;
#line 142 "../src/MainWindow.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp82_, TRUE);
#line 143 "../src/MainWindow.vala"
	_tmp83_ = self->priv->actions;
#line 143 "../src/MainWindow.vala"
	gtk_button_box_set_layout (_tmp83_, GTK_BUTTONBOX_EXPAND);
#line 144 "../src/MainWindow.vala"
	_tmp84_ = self->priv->actions;
#line 144 "../src/MainWindow.vala"
	_tmp85_ = self->priv->record_btn;
#line 144 "../src/MainWindow.vala"
	gtk_container_add ((GtkContainer*) _tmp84_, (GtkWidget*) _tmp85_);
#line 146 "../src/MainWindow.vala"
	_tmp86_ = (GtkGrid*) gtk_grid_new ();
#line 146 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp86_);
#line 146 "../src/MainWindow.vala"
	_g_object_unref0 (self->priv->grid);
#line 146 "../src/MainWindow.vala"
	self->priv->grid = _tmp86_;
#line 147 "../src/MainWindow.vala"
	_tmp87_ = self->priv->grid;
#line 147 "../src/MainWindow.vala"
	g_object_set ((GtkWidget*) _tmp87_, "margin", 6, NULL);
#line 148 "../src/MainWindow.vala"
	_tmp88_ = self->priv->grid;
#line 148 "../src/MainWindow.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp88_, 0);
#line 149 "../src/MainWindow.vala"
	_tmp89_ = self->priv->grid;
#line 149 "../src/MainWindow.vala"
	gtk_grid_set_row_spacing (_tmp89_, 6);
#line 150 "../src/MainWindow.vala"
	_tmp90_ = self->priv->grid;
#line 150 "../src/MainWindow.vala"
	gtk_grid_set_column_spacing (_tmp90_, 12);
#line 151 "../src/MainWindow.vala"
	_tmp91_ = self->priv->grid;
#line 151 "../src/MainWindow.vala"
	_tmp92_ = radio_grid;
#line 151 "../src/MainWindow.vala"
	gtk_grid_attach (_tmp91_, (GtkWidget*) _tmp92_, 0, 0, 2, 1);
#line 152 "../src/MainWindow.vala"
	_tmp93_ = self->priv->grid;
#line 152 "../src/MainWindow.vala"
	_tmp94_ = record_cmp_label;
#line 152 "../src/MainWindow.vala"
	gtk_grid_attach (_tmp93_, (GtkWidget*) _tmp94_, 0, 1, 1, 1);
#line 153 "../src/MainWindow.vala"
	_tmp95_ = self->priv->grid;
#line 153 "../src/MainWindow.vala"
	_tmp96_ = self->priv->record_cmp_switch;
#line 153 "../src/MainWindow.vala"
	gtk_grid_attach (_tmp95_, (GtkWidget*) _tmp96_, 1, 1, 1, 1);
#line 154 "../src/MainWindow.vala"
	_tmp97_ = self->priv->grid;
#line 154 "../src/MainWindow.vala"
	_tmp98_ = record_mic_label;
#line 154 "../src/MainWindow.vala"
	gtk_grid_attach (_tmp97_, (GtkWidget*) _tmp98_, 0, 2, 1, 1);
#line 155 "../src/MainWindow.vala"
	_tmp99_ = self->priv->grid;
#line 155 "../src/MainWindow.vala"
	_tmp100_ = self->priv->record_mic_switch;
#line 155 "../src/MainWindow.vala"
	gtk_grid_attach (_tmp99_, (GtkWidget*) _tmp100_, 1, 2, 1, 1);
#line 156 "../src/MainWindow.vala"
	_tmp101_ = self->priv->grid;
#line 156 "../src/MainWindow.vala"
	_tmp102_ = pointer_label;
#line 156 "../src/MainWindow.vala"
	gtk_grid_attach (_tmp101_, (GtkWidget*) _tmp102_, 0, 3, 1, 1);
#line 157 "../src/MainWindow.vala"
	_tmp103_ = self->priv->grid;
#line 157 "../src/MainWindow.vala"
	_tmp104_ = self->priv->pointer_switch;
#line 157 "../src/MainWindow.vala"
	gtk_grid_attach (_tmp103_, (GtkWidget*) _tmp104_, 1, 3, 1, 1);
#line 158 "../src/MainWindow.vala"
	_tmp105_ = self->priv->grid;
#line 158 "../src/MainWindow.vala"
	_tmp106_ = borders_label;
#line 158 "../src/MainWindow.vala"
	gtk_grid_attach (_tmp105_, (GtkWidget*) _tmp106_, 0, 4, 1, 1);
#line 159 "../src/MainWindow.vala"
	_tmp107_ = self->priv->grid;
#line 159 "../src/MainWindow.vala"
	_tmp108_ = self->priv->borders_switch;
#line 159 "../src/MainWindow.vala"
	gtk_grid_attach (_tmp107_, (GtkWidget*) _tmp108_, 1, 4, 1, 1);
#line 160 "../src/MainWindow.vala"
	_tmp109_ = self->priv->grid;
#line 160 "../src/MainWindow.vala"
	_tmp110_ = delay_label;
#line 160 "../src/MainWindow.vala"
	gtk_grid_attach (_tmp109_, (GtkWidget*) _tmp110_, 0, 5, 1, 1);
#line 161 "../src/MainWindow.vala"
	_tmp111_ = self->priv->grid;
#line 161 "../src/MainWindow.vala"
	_tmp112_ = _data2_->delay_spin;
#line 161 "../src/MainWindow.vala"
	gtk_grid_attach (_tmp111_, (GtkWidget*) _tmp112_, 1, 5, 1, 1);
#line 162 "../src/MainWindow.vala"
	_tmp113_ = self->priv->grid;
#line 162 "../src/MainWindow.vala"
	_tmp114_ = framerate_label;
#line 162 "../src/MainWindow.vala"
	gtk_grid_attach (_tmp113_, (GtkWidget*) _tmp114_, 0, 6, 1, 1);
#line 163 "../src/MainWindow.vala"
	_tmp115_ = self->priv->grid;
#line 163 "../src/MainWindow.vala"
	_tmp116_ = _data2_->framerate_spin;
#line 163 "../src/MainWindow.vala"
	gtk_grid_attach (_tmp115_, (GtkWidget*) _tmp116_, 1, 6, 1, 1);
#line 164 "../src/MainWindow.vala"
	_tmp117_ = self->priv->grid;
#line 164 "../src/MainWindow.vala"
	_tmp118_ = scale_label;
#line 164 "../src/MainWindow.vala"
	gtk_grid_attach (_tmp117_, (GtkWidget*) _tmp118_, 0, 7, 1, 1);
#line 165 "../src/MainWindow.vala"
	_tmp119_ = self->priv->grid;
#line 165 "../src/MainWindow.vala"
	_tmp120_ = _data2_->scale_combobox;
#line 165 "../src/MainWindow.vala"
	gtk_grid_attach (_tmp119_, (GtkWidget*) _tmp120_, 1, 7, 1, 1);
#line 166 "../src/MainWindow.vala"
	_tmp121_ = self->priv->grid;
#line 166 "../src/MainWindow.vala"
	_tmp122_ = format_label;
#line 166 "../src/MainWindow.vala"
	gtk_grid_attach (_tmp121_, (GtkWidget*) _tmp122_, 0, 8, 1, 1);
#line 167 "../src/MainWindow.vala"
	_tmp123_ = self->priv->grid;
#line 167 "../src/MainWindow.vala"
	_tmp124_ = self->priv->format_cmb;
#line 167 "../src/MainWindow.vala"
	gtk_grid_attach (_tmp123_, (GtkWidget*) _tmp124_, 1, 8, 1, 1);
#line 174 "../src/MainWindow.vala"
	_tmp125_ = (GtkHeaderBar*) gtk_header_bar_new ();
#line 174 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp125_);
#line 174 "../src/MainWindow.vala"
	titlebar = _tmp125_;
#line 175 "../src/MainWindow.vala"
	_tmp126_ = titlebar;
#line 175 "../src/MainWindow.vala"
	gtk_header_bar_set_title (_tmp126_, _ ("Screen Recorder"));
#line 176 "../src/MainWindow.vala"
	_tmp127_ = titlebar;
#line 176 "../src/MainWindow.vala"
	gtk_header_bar_set_show_close_button (_tmp127_, TRUE);
#line 177 "../src/MainWindow.vala"
	_tmp128_ = titlebar;
#line 177 "../src/MainWindow.vala"
	gtk_header_bar_set_has_subtitle (_tmp128_, FALSE);
#line 180 "../src/MainWindow.vala"
	_tmp129_ = titlebar;
#line 180 "../src/MainWindow.vala"
	_tmp130_ = gtk_widget_get_style_context ((GtkWidget*) _tmp129_);
#line 180 "../src/MainWindow.vala"
	_tmp131_ = _g_object_ref0 (_tmp130_);
#line 180 "../src/MainWindow.vala"
	titlebar_style_context = _tmp131_;
#line 181 "../src/MainWindow.vala"
	_tmp132_ = titlebar_style_context;
#line 181 "../src/MainWindow.vala"
	gtk_style_context_add_class (_tmp132_, GTK_STYLE_CLASS_FLAT);
#line 184 "../src/MainWindow.vala"
	_tmp133_ = titlebar;
#line 184 "../src/MainWindow.vala"
	gtk_window_set_titlebar ((GtkWindow*) self, (GtkWidget*) _tmp133_);
#line 186 "../src/MainWindow.vala"
	_tmp134_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
#line 186 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp134_);
#line 186 "../src/MainWindow.vala"
	vbox = _tmp134_;
#line 187 "../src/MainWindow.vala"
	_tmp135_ = vbox;
#line 187 "../src/MainWindow.vala"
	_tmp136_ = self->priv->grid;
#line 187 "../src/MainWindow.vala"
	gtk_container_add ((GtkContainer*) _tmp135_, (GtkWidget*) _tmp136_);
#line 188 "../src/MainWindow.vala"
	_tmp137_ = vbox;
#line 188 "../src/MainWindow.vala"
	_tmp138_ = self->priv->actions;
#line 188 "../src/MainWindow.vala"
	gtk_container_add ((GtkContainer*) _tmp137_, (GtkWidget*) _tmp138_);
#line 190 "../src/MainWindow.vala"
	_tmp139_ = vbox;
#line 190 "../src/MainWindow.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp139_);
#line 196 "../src/MainWindow.vala"
	_tmp140_ = granite_settings_get_default ();
#line 196 "../src/MainWindow.vala"
	_tmp141_ = _g_object_ref0 (_tmp140_);
#line 196 "../src/MainWindow.vala"
	_data2_->granite_settings = _tmp141_;
#line 197 "../src/MainWindow.vala"
	_tmp142_ = gtk_settings_get_default ();
#line 197 "../src/MainWindow.vala"
	_tmp143_ = _g_object_ref0 (_tmp142_);
#line 197 "../src/MainWindow.vala"
	_data2_->gtk_settings = _tmp143_;
#line 198 "../src/MainWindow.vala"
	_tmp144_ = _data2_->gtk_settings;
#line 198 "../src/MainWindow.vala"
	_tmp145_ = _data2_->granite_settings;
#line 198 "../src/MainWindow.vala"
	_tmp146_ = granite_settings_get_prefers_color_scheme (_tmp145_);
#line 198 "../src/MainWindow.vala"
	_tmp147_ = _tmp146_;
#line 198 "../src/MainWindow.vala"
	g_object_set (_tmp144_, "gtk-application-prefer-dark-theme", _tmp147_ == GRANITE_SETTINGS_COLOR_SCHEME_DARK, NULL);
#line 200 "../src/MainWindow.vala"
	_tmp148_ = _data2_->granite_settings;
#line 200 "../src/MainWindow.vala"
	g_signal_connect_data ((GObject*) _tmp148_, "notify::prefers-color-scheme", (GCallback) __screen_recorder_main_window___lambda18__g_object_notify, block2_data_ref (_data2_), (GClosureNotify) block2_data_unref, 0);
#line 204 "../src/MainWindow.vala"
	_tmp149_ = _data2_->settings;
#line 204 "../src/MainWindow.vala"
	_tmp150_ = self->priv->record_cmp_switch;
#line 204 "../src/MainWindow.vala"
	g_settings_bind (_tmp149_, "record-computer", (GObject*) _tmp150_, "active", G_SETTINGS_BIND_DEFAULT);
#line 205 "../src/MainWindow.vala"
	_tmp151_ = _data2_->settings;
#line 205 "../src/MainWindow.vala"
	_tmp152_ = self->priv->record_mic_switch;
#line 205 "../src/MainWindow.vala"
	g_settings_bind (_tmp151_, "record-microphone", (GObject*) _tmp152_, "active", G_SETTINGS_BIND_DEFAULT);
#line 206 "../src/MainWindow.vala"
	_tmp153_ = _data2_->settings;
#line 206 "../src/MainWindow.vala"
	_tmp154_ = self->priv->pointer_switch;
#line 206 "../src/MainWindow.vala"
	g_settings_bind (_tmp153_, "mouse-pointer", (GObject*) _tmp154_, "active", G_SETTINGS_BIND_DEFAULT);
#line 207 "../src/MainWindow.vala"
	_tmp155_ = _data2_->settings;
#line 207 "../src/MainWindow.vala"
	_tmp156_ = self->priv->borders_switch;
#line 207 "../src/MainWindow.vala"
	g_settings_bind (_tmp155_, "show-borders", (GObject*) _tmp156_, "active", G_SETTINGS_BIND_DEFAULT);
#line 208 "../src/MainWindow.vala"
	_tmp157_ = _data2_->settings;
#line 208 "../src/MainWindow.vala"
	_tmp158_ = _data2_->delay_spin;
#line 208 "../src/MainWindow.vala"
	g_settings_bind (_tmp157_, "delay", (GObject*) _tmp158_, "value", G_SETTINGS_BIND_DEFAULT);
#line 209 "../src/MainWindow.vala"
	_tmp159_ = _data2_->settings;
#line 209 "../src/MainWindow.vala"
	_tmp160_ = _data2_->framerate_spin;
#line 209 "../src/MainWindow.vala"
	g_settings_bind (_tmp159_, "framerate", (GObject*) _tmp160_, "value", G_SETTINGS_BIND_DEFAULT);
#line 210 "../src/MainWindow.vala"
	_tmp161_ = _data2_->settings;
#line 210 "../src/MainWindow.vala"
	_tmp162_ = _data2_->scale_combobox;
#line 210 "../src/MainWindow.vala"
	g_settings_bind (_tmp161_, "scale", (GObject*) _tmp162_, "scale", G_SETTINGS_BIND_DEFAULT);
#line 211 "../src/MainWindow.vala"
	_tmp163_ = _data2_->settings;
#line 211 "../src/MainWindow.vala"
	_tmp164_ = self->priv->format_cmb;
#line 211 "../src/MainWindow.vala"
	g_settings_bind (_tmp163_, "format", (GObject*) _tmp164_, "text_value", G_SETTINGS_BIND_DEFAULT);
#line 212 "../src/MainWindow.vala"
	_tmp165_ = _data2_->delay_spin;
#line 212 "../src/MainWindow.vala"
	self->priv->delay = gtk_spin_button_get_value_as_int (_tmp165_) * 1000;
#line 213 "../src/MainWindow.vala"
	_tmp166_ = _data2_->framerate_spin;
#line 213 "../src/MainWindow.vala"
	self->priv->framerate = gtk_spin_button_get_value_as_int (_tmp166_);
#line 214 "../src/MainWindow.vala"
	_tmp167_ = _data2_->scale_combobox;
#line 214 "../src/MainWindow.vala"
	_tmp168_ = screen_recorder_scale_combo_box_get_scale (_tmp167_);
#line 214 "../src/MainWindow.vala"
	_tmp169_ = _tmp168_;
#line 214 "../src/MainWindow.vala"
	self->priv->scale_percentage = _tmp169_;
#line 216 "../src/MainWindow.vala"
	_tmp170_ = self->priv->format_cmb;
#line 216 "../src/MainWindow.vala"
	g_signal_connect_object ((GtkComboBox*) _tmp170_, "changed", (GCallback) __screen_recorder_main_window___lambda19__gtk_combo_box_changed, self, 0);
#line 225 "../src/MainWindow.vala"
	_tmp171_ = self->priv->format_cmb;
#line 225 "../src/MainWindow.vala"
	_tmp172_ = gtk_combo_box_text_get_active_text (_tmp171_);
#line 225 "../src/MainWindow.vala"
	_tmp173_ = _tmp172_;
#line 225 "../src/MainWindow.vala"
	_tmp174_ = g_strcmp0 (_tmp173_, "gif") == 0;
#line 225 "../src/MainWindow.vala"
	_g_free0 (_tmp173_);
#line 225 "../src/MainWindow.vala"
	if (_tmp174_) {
#line 2087 "MainWindow.c"
		GtkSwitch* _tmp175_;
		GtkSwitch* _tmp176_;
#line 226 "../src/MainWindow.vala"
		_tmp175_ = self->priv->record_cmp_switch;
#line 226 "../src/MainWindow.vala"
		gtk_widget_set_sensitive ((GtkWidget*) _tmp175_, FALSE);
#line 227 "../src/MainWindow.vala"
		_tmp176_ = self->priv->record_mic_switch;
#line 227 "../src/MainWindow.vala"
		gtk_widget_set_sensitive ((GtkWidget*) _tmp176_, FALSE);
#line 2098 "MainWindow.c"
	}
#line 230 "../src/MainWindow.vala"
	_tmp177_ = _data2_->settings;
#line 230 "../src/MainWindow.vala"
	if (g_settings_get_enum (_tmp177_, "last-capture-mode") == ((gint) SCREEN_RECORDER_MAIN_WINDOW_CAPTURE_TYPE_AREA)) {
#line 2104 "MainWindow.c"
		GtkRadioButton* _tmp178_;
#line 231 "../src/MainWindow.vala"
		self->priv->capture_mode = SCREEN_RECORDER_MAIN_WINDOW_CAPTURE_TYPE_AREA;
#line 232 "../src/MainWindow.vala"
		_tmp178_ = selection;
#line 232 "../src/MainWindow.vala"
		gtk_toggle_button_set_active ((GtkToggleButton*) _tmp178_, TRUE);
#line 2112 "MainWindow.c"
	}
#line 235 "../src/MainWindow.vala"
	_tmp179_ = _data2_->delay_spin;
#line 235 "../src/MainWindow.vala"
	g_signal_connect_data (_tmp179_, "value-changed", (GCallback) __screen_recorder_main_window___lambda20__gtk_spin_button_value_changed, block2_data_ref (_data2_), (GClosureNotify) block2_data_unref, 0);
#line 239 "../src/MainWindow.vala"
	_tmp180_ = _data2_->framerate_spin;
#line 239 "../src/MainWindow.vala"
	g_signal_connect_data (_tmp180_, "value-changed", (GCallback) __screen_recorder_main_window___lambda21__gtk_spin_button_value_changed, block2_data_ref (_data2_), (GClosureNotify) block2_data_unref, 0);
#line 243 "../src/MainWindow.vala"
	_tmp181_ = _data2_->scale_combobox;
#line 243 "../src/MainWindow.vala"
	g_signal_connect_data ((GtkComboBox*) _tmp181_, "changed", (GCallback) __screen_recorder_main_window___lambda22__gtk_combo_box_changed, block2_data_ref (_data2_), (GClosureNotify) block2_data_unref, 0);
#line 247 "../src/MainWindow.vala"
	_tmp182_ = all;
#line 247 "../src/MainWindow.vala"
	g_signal_connect_data ((GtkToggleButton*) _tmp182_, "toggled", (GCallback) __screen_recorder_main_window___lambda23__gtk_toggle_button_toggled, block2_data_ref (_data2_), (GClosureNotify) block2_data_unref, 0);
#line 252 "../src/MainWindow.vala"
	_tmp183_ = selection;
#line 252 "../src/MainWindow.vala"
	g_signal_connect_data ((GtkToggleButton*) _tmp183_, "toggled", (GCallback) __screen_recorder_main_window___lambda24__gtk_toggle_button_toggled, block2_data_ref (_data2_), (GClosureNotify) block2_data_unref, 0);
#line 257 "../src/MainWindow.vala"
	_tmp184_ = self->priv->record_btn;
#line 257 "../src/MainWindow.vala"
	g_signal_connect_object (_tmp184_, "clicked", (GCallback) __screen_recorder_main_window___lambda25__gtk_button_clicked, self, 0);
#line 267 "../src/MainWindow.vala"
	_tmp185_ = self->priv->stop_btn;
#line 267 "../src/MainWindow.vala"
	g_signal_connect_object (_tmp185_, "clicked", (GCallback) _screen_recorder_main_window_stop_recording_gtk_button_clicked, self, 0);
#line 268 "../src/MainWindow.vala"
	g_signal_connect_object ((GtkWidget*) self, "delete-event", (GCallback) __screen_recorder_main_window___lambda26__gtk_widget_delete_event, self, 0);
#line 275 "../src/MainWindow.vala"
	_tmp186_ = keybinding_manager_new ();
#line 275 "../src/MainWindow.vala"
	manager = _tmp186_;
#line 276 "../src/MainWindow.vala"
	_tmp187_ = manager;
#line 276 "../src/MainWindow.vala"
	keybinding_manager_bind (_tmp187_, "<Ctrl><Shift>R", __screen_recorder_main_window___lambda27__keybinding_manager_keybinding_handler_func, self);
#line 57 "../src/MainWindow.vala"
	_g_object_unref0 (manager);
#line 57 "../src/MainWindow.vala"
	_g_object_unref0 (vbox);
#line 57 "../src/MainWindow.vala"
	_g_object_unref0 (titlebar_style_context);
#line 57 "../src/MainWindow.vala"
	_g_object_unref0 (titlebar);
#line 57 "../src/MainWindow.vala"
	_g_object_unref0 (format_label);
#line 57 "../src/MainWindow.vala"
	_g_object_unref0 (scale_label);
#line 57 "../src/MainWindow.vala"
	_g_object_unref0 (framerate_label);
#line 57 "../src/MainWindow.vala"
	_g_object_unref0 (delay_label);
#line 57 "../src/MainWindow.vala"
	_g_object_unref0 (borders_label);
#line 57 "../src/MainWindow.vala"
	_g_object_unref0 (record_mic_label);
#line 57 "../src/MainWindow.vala"
	_g_object_unref0 (record_cmp_label);
#line 57 "../src/MainWindow.vala"
	_g_object_unref0 (pointer_label);
#line 57 "../src/MainWindow.vala"
	_g_object_unref0 (radio_grid);
#line 57 "../src/MainWindow.vala"
	_g_object_unref0 (selection);
#line 57 "../src/MainWindow.vala"
	_g_object_unref0 (all);
#line 57 "../src/MainWindow.vala"
	block2_data_unref (_data2_);
#line 57 "../src/MainWindow.vala"
	_data2_ = NULL;
#line 57 "../src/MainWindow.vala"
	return obj;
#line 2188 "MainWindow.c"
}

static void
screen_recorder_main_window_class_init (ScreenRecorderMainWindowClass * klass,
                                        gpointer klass_data)
{
#line 23 "../src/MainWindow.vala"
	screen_recorder_main_window_parent_class = g_type_class_peek_parent (klass);
#line 23 "../src/MainWindow.vala"
	g_type_class_adjust_private_offset (klass, &ScreenRecorderMainWindow_private_offset);
#line 23 "../src/MainWindow.vala"
	G_OBJECT_CLASS (klass)->constructor = screen_recorder_main_window_constructor;
#line 23 "../src/MainWindow.vala"
	G_OBJECT_CLASS (klass)->finalize = screen_recorder_main_window_finalize;
#line 2203 "MainWindow.c"
}

static void
screen_recorder_main_window_instance_init (ScreenRecorderMainWindow * self,
                                           gpointer klass)
{
#line 23 "../src/MainWindow.vala"
	self->priv = screen_recorder_main_window_get_instance_private (self);
#line 29 "../src/MainWindow.vala"
	self->priv->capture_mode = SCREEN_RECORDER_MAIN_WINDOW_CAPTURE_TYPE_SCREEN;
#line 40 "../src/MainWindow.vala"
	self->priv->recording = FALSE;
#line 41 "../src/MainWindow.vala"
	self->priv->save_dialog_present = FALSE;
#line 46 "../src/MainWindow.vala"
	self->priv->last_recording_width = 0;
#line 47 "../src/MainWindow.vala"
	self->priv->last_recording_height = 0;
#line 2222 "MainWindow.c"
}

static void
screen_recorder_main_window_finalize (GObject * obj)
{
	ScreenRecorderMainWindow * self;
#line 23 "../src/MainWindow.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, SCREEN_RECORDER_TYPE_MAIN_WINDOW, ScreenRecorderMainWindow);
#line 28 "../src/MainWindow.vala"
	_g_object_unref0 (self->priv->ffmpegwrapper);
#line 30 "../src/MainWindow.vala"
	_g_object_unref0 (self->priv->grid);
#line 31 "../src/MainWindow.vala"
	_g_object_unref0 (self->priv->actions);
#line 32 "../src/MainWindow.vala"
	_g_object_unref0 (self->priv->record_btn);
#line 33 "../src/MainWindow.vala"
	_g_object_unref0 (self->priv->stop_btn);
#line 34 "../src/MainWindow.vala"
	_g_object_unref0 (self->priv->record_cmp_switch);
#line 35 "../src/MainWindow.vala"
	_g_object_unref0 (self->priv->record_mic_switch);
#line 36 "../src/MainWindow.vala"
	_g_object_unref0 (self->priv->pointer_switch);
#line 37 "../src/MainWindow.vala"
	_g_object_unref0 (self->priv->borders_switch);
#line 38 "../src/MainWindow.vala"
	_g_object_unref0 (self->priv->format_cmb);
#line 45 "../src/MainWindow.vala"
	_g_free0 (self->priv->tmpfilepath);
#line 23 "../src/MainWindow.vala"
	G_OBJECT_CLASS (screen_recorder_main_window_parent_class)->finalize (obj);
#line 2255 "MainWindow.c"
}

static GType
screen_recorder_main_window_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (ScreenRecorderMainWindowClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) screen_recorder_main_window_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ScreenRecorderMainWindow), 0, (GInstanceInitFunc) screen_recorder_main_window_instance_init, NULL };
	GType screen_recorder_main_window_type_id;
	screen_recorder_main_window_type_id = g_type_register_static (gtk_application_window_get_type (), "ScreenRecorderMainWindow", &g_define_type_info, 0);
	ScreenRecorderMainWindow_private_offset = g_type_add_instance_private (screen_recorder_main_window_type_id, sizeof (ScreenRecorderMainWindowPrivate));
	return screen_recorder_main_window_type_id;
}

GType
screen_recorder_main_window_get_type (void)
{
	static volatile gsize screen_recorder_main_window_type_id__volatile = 0;
	if (g_once_init_enter (&screen_recorder_main_window_type_id__volatile)) {
		GType screen_recorder_main_window_type_id;
		screen_recorder_main_window_type_id = screen_recorder_main_window_get_type_once ();
		g_once_init_leave (&screen_recorder_main_window_type_id__volatile, screen_recorder_main_window_type_id);
	}
	return screen_recorder_main_window_type_id__volatile;
}

static void
_vala_array_destroy (gpointer array,
                     gssize array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gssize i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gssize array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

