/* SaveDialog.c generated by valac 0.54.3, the Vala compiler
 * generated from SaveDialog.vala, do not modify */

/*
 * Copyright (c) 2014–2016 Fabio Zaramella <ffabio.96.x@gmail.com>
 *               2017–2018 elementary LLC. (https://elementary.io)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License version 3 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with this program; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301 USA
 *
 * Authored by: Mohammed ALMadhoun <mohelm97@gmail.com>
 *              Artem Anufrij <artem.anufrij@live.de>
 *              Fabio Zaramella <ffabio.96.x@gmail.com>
 */

#include <gtk/gtk.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <glib/gi18n-lib.h>
#include <gio/gio.h>
#include <glib/gstdio.h>
#include <float.h>
#include <math.h>
#include <gdk/gdk.h>
#include <cairo-gobject.h>

#if !defined(VALA_EXTERN)
#if defined(_MSC_VER)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define SCREEN_RECORDER_TYPE_SAVE_DIALOG (screen_recorder_save_dialog_get_type ())
#define SCREEN_RECORDER_SAVE_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SCREEN_RECORDER_TYPE_SAVE_DIALOG, ScreenRecorderSaveDialog))
#define SCREEN_RECORDER_SAVE_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SCREEN_RECORDER_TYPE_SAVE_DIALOG, ScreenRecorderSaveDialogClass))
#define SCREEN_RECORDER_IS_SAVE_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SCREEN_RECORDER_TYPE_SAVE_DIALOG))
#define SCREEN_RECORDER_IS_SAVE_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SCREEN_RECORDER_TYPE_SAVE_DIALOG))
#define SCREEN_RECORDER_SAVE_DIALOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SCREEN_RECORDER_TYPE_SAVE_DIALOG, ScreenRecorderSaveDialogClass))

typedef struct _ScreenRecorderSaveDialog ScreenRecorderSaveDialog;
typedef struct _ScreenRecorderSaveDialogClass ScreenRecorderSaveDialogClass;
typedef struct _ScreenRecorderSaveDialogPrivate ScreenRecorderSaveDialogPrivate;

#define SCREEN_RECORDER_TYPE_VIDEO_PLAYER (screen_recorder_video_player_get_type ())
#define SCREEN_RECORDER_VIDEO_PLAYER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SCREEN_RECORDER_TYPE_VIDEO_PLAYER, ScreenRecorderVideoPlayer))
#define SCREEN_RECORDER_VIDEO_PLAYER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SCREEN_RECORDER_TYPE_VIDEO_PLAYER, ScreenRecorderVideoPlayerClass))
#define SCREEN_RECORDER_IS_VIDEO_PLAYER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SCREEN_RECORDER_TYPE_VIDEO_PLAYER))
#define SCREEN_RECORDER_IS_VIDEO_PLAYER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SCREEN_RECORDER_TYPE_VIDEO_PLAYER))
#define SCREEN_RECORDER_VIDEO_PLAYER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SCREEN_RECORDER_TYPE_VIDEO_PLAYER, ScreenRecorderVideoPlayerClass))

typedef struct _ScreenRecorderVideoPlayer ScreenRecorderVideoPlayer;
typedef struct _ScreenRecorderVideoPlayerClass ScreenRecorderVideoPlayerClass;

#define SCREEN_RECORDER_TYPE_FORMAT_COMBO_BOX (screen_recorder_format_combo_box_get_type ())
#define SCREEN_RECORDER_FORMAT_COMBO_BOX(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SCREEN_RECORDER_TYPE_FORMAT_COMBO_BOX, ScreenRecorderFormatComboBox))
#define SCREEN_RECORDER_FORMAT_COMBO_BOX_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SCREEN_RECORDER_TYPE_FORMAT_COMBO_BOX, ScreenRecorderFormatComboBoxClass))
#define SCREEN_RECORDER_IS_FORMAT_COMBO_BOX(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SCREEN_RECORDER_TYPE_FORMAT_COMBO_BOX))
#define SCREEN_RECORDER_IS_FORMAT_COMBO_BOX_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SCREEN_RECORDER_TYPE_FORMAT_COMBO_BOX))
#define SCREEN_RECORDER_FORMAT_COMBO_BOX_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SCREEN_RECORDER_TYPE_FORMAT_COMBO_BOX, ScreenRecorderFormatComboBoxClass))

typedef struct _ScreenRecorderFormatComboBox ScreenRecorderFormatComboBox;
typedef struct _ScreenRecorderFormatComboBoxClass ScreenRecorderFormatComboBoxClass;
enum  {
	SCREEN_RECORDER_SAVE_DIALOG_0_PROPERTY,
	SCREEN_RECORDER_SAVE_DIALOG_FILEPATH_PROPERTY,
	SCREEN_RECORDER_SAVE_DIALOG_EXPECTED_WIDTH_PROPERTY,
	SCREEN_RECORDER_SAVE_DIALOG_EXPECTED_HEIGHT_PROPERTY,
	SCREEN_RECORDER_SAVE_DIALOG_NUM_PROPERTIES
};
static GParamSpec* screen_recorder_save_dialog_properties[SCREEN_RECORDER_SAVE_DIALOG_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
#define _g_date_time_unref0(var) ((var == NULL) ? NULL : (var = (g_date_time_unref (var), NULL)))
typedef struct _Block3Data Block3Data;

struct _ScreenRecorderSaveDialog {
	GtkDialog parent_instance;
	ScreenRecorderSaveDialogPrivate * priv;
};

struct _ScreenRecorderSaveDialogClass {
	GtkDialogClass parent_class;
};

struct _ScreenRecorderSaveDialogPrivate {
	gchar* _filepath;
	gint _expected_width;
	gint _expected_height;
	GtkEntry* name_entry;
	GtkButton* save_btn;
	ScreenRecorderVideoPlayer* preview;
	ScreenRecorderFormatComboBox* format_cmb;
	gchar* folder_dir;
};

struct _Block3Data {
	int _ref_count_;
	ScreenRecorderSaveDialog* self;
	GSettings* settings;
	GtkFileChooserButton* location;
};

static gint ScreenRecorderSaveDialog_private_offset;
static gpointer screen_recorder_save_dialog_parent_class = NULL;
VALA_EXTERN GSettings* screen_recorder_screen_recorder_app_settings;

VALA_EXTERN GType screen_recorder_save_dialog_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ScreenRecorderSaveDialog, g_object_unref)
VALA_EXTERN GType screen_recorder_video_player_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ScreenRecorderVideoPlayer, g_object_unref)
VALA_EXTERN GType screen_recorder_format_combo_box_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ScreenRecorderFormatComboBox, g_object_unref)
#define SCREEN_RECORDER_SCREEN_RECORDER_APP_SAVE_FOLDER _ ("Screen Records")
VALA_EXTERN ScreenRecorderSaveDialog* screen_recorder_save_dialog_new (const gchar* filepath,
                                                           GtkWindow* parent,
                                                           gint expected_width,
                                                           gint expected_height);
VALA_EXTERN ScreenRecorderSaveDialog* screen_recorder_save_dialog_construct (GType object_type,
                                                                 const gchar* filepath,
                                                                 GtkWindow* parent,
                                                                 gint expected_width,
                                                                 gint expected_height);
static void screen_recorder_save_dialog_manage_response (ScreenRecorderSaveDialog* self,
                                                  gint response_id);
static void _screen_recorder_save_dialog_manage_response_gtk_dialog_response (GtkDialog* _sender,
                                                                       gint response_id,
                                                                       gpointer self);
static void screen_recorder_save_dialog_remove_temp (ScreenRecorderSaveDialog* self);
static void _screen_recorder_save_dialog_remove_temp_gtk_dialog_close (GtkDialog* _sender,
                                                                gpointer self);
VALA_EXTERN const gchar* screen_recorder_save_dialog_get_filepath (ScreenRecorderSaveDialog* self);
VALA_EXTERN void screen_recorder_ffmpeg_wrapper_render_file (const gchar* inputpath,
                                                 const gchar* outputpath,
                                                 const gchar* extension,
                                                 GAsyncReadyCallback _callback_,
                                                 gpointer _user_data_);
VALA_EXTERN gboolean screen_recorder_ffmpeg_wrapper_render_file_finish (GAsyncResult* _res_);
static void ____lambda13_ (ScreenRecorderSaveDialog* self,
                    GObject* obj,
                    GAsyncResult* res);
static void _____lambda13__gasync_ready_callback (GObject* source_object,
                                           GAsyncResult* res,
                                           gpointer self);
static gchar* screen_recorder_save_dialog_get_file_name (ScreenRecorderSaveDialog* self,
                                                  gdouble recording_scale,
                                                  gdouble screen_scale);
static gint screen_recorder_save_dialog_get_file_scale (ScreenRecorderSaveDialog* self,
                                                 gdouble recording_scale,
                                                 gdouble screen_scale);
static void screen_recorder_save_dialog_set_filepath (ScreenRecorderSaveDialog* self,
                                               const gchar* value);
VALA_EXTERN gint screen_recorder_save_dialog_get_expected_width (ScreenRecorderSaveDialog* self);
static void screen_recorder_save_dialog_set_expected_width (ScreenRecorderSaveDialog* self,
                                                     gint value);
VALA_EXTERN gint screen_recorder_save_dialog_get_expected_height (ScreenRecorderSaveDialog* self);
static void screen_recorder_save_dialog_set_expected_height (ScreenRecorderSaveDialog* self,
                                                      gint value);
static GObject * screen_recorder_save_dialog_constructor (GType type,
                                                   guint n_construct_properties,
                                                   GObjectConstructParam * construct_properties);
static Block3Data* block3_data_ref (Block3Data* _data3_);
static void block3_data_unref (void * _userdata_);
VALA_EXTERN ScreenRecorderVideoPlayer* screen_recorder_video_player_new (const gchar* filepath,
                                                             gint expected_width,
                                                             gint expected_height,
                                                             gint max_width_height);
VALA_EXTERN ScreenRecorderVideoPlayer* screen_recorder_video_player_construct (GType object_type,
                                                                   const gchar* filepath,
                                                                   gint expected_width,
                                                                   gint expected_height,
                                                                   gint max_width_height);
VALA_EXTERN ScreenRecorderFormatComboBox* screen_recorder_format_combo_box_new (void);
VALA_EXTERN ScreenRecorderFormatComboBox* screen_recorder_format_combo_box_construct (GType object_type);
VALA_EXTERN void screen_recorder_screen_recorder_app_create_dir_if_missing (const gchar* path);
static void _screen_recorder_save_dialog___lambda14_ (Block3Data* _data3_);
static void __screen_recorder_save_dialog___lambda14__gtk_file_chooser_selection_changed (GtkFileChooser* _sender,
                                                                                   gpointer self);
static gboolean _screen_recorder_save_dialog___lambda15_ (ScreenRecorderSaveDialog* self,
                                                   GdkEventKey* e);
static gboolean __screen_recorder_save_dialog___lambda15__gtk_widget_key_press_event (GtkWidget* _sender,
                                                                               GdkEventKey* event,
                                                                               gpointer self);
static void screen_recorder_save_dialog_finalize (GObject * obj);
static GType screen_recorder_save_dialog_get_type_once (void);
static void _vala_screen_recorder_save_dialog_get_property (GObject * object,
                                                     guint property_id,
                                                     GValue * value,
                                                     GParamSpec * pspec);
static void _vala_screen_recorder_save_dialog_set_property (GObject * object,
                                                     guint property_id,
                                                     const GValue * value,
                                                     GParamSpec * pspec);

static inline gpointer
screen_recorder_save_dialog_get_instance_private (ScreenRecorderSaveDialog* self)
{
	return G_STRUCT_MEMBER_P (self, ScreenRecorderSaveDialog_private_offset);
}

static void
_screen_recorder_save_dialog_manage_response_gtk_dialog_response (GtkDialog* _sender,
                                                                  gint response_id,
                                                                  gpointer self)
{
#line 53 "../src/SaveDialog.vala"
	screen_recorder_save_dialog_manage_response ((ScreenRecorderSaveDialog*) self, response_id);
#line 226 "SaveDialog.c"
}

static void
_screen_recorder_save_dialog_remove_temp_gtk_dialog_close (GtkDialog* _sender,
                                                           gpointer self)
{
#line 54 "../src/SaveDialog.vala"
	screen_recorder_save_dialog_remove_temp ((ScreenRecorderSaveDialog*) self);
#line 235 "SaveDialog.c"
}

ScreenRecorderSaveDialog*
screen_recorder_save_dialog_construct (GType object_type,
                                       const gchar* filepath,
                                       GtkWindow* parent,
                                       gint expected_width,
                                       gint expected_height)
{
	ScreenRecorderSaveDialog * self = NULL;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	GtkApplication* _tmp2_;
	GtkApplication* _tmp3_;
#line 39 "../src/SaveDialog.vala"
	g_return_val_if_fail (filepath != NULL, NULL);
#line 39 "../src/SaveDialog.vala"
	g_return_val_if_fail (parent != NULL, NULL);
#line 40 "../src/SaveDialog.vala"
	_tmp0_ = gtk_window_get_title (parent);
#line 40 "../src/SaveDialog.vala"
	_tmp1_ = _tmp0_;
#line 40 "../src/SaveDialog.vala"
	_tmp2_ = gtk_window_get_application (parent);
#line 40 "../src/SaveDialog.vala"
	_tmp3_ = _tmp2_;
#line 40 "../src/SaveDialog.vala"
	self = (ScreenRecorderSaveDialog*) g_object_new (object_type, "border-width", 6, "deletable", FALSE, "modal", TRUE, "resizable", FALSE, "title", _tmp1_, "transient-for", parent, "filepath", filepath, "expected-width", expected_width, "expected-height", expected_height, "application", _tmp3_, NULL);
#line 53 "../src/SaveDialog.vala"
	g_signal_connect_object ((GtkDialog*) self, "response", (GCallback) _screen_recorder_save_dialog_manage_response_gtk_dialog_response, self, 0);
#line 54 "../src/SaveDialog.vala"
	g_signal_connect_object ((GtkDialog*) self, "close", (GCallback) _screen_recorder_save_dialog_remove_temp_gtk_dialog_close, self, 0);
#line 39 "../src/SaveDialog.vala"
	return self;
#line 270 "SaveDialog.c"
}

ScreenRecorderSaveDialog*
screen_recorder_save_dialog_new (const gchar* filepath,
                                 GtkWindow* parent,
                                 gint expected_width,
                                 gint expected_height)
{
#line 39 "../src/SaveDialog.vala"
	return screen_recorder_save_dialog_construct (SCREEN_RECORDER_TYPE_SAVE_DIALOG, filepath, parent, expected_width, expected_height);
#line 281 "SaveDialog.c"
}

static void
____lambda13_ (ScreenRecorderSaveDialog* self,
               GObject* obj,
               GAsyncResult* res)
{
	GtkButton* _tmp0_;
	GNotification* notification = NULL;
	GNotification* _tmp1_;
	const gchar* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	GtkApplication* _tmp5_;
	GtkApplication* _tmp6_;
#line 167 "../src/SaveDialog.vala"
	g_return_if_fail (res != NULL);
#line 168 "../src/SaveDialog.vala"
	gtk_widget_set_sensitive ((GtkWidget*) self, TRUE);
#line 169 "../src/SaveDialog.vala"
	_tmp0_ = self->priv->save_btn;
#line 169 "../src/SaveDialog.vala"
	gtk_button_set_image (_tmp0_, NULL);
#line 170 "../src/SaveDialog.vala"
	g_debug ("SaveDialog.vala:170: Render done");
#line 171 "../src/SaveDialog.vala"
	_tmp1_ = g_notification_new (_ ("Rendering went awesome"));
#line 171 "../src/SaveDialog.vala"
	notification = _tmp1_;
#line 172 "../src/SaveDialog.vala"
	g_notification_set_body (notification, _ ("Click here to open the records folder"));
#line 173 "../src/SaveDialog.vala"
	_tmp2_ = self->priv->folder_dir;
#line 173 "../src/SaveDialog.vala"
	_tmp3_ = g_strdup_printf ("app.open-records-folder('%s')", _tmp2_);
#line 173 "../src/SaveDialog.vala"
	_tmp4_ = _tmp3_;
#line 173 "../src/SaveDialog.vala"
	g_notification_set_default_action (notification, _tmp4_);
#line 173 "../src/SaveDialog.vala"
	_g_free0 (_tmp4_);
#line 174 "../src/SaveDialog.vala"
	_tmp5_ = gtk_window_get_application ((GtkWindow*) self);
#line 174 "../src/SaveDialog.vala"
	_tmp6_ = _tmp5_;
#line 174 "../src/SaveDialog.vala"
	g_application_send_notification ((GApplication*) _tmp6_, NULL, notification);
#line 175 "../src/SaveDialog.vala"
	g_signal_emit_by_name ((GtkDialog*) self, "close");
#line 167 "../src/SaveDialog.vala"
	_g_object_unref0 (notification);
#line 333 "SaveDialog.c"
}

static void
_____lambda13__gasync_ready_callback (GObject* source_object,
                                      GAsyncResult* res,
                                      gpointer self)
{
#line 167 "../src/SaveDialog.vala"
	____lambda13_ ((ScreenRecorderSaveDialog*) self, source_object, res);
#line 167 "../src/SaveDialog.vala"
	g_object_unref (self);
#line 345 "SaveDialog.c"
}

static void
screen_recorder_save_dialog_manage_response (ScreenRecorderSaveDialog* self,
                                             gint response_id)
{
	GError* _inner_error0_ = NULL;
#line 148 "../src/SaveDialog.vala"
	g_return_if_fail (self != NULL);
#line 149 "../src/SaveDialog.vala"
	if (response_id == 1) {
#line 357 "SaveDialog.c"
		GFile* tmp_file = NULL;
		const gchar* _tmp0_;
		GFile* _tmp1_;
		gchar* file_name = NULL;
		const gchar* _tmp2_;
		GtkEntry* _tmp3_;
		const gchar* _tmp4_;
		ScreenRecorderFormatComboBox* _tmp5_;
		gchar* _tmp6_;
		gchar* _tmp7_;
		gchar* _tmp8_;
		gchar* _tmp9_;
		gchar* _tmp10_;
		gchar* _tmp11_;
		GFile* save_file = NULL;
		const gchar* _tmp12_;
		GFile* _tmp13_;
#line 150 "../src/SaveDialog.vala"
		g_debug ("SaveDialog.vala:150: Oi Oi you got a license for that copy");
#line 151 "../src/SaveDialog.vala"
		_tmp0_ = self->priv->_filepath;
#line 151 "../src/SaveDialog.vala"
		_tmp1_ = g_file_new_for_path (_tmp0_);
#line 151 "../src/SaveDialog.vala"
		tmp_file = _tmp1_;
#line 152 "../src/SaveDialog.vala"
		_tmp2_ = self->priv->folder_dir;
#line 152 "../src/SaveDialog.vala"
		_tmp3_ = self->priv->name_entry;
#line 152 "../src/SaveDialog.vala"
		_tmp4_ = gtk_entry_get_text (_tmp3_);
#line 152 "../src/SaveDialog.vala"
		_tmp5_ = self->priv->format_cmb;
#line 152 "../src/SaveDialog.vala"
		_tmp6_ = gtk_combo_box_text_get_active_text ((GtkComboBoxText*) _tmp5_);
#line 152 "../src/SaveDialog.vala"
		_tmp7_ = _tmp6_;
#line 152 "../src/SaveDialog.vala"
		_tmp8_ = g_strdup_printf ("%s.%s", _tmp4_, _tmp7_);
#line 152 "../src/SaveDialog.vala"
		_tmp9_ = _tmp8_;
#line 152 "../src/SaveDialog.vala"
		_tmp10_ = g_build_filename (_tmp2_, _tmp9_, NULL);
#line 152 "../src/SaveDialog.vala"
		_tmp11_ = _tmp10_;
#line 152 "../src/SaveDialog.vala"
		_g_free0 (_tmp9_);
#line 152 "../src/SaveDialog.vala"
		_g_free0 (_tmp7_);
#line 152 "../src/SaveDialog.vala"
		file_name = _tmp11_;
#line 153 "../src/SaveDialog.vala"
		_tmp12_ = file_name;
#line 153 "../src/SaveDialog.vala"
		_tmp13_ = g_file_new_for_path (_tmp12_);
#line 153 "../src/SaveDialog.vala"
		save_file = _tmp13_;
#line 415 "SaveDialog.c"
		{
			GFile* _tmp14_;
			GFile* _tmp15_;
#line 155 "../src/SaveDialog.vala"
			_tmp14_ = tmp_file;
#line 155 "../src/SaveDialog.vala"
			_tmp15_ = save_file;
#line 155 "../src/SaveDialog.vala"
			g_file_copy (_tmp14_, _tmp15_, 0, NULL, NULL, NULL, &_inner_error0_);
#line 155 "../src/SaveDialog.vala"
			if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 427 "SaveDialog.c"
				goto __catch0_g_error;
			}
		}
		goto __finally0;
		__catch0_g_error:
		{
			GError* e = NULL;
			GError* _tmp16_;
			const gchar* _tmp17_;
#line 154 "../src/SaveDialog.vala"
			e = _inner_error0_;
#line 154 "../src/SaveDialog.vala"
			_inner_error0_ = NULL;
#line 157 "../src/SaveDialog.vala"
			_tmp16_ = e;
#line 157 "../src/SaveDialog.vala"
			_tmp17_ = _tmp16_->message;
#line 157 "../src/SaveDialog.vala"
			g_print ("Error: %s\n", _tmp17_);
#line 154 "../src/SaveDialog.vala"
			_g_error_free0 (e);
#line 449 "SaveDialog.c"
		}
		__finally0:
#line 154 "../src/SaveDialog.vala"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 154 "../src/SaveDialog.vala"
			_g_object_unref0 (save_file);
#line 154 "../src/SaveDialog.vala"
			_g_free0 (file_name);
#line 154 "../src/SaveDialog.vala"
			_g_object_unref0 (tmp_file);
#line 154 "../src/SaveDialog.vala"
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 154 "../src/SaveDialog.vala"
			g_clear_error (&_inner_error0_);
#line 154 "../src/SaveDialog.vala"
			return;
#line 466 "SaveDialog.c"
		}
#line 159 "../src/SaveDialog.vala"
		g_signal_emit_by_name ((GtkDialog*) self, "close");
#line 149 "../src/SaveDialog.vala"
		_g_object_unref0 (save_file);
#line 149 "../src/SaveDialog.vala"
		_g_free0 (file_name);
#line 149 "../src/SaveDialog.vala"
		_g_object_unref0 (tmp_file);
#line 476 "SaveDialog.c"
	} else {
#line 160 "../src/SaveDialog.vala"
		if (response_id == 2) {
#line 480 "SaveDialog.c"
			GtkButton* _tmp18_;
			GtkSpinner* spinner = NULL;
			GtkSpinner* _tmp19_;
			GtkButton* _tmp20_;
			GtkSpinner* _tmp21_;
			GtkSpinner* _tmp22_;
			gchar* save_filepath = NULL;
			const gchar* _tmp23_;
			GtkEntry* _tmp24_;
			const gchar* _tmp25_;
			ScreenRecorderFormatComboBox* _tmp26_;
			gchar* _tmp27_;
			gchar* _tmp28_;
			gchar* _tmp29_;
			gchar* _tmp30_;
			gchar* _tmp31_;
			gchar* _tmp32_;
			const gchar* _tmp33_;
			const gchar* _tmp34_;
			ScreenRecorderFormatComboBox* _tmp35_;
			gchar* _tmp36_;
			gchar* _tmp37_;
#line 161 "../src/SaveDialog.vala"
			_tmp18_ = self->priv->save_btn;
#line 161 "../src/SaveDialog.vala"
			gtk_button_set_always_show_image (_tmp18_, TRUE);
#line 162 "../src/SaveDialog.vala"
			_tmp19_ = (GtkSpinner*) gtk_spinner_new ();
#line 162 "../src/SaveDialog.vala"
			g_object_ref_sink (_tmp19_);
#line 162 "../src/SaveDialog.vala"
			spinner = _tmp19_;
#line 163 "../src/SaveDialog.vala"
			_tmp20_ = self->priv->save_btn;
#line 163 "../src/SaveDialog.vala"
			_tmp21_ = spinner;
#line 163 "../src/SaveDialog.vala"
			gtk_button_set_image (_tmp20_, (GtkWidget*) _tmp21_);
#line 164 "../src/SaveDialog.vala"
			_tmp22_ = spinner;
#line 164 "../src/SaveDialog.vala"
			gtk_spinner_start (_tmp22_);
#line 165 "../src/SaveDialog.vala"
			gtk_widget_set_sensitive ((GtkWidget*) self, FALSE);
#line 166 "../src/SaveDialog.vala"
			_tmp23_ = self->priv->folder_dir;
#line 166 "../src/SaveDialog.vala"
			_tmp24_ = self->priv->name_entry;
#line 166 "../src/SaveDialog.vala"
			_tmp25_ = gtk_entry_get_text (_tmp24_);
#line 166 "../src/SaveDialog.vala"
			_tmp26_ = self->priv->format_cmb;
#line 166 "../src/SaveDialog.vala"
			_tmp27_ = gtk_combo_box_text_get_active_text ((GtkComboBoxText*) _tmp26_);
#line 166 "../src/SaveDialog.vala"
			_tmp28_ = _tmp27_;
#line 166 "../src/SaveDialog.vala"
			_tmp29_ = g_strdup_printf ("%s.%s", _tmp25_, _tmp28_);
#line 166 "../src/SaveDialog.vala"
			_tmp30_ = _tmp29_;
#line 166 "../src/SaveDialog.vala"
			_tmp31_ = g_build_filename (_tmp23_, _tmp30_, NULL);
#line 166 "../src/SaveDialog.vala"
			_tmp32_ = _tmp31_;
#line 166 "../src/SaveDialog.vala"
			_g_free0 (_tmp30_);
#line 166 "../src/SaveDialog.vala"
			_g_free0 (_tmp28_);
#line 166 "../src/SaveDialog.vala"
			save_filepath = _tmp32_;
#line 167 "../src/SaveDialog.vala"
			_tmp33_ = self->priv->_filepath;
#line 167 "../src/SaveDialog.vala"
			_tmp34_ = save_filepath;
#line 167 "../src/SaveDialog.vala"
			_tmp35_ = self->priv->format_cmb;
#line 167 "../src/SaveDialog.vala"
			_tmp36_ = gtk_combo_box_text_get_active_text ((GtkComboBoxText*) _tmp35_);
#line 167 "../src/SaveDialog.vala"
			_tmp37_ = _tmp36_;
#line 167 "../src/SaveDialog.vala"
			screen_recorder_ffmpeg_wrapper_render_file (_tmp33_, _tmp34_, _tmp37_, _____lambda13__gasync_ready_callback, g_object_ref (self));
#line 167 "../src/SaveDialog.vala"
			_g_free0 (_tmp37_);
#line 160 "../src/SaveDialog.vala"
			_g_free0 (save_filepath);
#line 160 "../src/SaveDialog.vala"
			_g_object_unref0 (spinner);
#line 569 "SaveDialog.c"
		} else {
#line 178 "../src/SaveDialog.vala"
			g_signal_emit_by_name ((GtkDialog*) self, "close");
#line 573 "SaveDialog.c"
		}
	}
}

static void
screen_recorder_save_dialog_remove_temp (ScreenRecorderSaveDialog* self)
{
	const gchar* _tmp0_;
#line 182 "../src/SaveDialog.vala"
	g_return_if_fail (self != NULL);
#line 183 "../src/SaveDialog.vala"
	_tmp0_ = self->priv->_filepath;
#line 183 "../src/SaveDialog.vala"
	g_remove (_tmp0_);
#line 588 "SaveDialog.c"
}

/**
         * Generate file name
         * When appropriate include a scale hint that websites can use to 
         * scale down recordings on higher dpi screens. 
         */
static gchar*
screen_recorder_save_dialog_get_file_name (ScreenRecorderSaveDialog* self,
                                           gdouble recording_scale,
                                           gdouble screen_scale)
{
	gchar* date_time = NULL;
	GDateTime* _tmp0_;
	GDateTime* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	gchar* file_name = NULL;
	const gchar* _tmp4_;
	gchar* _tmp5_;
	gint file_scale = 0;
	gchar* result = NULL;
#line 191 "../src/SaveDialog.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 192 "../src/SaveDialog.vala"
	_tmp0_ = g_date_time_new_now_local ();
#line 192 "../src/SaveDialog.vala"
	_tmp1_ = _tmp0_;
#line 192 "../src/SaveDialog.vala"
	_tmp2_ = g_date_time_format (_tmp1_, "%Y-%m-%d %H.%M.%S");
#line 192 "../src/SaveDialog.vala"
	_tmp3_ = _tmp2_;
#line 192 "../src/SaveDialog.vala"
	_g_date_time_unref0 (_tmp1_);
#line 192 "../src/SaveDialog.vala"
	date_time = _tmp3_;
#line 195 "../src/SaveDialog.vala"
	_tmp4_ = date_time;
#line 195 "../src/SaveDialog.vala"
	_tmp5_ = g_strdup_printf (_ ("Screen record from %s"), _tmp4_);
#line 195 "../src/SaveDialog.vala"
	file_name = _tmp5_;
#line 196 "../src/SaveDialog.vala"
	file_scale = screen_recorder_save_dialog_get_file_scale (self, recording_scale, screen_scale);
#line 197 "../src/SaveDialog.vala"
	if (file_scale > 1) {
#line 635 "SaveDialog.c"
		const gchar* _tmp6_;
		gchar* _tmp7_;
		gchar* _tmp8_;
		gchar* _tmp9_;
#line 198 "../src/SaveDialog.vala"
		_tmp6_ = file_name;
#line 198 "../src/SaveDialog.vala"
		_tmp7_ = g_strdup_printf ("@%ix", file_scale);
#line 198 "../src/SaveDialog.vala"
		_tmp8_ = _tmp7_;
#line 198 "../src/SaveDialog.vala"
		_tmp9_ = g_strconcat (_tmp6_, _tmp8_, NULL);
#line 198 "../src/SaveDialog.vala"
		_g_free0 (file_name);
#line 198 "../src/SaveDialog.vala"
		file_name = _tmp9_;
#line 198 "../src/SaveDialog.vala"
		_g_free0 (_tmp8_);
#line 654 "SaveDialog.c"
	}
#line 200 "../src/SaveDialog.vala"
	result = file_name;
#line 200 "../src/SaveDialog.vala"
	_g_free0 (date_time);
#line 200 "../src/SaveDialog.vala"
	return result;
#line 662 "SaveDialog.c"
}

static gint
screen_recorder_save_dialog_get_file_scale (ScreenRecorderSaveDialog* self,
                                            gdouble recording_scale,
                                            gdouble screen_scale)
{
	gdouble file_scale = 0.0;
	gdouble _tmp0_ = 0.0;
	gdouble _tmp1_ = 0.0;
	gint result = 0;
#line 203 "../src/SaveDialog.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 204 "../src/SaveDialog.vala"
	file_scale = screen_scale * recording_scale;
#line 206 "../src/SaveDialog.vala"
	if (file_scale > screen_scale) {
#line 206 "../src/SaveDialog.vala"
		_tmp0_ = screen_scale;
#line 682 "SaveDialog.c"
	} else {
#line 206 "../src/SaveDialog.vala"
		_tmp0_ = file_scale;
#line 686 "SaveDialog.c"
	}
#line 206 "../src/SaveDialog.vala"
	file_scale = _tmp0_;
#line 207 "../src/SaveDialog.vala"
	if (file_scale < ((gdouble) 1)) {
#line 207 "../src/SaveDialog.vala"
		_tmp1_ = (gdouble) 1;
#line 694 "SaveDialog.c"
	} else {
#line 207 "../src/SaveDialog.vala"
		_tmp1_ = file_scale;
#line 698 "SaveDialog.c"
	}
#line 207 "../src/SaveDialog.vala"
	file_scale = _tmp1_;
#line 208 "../src/SaveDialog.vala"
	result = (gint) file_scale;
#line 208 "../src/SaveDialog.vala"
	return result;
#line 706 "SaveDialog.c"
}

const gchar*
screen_recorder_save_dialog_get_filepath (ScreenRecorderSaveDialog* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 28 "../src/SaveDialog.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 28 "../src/SaveDialog.vala"
	_tmp0_ = self->priv->_filepath;
#line 28 "../src/SaveDialog.vala"
	result = _tmp0_;
#line 28 "../src/SaveDialog.vala"
	return result;
#line 722 "SaveDialog.c"
}

static void
screen_recorder_save_dialog_set_filepath (ScreenRecorderSaveDialog* self,
                                          const gchar* value)
{
	gchar* old_value;
#line 28 "../src/SaveDialog.vala"
	g_return_if_fail (self != NULL);
#line 28 "../src/SaveDialog.vala"
	old_value = screen_recorder_save_dialog_get_filepath (self);
#line 28 "../src/SaveDialog.vala"
	if (g_strcmp0 (value, old_value) != 0) {
#line 736 "SaveDialog.c"
		gchar* _tmp0_;
#line 28 "../src/SaveDialog.vala"
		_tmp0_ = g_strdup (value);
#line 28 "../src/SaveDialog.vala"
		_g_free0 (self->priv->_filepath);
#line 28 "../src/SaveDialog.vala"
		self->priv->_filepath = _tmp0_;
#line 28 "../src/SaveDialog.vala"
		g_object_notify_by_pspec ((GObject *) self, screen_recorder_save_dialog_properties[SCREEN_RECORDER_SAVE_DIALOG_FILEPATH_PROPERTY]);
#line 746 "SaveDialog.c"
	}
}

gint
screen_recorder_save_dialog_get_expected_width (ScreenRecorderSaveDialog* self)
{
	gint result;
#line 29 "../src/SaveDialog.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 29 "../src/SaveDialog.vala"
	result = self->priv->_expected_width;
#line 29 "../src/SaveDialog.vala"
	return result;
#line 760 "SaveDialog.c"
}

static void
screen_recorder_save_dialog_set_expected_width (ScreenRecorderSaveDialog* self,
                                                gint value)
{
	gint old_value;
#line 29 "../src/SaveDialog.vala"
	g_return_if_fail (self != NULL);
#line 29 "../src/SaveDialog.vala"
	old_value = screen_recorder_save_dialog_get_expected_width (self);
#line 29 "../src/SaveDialog.vala"
	if (old_value != value) {
#line 29 "../src/SaveDialog.vala"
		self->priv->_expected_width = value;
#line 29 "../src/SaveDialog.vala"
		g_object_notify_by_pspec ((GObject *) self, screen_recorder_save_dialog_properties[SCREEN_RECORDER_SAVE_DIALOG_EXPECTED_WIDTH_PROPERTY]);
#line 778 "SaveDialog.c"
	}
}

gint
screen_recorder_save_dialog_get_expected_height (ScreenRecorderSaveDialog* self)
{
	gint result;
#line 30 "../src/SaveDialog.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 30 "../src/SaveDialog.vala"
	result = self->priv->_expected_height;
#line 30 "../src/SaveDialog.vala"
	return result;
#line 792 "SaveDialog.c"
}

static void
screen_recorder_save_dialog_set_expected_height (ScreenRecorderSaveDialog* self,
                                                 gint value)
{
	gint old_value;
#line 30 "../src/SaveDialog.vala"
	g_return_if_fail (self != NULL);
#line 30 "../src/SaveDialog.vala"
	old_value = screen_recorder_save_dialog_get_expected_height (self);
#line 30 "../src/SaveDialog.vala"
	if (old_value != value) {
#line 30 "../src/SaveDialog.vala"
		self->priv->_expected_height = value;
#line 30 "../src/SaveDialog.vala"
		g_object_notify_by_pspec ((GObject *) self, screen_recorder_save_dialog_properties[SCREEN_RECORDER_SAVE_DIALOG_EXPECTED_HEIGHT_PROPERTY]);
#line 810 "SaveDialog.c"
	}
}

static Block3Data*
block3_data_ref (Block3Data* _data3_)
{
#line 57 "../src/SaveDialog.vala"
	g_atomic_int_inc (&_data3_->_ref_count_);
#line 57 "../src/SaveDialog.vala"
	return _data3_;
#line 821 "SaveDialog.c"
}

static void
block3_data_unref (void * _userdata_)
{
	Block3Data* _data3_;
	_data3_ = (Block3Data*) _userdata_;
#line 57 "../src/SaveDialog.vala"
	if (g_atomic_int_dec_and_test (&_data3_->_ref_count_)) {
#line 831 "SaveDialog.c"
		ScreenRecorderSaveDialog* self;
#line 57 "../src/SaveDialog.vala"
		self = _data3_->self;
#line 57 "../src/SaveDialog.vala"
		_g_object_unref0 (_data3_->location);
#line 57 "../src/SaveDialog.vala"
		_g_object_unref0 (_data3_->settings);
#line 57 "../src/SaveDialog.vala"
		_g_object_unref0 (self);
#line 57 "../src/SaveDialog.vala"
		g_slice_free (Block3Data, _data3_);
#line 843 "SaveDialog.c"
	}
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 58 "../src/SaveDialog.vala"
	return self ? g_object_ref (self) : NULL;
#line 852 "SaveDialog.c"
}

static void
_screen_recorder_save_dialog___lambda14_ (Block3Data* _data3_)
{
	ScreenRecorderSaveDialog* self;
	GSettings* _tmp0_;
	GtkFileChooserButton* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	GSettings* _tmp4_;
	gchar* _tmp5_;
#line 134 "../src/SaveDialog.vala"
	self = _data3_->self;
#line 135 "../src/SaveDialog.vala"
	_tmp0_ = _data3_->settings;
#line 135 "../src/SaveDialog.vala"
	_tmp1_ = _data3_->location;
#line 135 "../src/SaveDialog.vala"
	_tmp2_ = gtk_file_chooser_get_filename ((GtkFileChooser*) _tmp1_);
#line 135 "../src/SaveDialog.vala"
	_tmp3_ = _tmp2_;
#line 135 "../src/SaveDialog.vala"
	g_settings_set_string (_tmp0_, "folder-dir", _tmp3_);
#line 135 "../src/SaveDialog.vala"
	_g_free0 (_tmp3_);
#line 136 "../src/SaveDialog.vala"
	_tmp4_ = _data3_->settings;
#line 136 "../src/SaveDialog.vala"
	_tmp5_ = g_settings_get_string (_tmp4_, "folder-dir");
#line 136 "../src/SaveDialog.vala"
	_g_free0 (self->priv->folder_dir);
#line 136 "../src/SaveDialog.vala"
	self->priv->folder_dir = _tmp5_;
#line 887 "SaveDialog.c"
}

static void
__screen_recorder_save_dialog___lambda14__gtk_file_chooser_selection_changed (GtkFileChooser* _sender,
                                                                              gpointer self)
{
#line 134 "../src/SaveDialog.vala"
	_screen_recorder_save_dialog___lambda14_ (self);
#line 896 "SaveDialog.c"
}

static gboolean
_screen_recorder_save_dialog___lambda15_ (ScreenRecorderSaveDialog* self,
                                          GdkEventKey* e)
{
	gboolean result = FALSE;
#line 139 "../src/SaveDialog.vala"
	g_return_val_if_fail (e != NULL, FALSE);
#line 140 "../src/SaveDialog.vala"
	if (e->keyval == GDK_KEY_Return) {
#line 141 "../src/SaveDialog.vala"
		screen_recorder_save_dialog_manage_response (self, 2);
#line 910 "SaveDialog.c"
	}
#line 144 "../src/SaveDialog.vala"
	result = FALSE;
#line 144 "../src/SaveDialog.vala"
	return result;
#line 916 "SaveDialog.c"
}

static gboolean
__screen_recorder_save_dialog___lambda15__gtk_widget_key_press_event (GtkWidget* _sender,
                                                                      GdkEventKey* event,
                                                                      gpointer self)
{
	gboolean result;
	result = _screen_recorder_save_dialog___lambda15_ ((ScreenRecorderSaveDialog*) self, event);
#line 139 "../src/SaveDialog.vala"
	return result;
#line 928 "SaveDialog.c"
}

static GObject *
screen_recorder_save_dialog_constructor (GType type,
                                         guint n_construct_properties,
                                         GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	ScreenRecorderSaveDialog * self;
	Block3Data* _data3_;
	GSettings* _tmp0_;
	GSettings* _tmp1_;
	GdkRectangle selection_rect = {0};
	GdkWindow* _tmp2_;
	GdkRectangle _tmp3_ = {0};
	gint max_width_height = 0;
	GdkRectangle _tmp4_;
	const gchar* _tmp5_;
	gint _tmp6_;
	gint _tmp7_;
	ScreenRecorderVideoPlayer* _tmp8_;
	GtkGrid* preview_box = NULL;
	GtkGrid* _tmp9_;
	GtkGrid* _tmp10_;
	GtkGrid* _tmp11_;
	ScreenRecorderVideoPlayer* _tmp12_;
	GtkStyleContext* preview_box_context = NULL;
	GtkGrid* _tmp13_;
	GtkStyleContext* _tmp14_;
	GtkStyleContext* _tmp15_;
	GtkStyleContext* _tmp16_;
	GtkLabel* dialog_label = NULL;
	GtkLabel* _tmp17_;
	GtkLabel* _tmp18_;
	GtkStyleContext* _tmp19_;
	GtkLabel* _tmp20_;
	GtkLabel* name_label = NULL;
	GtkLabel* _tmp21_;
	GtkLabel* _tmp22_;
	gdouble recording_scale = 0.0;
	GSettings* _tmp23_;
	gint screen_scale = 0;
	gint _tmp24_;
	gint _tmp25_;
	gchar* file_name = NULL;
	gchar* _tmp26_;
	GtkEntry* _tmp27_;
	GtkEntry* _tmp28_;
	GtkEntry* _tmp29_;
	const gchar* _tmp30_;
	GtkLabel* format_label = NULL;
	GtkLabel* _tmp31_;
	GtkLabel* _tmp32_;
	ScreenRecorderFormatComboBox* _tmp33_;
	GtkLabel* location_label = NULL;
	GtkLabel* _tmp34_;
	GtkLabel* _tmp35_;
	gchar* folder_from_settings = NULL;
	GSettings* _tmp36_;
	gchar* _tmp37_;
	gboolean _tmp38_ = FALSE;
	const gchar* _tmp39_;
	const gchar* _tmp40_;
	const gchar* _tmp44_;
	GtkFileChooserButton* _tmp45_;
	GtkFileChooserButton* _tmp46_;
	const gchar* _tmp47_;
	GtkGrid* grid = NULL;
	GtkGrid* _tmp48_;
	GtkGrid* _tmp49_;
	GtkGrid* _tmp50_;
	GtkGrid* _tmp51_;
	GtkGrid* _tmp52_;
	GtkGrid* _tmp53_;
	GtkGrid* _tmp54_;
	GtkGrid* _tmp55_;
	GtkGrid* _tmp56_;
	GtkLabel* _tmp57_;
	GtkGrid* _tmp58_;
	GtkLabel* _tmp59_;
	GtkGrid* _tmp60_;
	GtkEntry* _tmp61_;
	GtkGrid* _tmp62_;
	GtkLabel* _tmp63_;
	GtkGrid* _tmp64_;
	ScreenRecorderFormatComboBox* _tmp65_;
	GtkGrid* _tmp66_;
	GtkLabel* _tmp67_;
	GtkGrid* _tmp68_;
	GtkFileChooserButton* _tmp69_;
	GtkBox* content = NULL;
	GtkBox* _tmp70_;
	GtkBox* _tmp71_;
	GtkBox* _tmp72_;
	GtkGrid* _tmp73_;
	GtkWidget* save_original_btn = NULL;
	GtkWidget* _tmp74_;
	GtkWidget* _tmp75_;
	GtkWidget* _tmp76_;
	GtkButton* _tmp77_;
	GtkButton* _tmp78_;
	GtkStyleContext* _tmp79_;
	GSettings* _tmp80_;
	ScreenRecorderFormatComboBox* _tmp81_;
	ScreenRecorderFormatComboBox* _tmp82_;
	GtkWidget* _tmp83_;
	ScreenRecorderFormatComboBox* _tmp84_;
	gchar* _tmp85_;
	gchar* _tmp86_;
	GtkFileChooserButton* _tmp87_;
#line 57 "../src/SaveDialog.vala"
	parent_class = G_OBJECT_CLASS (screen_recorder_save_dialog_parent_class);
#line 57 "../src/SaveDialog.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 57 "../src/SaveDialog.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, SCREEN_RECORDER_TYPE_SAVE_DIALOG, ScreenRecorderSaveDialog);
#line 57 "../src/SaveDialog.vala"
	_data3_ = g_slice_new0 (Block3Data);
#line 57 "../src/SaveDialog.vala"
	_data3_->_ref_count_ = 1;
#line 57 "../src/SaveDialog.vala"
	_data3_->self = g_object_ref (self);
#line 58 "../src/SaveDialog.vala"
	_tmp0_ = screen_recorder_screen_recorder_app_settings;
#line 58 "../src/SaveDialog.vala"
	_tmp1_ = _g_object_ref0 (_tmp0_);
#line 58 "../src/SaveDialog.vala"
	_data3_->settings = _tmp1_;
#line 60 "../src/SaveDialog.vala"
	_tmp2_ = gdk_get_default_root_window ();
#line 60 "../src/SaveDialog.vala"
	gdk_window_get_frame_extents (_tmp2_, &_tmp3_);
#line 60 "../src/SaveDialog.vala"
	selection_rect = _tmp3_;
#line 61 "../src/SaveDialog.vala"
	_tmp4_ = selection_rect;
#line 61 "../src/SaveDialog.vala"
	max_width_height = (_tmp4_.height * 46) / 100;
#line 62 "../src/SaveDialog.vala"
	g_debug ("SaveDialog.vala:62: Max width/height: %d", max_width_height);
#line 63 "../src/SaveDialog.vala"
	_tmp5_ = self->priv->_filepath;
#line 63 "../src/SaveDialog.vala"
	_tmp6_ = self->priv->_expected_width;
#line 63 "../src/SaveDialog.vala"
	_tmp7_ = self->priv->_expected_height;
#line 63 "../src/SaveDialog.vala"
	_tmp8_ = screen_recorder_video_player_new (_tmp5_, _tmp6_, _tmp7_, max_width_height);
#line 63 "../src/SaveDialog.vala"
	g_object_ref_sink (_tmp8_);
#line 63 "../src/SaveDialog.vala"
	_g_object_unref0 (self->priv->preview);
#line 63 "../src/SaveDialog.vala"
	self->priv->preview = _tmp8_;
#line 65 "../src/SaveDialog.vala"
	_tmp9_ = (GtkGrid*) gtk_grid_new ();
#line 65 "../src/SaveDialog.vala"
	g_object_ref_sink (_tmp9_);
#line 65 "../src/SaveDialog.vala"
	preview_box = _tmp9_;
#line 66 "../src/SaveDialog.vala"
	_tmp10_ = preview_box;
#line 66 "../src/SaveDialog.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp10_, GTK_ALIGN_CENTER);
#line 67 "../src/SaveDialog.vala"
	_tmp11_ = preview_box;
#line 67 "../src/SaveDialog.vala"
	_tmp12_ = self->priv->preview;
#line 67 "../src/SaveDialog.vala"
	gtk_container_add ((GtkContainer*) _tmp11_, (GtkWidget*) _tmp12_);
#line 69 "../src/SaveDialog.vala"
	_tmp13_ = preview_box;
#line 69 "../src/SaveDialog.vala"
	_tmp14_ = gtk_widget_get_style_context ((GtkWidget*) _tmp13_);
#line 69 "../src/SaveDialog.vala"
	_tmp15_ = _g_object_ref0 (_tmp14_);
#line 69 "../src/SaveDialog.vala"
	preview_box_context = _tmp15_;
#line 70 "../src/SaveDialog.vala"
	_tmp16_ = preview_box_context;
#line 70 "../src/SaveDialog.vala"
	gtk_style_context_add_class (_tmp16_, "card");
#line 73 "../src/SaveDialog.vala"
	_tmp17_ = (GtkLabel*) gtk_label_new (_ ("Save record as…"));
#line 73 "../src/SaveDialog.vala"
	g_object_ref_sink (_tmp17_);
#line 73 "../src/SaveDialog.vala"
	dialog_label = _tmp17_;
#line 74 "../src/SaveDialog.vala"
	_tmp18_ = dialog_label;
#line 74 "../src/SaveDialog.vala"
	_tmp19_ = gtk_widget_get_style_context ((GtkWidget*) _tmp18_);
#line 74 "../src/SaveDialog.vala"
	gtk_style_context_add_class (_tmp19_, "h4");
#line 75 "../src/SaveDialog.vala"
	_tmp20_ = dialog_label;
#line 75 "../src/SaveDialog.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp20_, GTK_ALIGN_START);
#line 77 "../src/SaveDialog.vala"
	_tmp21_ = (GtkLabel*) gtk_label_new (_ ("Name:"));
#line 77 "../src/SaveDialog.vala"
	g_object_ref_sink (_tmp21_);
#line 77 "../src/SaveDialog.vala"
	name_label = _tmp21_;
#line 78 "../src/SaveDialog.vala"
	_tmp22_ = name_label;
#line 78 "../src/SaveDialog.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp22_, GTK_ALIGN_END);
#line 80 "../src/SaveDialog.vala"
	_tmp23_ = _data3_->settings;
#line 80 "../src/SaveDialog.vala"
	recording_scale = ((gdouble) g_settings_get_int (_tmp23_, "scale")) / 100;
#line 81 "../src/SaveDialog.vala"
	_tmp24_ = gtk_widget_get_scale_factor ((GtkWidget*) self);
#line 81 "../src/SaveDialog.vala"
	_tmp25_ = _tmp24_;
#line 81 "../src/SaveDialog.vala"
	screen_scale = _tmp25_;
#line 82 "../src/SaveDialog.vala"
	_tmp26_ = screen_recorder_save_dialog_get_file_name (self, recording_scale, (gdouble) screen_scale);
#line 82 "../src/SaveDialog.vala"
	file_name = _tmp26_;
#line 84 "../src/SaveDialog.vala"
	_tmp27_ = (GtkEntry*) gtk_entry_new ();
#line 84 "../src/SaveDialog.vala"
	g_object_ref_sink (_tmp27_);
#line 84 "../src/SaveDialog.vala"
	_g_object_unref0 (self->priv->name_entry);
#line 84 "../src/SaveDialog.vala"
	self->priv->name_entry = _tmp27_;
#line 85 "../src/SaveDialog.vala"
	_tmp28_ = self->priv->name_entry;
#line 85 "../src/SaveDialog.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp28_, TRUE);
#line 86 "../src/SaveDialog.vala"
	_tmp29_ = self->priv->name_entry;
#line 86 "../src/SaveDialog.vala"
	_tmp30_ = file_name;
#line 86 "../src/SaveDialog.vala"
	gtk_entry_set_text (_tmp29_, _tmp30_);
#line 88 "../src/SaveDialog.vala"
	_tmp31_ = (GtkLabel*) gtk_label_new (_ ("Format:"));
#line 88 "../src/SaveDialog.vala"
	g_object_ref_sink (_tmp31_);
#line 88 "../src/SaveDialog.vala"
	format_label = _tmp31_;
#line 89 "../src/SaveDialog.vala"
	_tmp32_ = format_label;
#line 89 "../src/SaveDialog.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp32_, GTK_ALIGN_END);
#line 91 "../src/SaveDialog.vala"
	_tmp33_ = screen_recorder_format_combo_box_new ();
#line 91 "../src/SaveDialog.vala"
	g_object_ref_sink (_tmp33_);
#line 91 "../src/SaveDialog.vala"
	_g_object_unref0 (self->priv->format_cmb);
#line 91 "../src/SaveDialog.vala"
	self->priv->format_cmb = _tmp33_;
#line 93 "../src/SaveDialog.vala"
	_tmp34_ = (GtkLabel*) gtk_label_new (_ ("Folder:"));
#line 93 "../src/SaveDialog.vala"
	g_object_ref_sink (_tmp34_);
#line 93 "../src/SaveDialog.vala"
	location_label = _tmp34_;
#line 94 "../src/SaveDialog.vala"
	_tmp35_ = location_label;
#line 94 "../src/SaveDialog.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp35_, GTK_ALIGN_END);
#line 96 "../src/SaveDialog.vala"
	_tmp36_ = _data3_->settings;
#line 96 "../src/SaveDialog.vala"
	_tmp37_ = g_settings_get_string (_tmp36_, "folder-dir");
#line 96 "../src/SaveDialog.vala"
	folder_from_settings = _tmp37_;
#line 98 "../src/SaveDialog.vala"
	_tmp39_ = folder_from_settings;
#line 98 "../src/SaveDialog.vala"
	_tmp40_ = self->priv->folder_dir;
#line 98 "../src/SaveDialog.vala"
	if (g_strcmp0 (_tmp39_, _tmp40_) != 0) {
#line 1210 "SaveDialog.c"
		const gchar* _tmp41_;
#line 98 "../src/SaveDialog.vala"
		_tmp41_ = folder_from_settings;
#line 98 "../src/SaveDialog.vala"
		_tmp38_ = g_strcmp0 (_tmp41_, "") != 0;
#line 1216 "SaveDialog.c"
	} else {
#line 98 "../src/SaveDialog.vala"
		_tmp38_ = FALSE;
#line 1220 "SaveDialog.c"
	}
#line 98 "../src/SaveDialog.vala"
	if (_tmp38_) {
#line 1224 "SaveDialog.c"
		const gchar* _tmp42_;
		gchar* _tmp43_;
#line 99 "../src/SaveDialog.vala"
		_tmp42_ = folder_from_settings;
#line 99 "../src/SaveDialog.vala"
		_tmp43_ = g_strdup (_tmp42_);
#line 99 "../src/SaveDialog.vala"
		_g_free0 (self->priv->folder_dir);
#line 99 "../src/SaveDialog.vala"
		self->priv->folder_dir = _tmp43_;
#line 1235 "SaveDialog.c"
	}
#line 101 "../src/SaveDialog.vala"
	_tmp44_ = self->priv->folder_dir;
#line 101 "../src/SaveDialog.vala"
	screen_recorder_screen_recorder_app_create_dir_if_missing (_tmp44_);
#line 103 "../src/SaveDialog.vala"
	_tmp45_ = (GtkFileChooserButton*) gtk_file_chooser_button_new (_ ("Select Screen Records Folder…"), GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER);
#line 103 "../src/SaveDialog.vala"
	g_object_ref_sink (_tmp45_);
#line 103 "../src/SaveDialog.vala"
	_data3_->location = _tmp45_;
#line 104 "../src/SaveDialog.vala"
	_tmp46_ = _data3_->location;
#line 104 "../src/SaveDialog.vala"
	_tmp47_ = self->priv->folder_dir;
#line 104 "../src/SaveDialog.vala"
	gtk_file_chooser_set_filename ((GtkFileChooser*) _tmp46_, _tmp47_);
#line 106 "../src/SaveDialog.vala"
	_tmp48_ = (GtkGrid*) gtk_grid_new ();
#line 106 "../src/SaveDialog.vala"
	g_object_ref_sink (_tmp48_);
#line 106 "../src/SaveDialog.vala"
	grid = _tmp48_;
#line 107 "../src/SaveDialog.vala"
	_tmp49_ = grid;
#line 107 "../src/SaveDialog.vala"
	g_object_set ((GtkWidget*) _tmp49_, "margin", 6, NULL);
#line 108 "../src/SaveDialog.vala"
	_tmp50_ = grid;
#line 108 "../src/SaveDialog.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp50_, 0);
#line 109 "../src/SaveDialog.vala"
	_tmp51_ = grid;
#line 109 "../src/SaveDialog.vala"
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp51_, 12);
#line 110 "../src/SaveDialog.vala"
	_tmp52_ = grid;
#line 110 "../src/SaveDialog.vala"
	gtk_grid_set_row_spacing (_tmp52_, 12);
#line 111 "../src/SaveDialog.vala"
	_tmp53_ = grid;
#line 111 "../src/SaveDialog.vala"
	gtk_grid_set_column_spacing (_tmp53_, 12);
#line 112 "../src/SaveDialog.vala"
	_tmp54_ = grid;
#line 112 "../src/SaveDialog.vala"
	_tmp55_ = preview_box;
#line 112 "../src/SaveDialog.vala"
	gtk_grid_attach (_tmp54_, (GtkWidget*) _tmp55_, 0, 0, 2, 1);
#line 113 "../src/SaveDialog.vala"
	_tmp56_ = grid;
#line 113 "../src/SaveDialog.vala"
	_tmp57_ = dialog_label;
#line 113 "../src/SaveDialog.vala"
	gtk_grid_attach (_tmp56_, (GtkWidget*) _tmp57_, 0, 1, 2, 1);
#line 114 "../src/SaveDialog.vala"
	_tmp58_ = grid;
#line 114 "../src/SaveDialog.vala"
	_tmp59_ = name_label;
#line 114 "../src/SaveDialog.vala"
	gtk_grid_attach (_tmp58_, (GtkWidget*) _tmp59_, 0, 2, 1, 1);
#line 115 "../src/SaveDialog.vala"
	_tmp60_ = grid;
#line 115 "../src/SaveDialog.vala"
	_tmp61_ = self->priv->name_entry;
#line 115 "../src/SaveDialog.vala"
	gtk_grid_attach (_tmp60_, (GtkWidget*) _tmp61_, 1, 2, 1, 1);
#line 116 "../src/SaveDialog.vala"
	_tmp62_ = grid;
#line 116 "../src/SaveDialog.vala"
	_tmp63_ = format_label;
#line 116 "../src/SaveDialog.vala"
	gtk_grid_attach (_tmp62_, (GtkWidget*) _tmp63_, 0, 3, 1, 1);
#line 117 "../src/SaveDialog.vala"
	_tmp64_ = grid;
#line 117 "../src/SaveDialog.vala"
	_tmp65_ = self->priv->format_cmb;
#line 117 "../src/SaveDialog.vala"
	gtk_grid_attach (_tmp64_, (GtkWidget*) _tmp65_, 1, 3, 1, 1);
#line 118 "../src/SaveDialog.vala"
	_tmp66_ = grid;
#line 118 "../src/SaveDialog.vala"
	_tmp67_ = location_label;
#line 118 "../src/SaveDialog.vala"
	gtk_grid_attach (_tmp66_, (GtkWidget*) _tmp67_, 0, 4, 1, 1);
#line 119 "../src/SaveDialog.vala"
	_tmp68_ = grid;
#line 119 "../src/SaveDialog.vala"
	_tmp69_ = _data3_->location;
#line 119 "../src/SaveDialog.vala"
	gtk_grid_attach (_tmp68_, (GtkWidget*) _tmp69_, 1, 4, 1, 1);
#line 121 "../src/SaveDialog.vala"
	_tmp70_ = gtk_dialog_get_content_area ((GtkDialog*) self);
#line 121 "../src/SaveDialog.vala"
	_tmp71_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp70_, gtk_box_get_type ()) ? ((GtkBox*) _tmp70_) : NULL);
#line 121 "../src/SaveDialog.vala"
	content = _tmp71_;
#line 122 "../src/SaveDialog.vala"
	_tmp72_ = content;
#line 122 "../src/SaveDialog.vala"
	_tmp73_ = grid;
#line 122 "../src/SaveDialog.vala"
	gtk_container_add ((GtkContainer*) _tmp72_, (GtkWidget*) _tmp73_);
#line 124 "../src/SaveDialog.vala"
	gtk_dialog_add_button ((GtkDialog*) self, _ ("Cancel"), 0);
#line 126 "../src/SaveDialog.vala"
	_tmp74_ = gtk_dialog_add_button ((GtkDialog*) self, _ ("Save Original"), 1);
#line 126 "../src/SaveDialog.vala"
	_tmp75_ = _g_object_ref0 (_tmp74_);
#line 126 "../src/SaveDialog.vala"
	save_original_btn = _tmp75_;
#line 128 "../src/SaveDialog.vala"
	_tmp76_ = gtk_dialog_add_button ((GtkDialog*) self, _ ("Save"), 2);
#line 128 "../src/SaveDialog.vala"
	_tmp77_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp76_, gtk_button_get_type ()) ? ((GtkButton*) _tmp76_) : NULL);
#line 128 "../src/SaveDialog.vala"
	_g_object_unref0 (self->priv->save_btn);
#line 128 "../src/SaveDialog.vala"
	self->priv->save_btn = _tmp77_;
#line 129 "../src/SaveDialog.vala"
	_tmp78_ = self->priv->save_btn;
#line 129 "../src/SaveDialog.vala"
	_tmp79_ = gtk_widget_get_style_context ((GtkWidget*) _tmp78_);
#line 129 "../src/SaveDialog.vala"
	gtk_style_context_add_class (_tmp79_, GTK_STYLE_CLASS_SUGGESTED_ACTION);
#line 131 "../src/SaveDialog.vala"
	_tmp80_ = _data3_->settings;
#line 131 "../src/SaveDialog.vala"
	_tmp81_ = self->priv->format_cmb;
#line 131 "../src/SaveDialog.vala"
	g_settings_bind (_tmp80_, "format", (GObject*) _tmp81_, "text_value", G_SETTINGS_BIND_DEFAULT);
#line 132 "../src/SaveDialog.vala"
	_tmp82_ = self->priv->format_cmb;
#line 132 "../src/SaveDialog.vala"
	gtk_widget_set_sensitive ((GtkWidget*) _tmp82_, FALSE);
#line 133 "../src/SaveDialog.vala"
	_tmp83_ = save_original_btn;
#line 133 "../src/SaveDialog.vala"
	_tmp84_ = self->priv->format_cmb;
#line 133 "../src/SaveDialog.vala"
	_tmp85_ = gtk_combo_box_text_get_active_text ((GtkComboBoxText*) _tmp84_);
#line 133 "../src/SaveDialog.vala"
	_tmp86_ = _tmp85_;
#line 133 "../src/SaveDialog.vala"
	gtk_widget_set_sensitive (_tmp83_, g_strcmp0 (_tmp86_, "gif") != 0);
#line 133 "../src/SaveDialog.vala"
	_g_free0 (_tmp86_);
#line 134 "../src/SaveDialog.vala"
	_tmp87_ = _data3_->location;
#line 134 "../src/SaveDialog.vala"
	g_signal_connect_data ((GtkFileChooser*) _tmp87_, "selection-changed", (GCallback) __screen_recorder_save_dialog___lambda14__gtk_file_chooser_selection_changed, block3_data_ref (_data3_), (GClosureNotify) block3_data_unref, 0);
#line 139 "../src/SaveDialog.vala"
	g_signal_connect_object ((GtkWidget*) self, "key-press-event", (GCallback) __screen_recorder_save_dialog___lambda15__gtk_widget_key_press_event, self, 0);
#line 57 "../src/SaveDialog.vala"
	_g_object_unref0 (save_original_btn);
#line 57 "../src/SaveDialog.vala"
	_g_object_unref0 (content);
#line 57 "../src/SaveDialog.vala"
	_g_object_unref0 (grid);
#line 57 "../src/SaveDialog.vala"
	_g_free0 (folder_from_settings);
#line 57 "../src/SaveDialog.vala"
	_g_object_unref0 (location_label);
#line 57 "../src/SaveDialog.vala"
	_g_object_unref0 (format_label);
#line 57 "../src/SaveDialog.vala"
	_g_free0 (file_name);
#line 57 "../src/SaveDialog.vala"
	_g_object_unref0 (name_label);
#line 57 "../src/SaveDialog.vala"
	_g_object_unref0 (dialog_label);
#line 57 "../src/SaveDialog.vala"
	_g_object_unref0 (preview_box_context);
#line 57 "../src/SaveDialog.vala"
	_g_object_unref0 (preview_box);
#line 57 "../src/SaveDialog.vala"
	block3_data_unref (_data3_);
#line 57 "../src/SaveDialog.vala"
	_data3_ = NULL;
#line 57 "../src/SaveDialog.vala"
	return obj;
#line 1417 "SaveDialog.c"
}

static void
screen_recorder_save_dialog_class_init (ScreenRecorderSaveDialogClass * klass,
                                        gpointer klass_data)
{
#line 26 "../src/SaveDialog.vala"
	screen_recorder_save_dialog_parent_class = g_type_class_peek_parent (klass);
#line 26 "../src/SaveDialog.vala"
	g_type_class_adjust_private_offset (klass, &ScreenRecorderSaveDialog_private_offset);
#line 26 "../src/SaveDialog.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_screen_recorder_save_dialog_get_property;
#line 26 "../src/SaveDialog.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_screen_recorder_save_dialog_set_property;
#line 26 "../src/SaveDialog.vala"
	G_OBJECT_CLASS (klass)->constructor = screen_recorder_save_dialog_constructor;
#line 26 "../src/SaveDialog.vala"
	G_OBJECT_CLASS (klass)->finalize = screen_recorder_save_dialog_finalize;
#line 26 "../src/SaveDialog.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), SCREEN_RECORDER_SAVE_DIALOG_FILEPATH_PROPERTY, screen_recorder_save_dialog_properties[SCREEN_RECORDER_SAVE_DIALOG_FILEPATH_PROPERTY] = g_param_spec_string ("filepath", "filepath", "filepath", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 26 "../src/SaveDialog.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), SCREEN_RECORDER_SAVE_DIALOG_EXPECTED_WIDTH_PROPERTY, screen_recorder_save_dialog_properties[SCREEN_RECORDER_SAVE_DIALOG_EXPECTED_WIDTH_PROPERTY] = g_param_spec_int ("expected-width", "expected-width", "expected-width", G_MININT, G_MAXINT, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 26 "../src/SaveDialog.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), SCREEN_RECORDER_SAVE_DIALOG_EXPECTED_HEIGHT_PROPERTY, screen_recorder_save_dialog_properties[SCREEN_RECORDER_SAVE_DIALOG_EXPECTED_HEIGHT_PROPERTY] = g_param_spec_int ("expected-height", "expected-height", "expected-height", G_MININT, G_MAXINT, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 1442 "SaveDialog.c"
}

static void
screen_recorder_save_dialog_instance_init (ScreenRecorderSaveDialog * self,
                                           gpointer klass)
{
	const gchar* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	gchar* _tmp5_;
#line 26 "../src/SaveDialog.vala"
	self->priv = screen_recorder_save_dialog_get_instance_private (self);
#line 36 "../src/SaveDialog.vala"
	_tmp0_ = g_get_user_special_dir (G_USER_DIRECTORY_VIDEOS);
#line 36 "../src/SaveDialog.vala"
	_tmp1_ = g_strdup_printf ("%c", (gint) G_DIR_SEPARATOR);
#line 36 "../src/SaveDialog.vala"
	_tmp2_ = _tmp1_;
#line 36 "../src/SaveDialog.vala"
	_tmp3_ = g_strconcat (_tmp0_, _tmp2_, NULL);
#line 36 "../src/SaveDialog.vala"
	_tmp4_ = _tmp3_;
#line 36 "../src/SaveDialog.vala"
	_tmp5_ = g_strconcat (_tmp4_, SCREEN_RECORDER_SCREEN_RECORDER_APP_SAVE_FOLDER, NULL);
#line 36 "../src/SaveDialog.vala"
	self->priv->folder_dir = _tmp5_;
#line 36 "../src/SaveDialog.vala"
	_g_free0 (_tmp4_);
#line 36 "../src/SaveDialog.vala"
	_g_free0 (_tmp2_);
#line 1475 "SaveDialog.c"
}

static void
screen_recorder_save_dialog_finalize (GObject * obj)
{
	ScreenRecorderSaveDialog * self;
#line 26 "../src/SaveDialog.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, SCREEN_RECORDER_TYPE_SAVE_DIALOG, ScreenRecorderSaveDialog);
#line 28 "../src/SaveDialog.vala"
	_g_free0 (self->priv->_filepath);
#line 32 "../src/SaveDialog.vala"
	_g_object_unref0 (self->priv->name_entry);
#line 33 "../src/SaveDialog.vala"
	_g_object_unref0 (self->priv->save_btn);
#line 34 "../src/SaveDialog.vala"
	_g_object_unref0 (self->priv->preview);
#line 35 "../src/SaveDialog.vala"
	_g_object_unref0 (self->priv->format_cmb);
#line 36 "../src/SaveDialog.vala"
	_g_free0 (self->priv->folder_dir);
#line 26 "../src/SaveDialog.vala"
	G_OBJECT_CLASS (screen_recorder_save_dialog_parent_class)->finalize (obj);
#line 1498 "SaveDialog.c"
}

static GType
screen_recorder_save_dialog_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (ScreenRecorderSaveDialogClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) screen_recorder_save_dialog_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ScreenRecorderSaveDialog), 0, (GInstanceInitFunc) screen_recorder_save_dialog_instance_init, NULL };
	GType screen_recorder_save_dialog_type_id;
	screen_recorder_save_dialog_type_id = g_type_register_static (gtk_dialog_get_type (), "ScreenRecorderSaveDialog", &g_define_type_info, 0);
	ScreenRecorderSaveDialog_private_offset = g_type_add_instance_private (screen_recorder_save_dialog_type_id, sizeof (ScreenRecorderSaveDialogPrivate));
	return screen_recorder_save_dialog_type_id;
}

GType
screen_recorder_save_dialog_get_type (void)
{
	static volatile gsize screen_recorder_save_dialog_type_id__volatile = 0;
	if (g_once_init_enter (&screen_recorder_save_dialog_type_id__volatile)) {
		GType screen_recorder_save_dialog_type_id;
		screen_recorder_save_dialog_type_id = screen_recorder_save_dialog_get_type_once ();
		g_once_init_leave (&screen_recorder_save_dialog_type_id__volatile, screen_recorder_save_dialog_type_id);
	}
	return screen_recorder_save_dialog_type_id__volatile;
}

static void
_vala_screen_recorder_save_dialog_get_property (GObject * object,
                                                guint property_id,
                                                GValue * value,
                                                GParamSpec * pspec)
{
	ScreenRecorderSaveDialog * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, SCREEN_RECORDER_TYPE_SAVE_DIALOG, ScreenRecorderSaveDialog);
#line 26 "../src/SaveDialog.vala"
	switch (property_id) {
#line 26 "../src/SaveDialog.vala"
		case SCREEN_RECORDER_SAVE_DIALOG_FILEPATH_PROPERTY:
#line 26 "../src/SaveDialog.vala"
		g_value_set_string (value, screen_recorder_save_dialog_get_filepath (self));
#line 26 "../src/SaveDialog.vala"
		break;
#line 26 "../src/SaveDialog.vala"
		case SCREEN_RECORDER_SAVE_DIALOG_EXPECTED_WIDTH_PROPERTY:
#line 26 "../src/SaveDialog.vala"
		g_value_set_int (value, screen_recorder_save_dialog_get_expected_width (self));
#line 26 "../src/SaveDialog.vala"
		break;
#line 26 "../src/SaveDialog.vala"
		case SCREEN_RECORDER_SAVE_DIALOG_EXPECTED_HEIGHT_PROPERTY:
#line 26 "../src/SaveDialog.vala"
		g_value_set_int (value, screen_recorder_save_dialog_get_expected_height (self));
#line 26 "../src/SaveDialog.vala"
		break;
#line 1551 "SaveDialog.c"
		default:
#line 26 "../src/SaveDialog.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 26 "../src/SaveDialog.vala"
		break;
#line 1557 "SaveDialog.c"
	}
}

static void
_vala_screen_recorder_save_dialog_set_property (GObject * object,
                                                guint property_id,
                                                const GValue * value,
                                                GParamSpec * pspec)
{
	ScreenRecorderSaveDialog * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, SCREEN_RECORDER_TYPE_SAVE_DIALOG, ScreenRecorderSaveDialog);
#line 26 "../src/SaveDialog.vala"
	switch (property_id) {
#line 26 "../src/SaveDialog.vala"
		case SCREEN_RECORDER_SAVE_DIALOG_FILEPATH_PROPERTY:
#line 26 "../src/SaveDialog.vala"
		screen_recorder_save_dialog_set_filepath (self, g_value_get_string (value));
#line 26 "../src/SaveDialog.vala"
		break;
#line 26 "../src/SaveDialog.vala"
		case SCREEN_RECORDER_SAVE_DIALOG_EXPECTED_WIDTH_PROPERTY:
#line 26 "../src/SaveDialog.vala"
		screen_recorder_save_dialog_set_expected_width (self, g_value_get_int (value));
#line 26 "../src/SaveDialog.vala"
		break;
#line 26 "../src/SaveDialog.vala"
		case SCREEN_RECORDER_SAVE_DIALOG_EXPECTED_HEIGHT_PROPERTY:
#line 26 "../src/SaveDialog.vala"
		screen_recorder_save_dialog_set_expected_height (self, g_value_get_int (value));
#line 26 "../src/SaveDialog.vala"
		break;
#line 1589 "SaveDialog.c"
		default:
#line 26 "../src/SaveDialog.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 26 "../src/SaveDialog.vala"
		break;
#line 1595 "SaveDialog.c"
	}
}

