/* SelectionArea.c generated by valac 0.54.3, the Vala compiler
 * generated from SelectionArea.vala, do not modify */

/*
* Copyright (c) 2014-2016 Fabio Zaramella <ffabio.96.x@gmail.com>
*               2017 elementary LLC. (https://elementary.io)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU Lesser General Public
* License version 3 as published by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*/

#include <granite.h>
#include <glib-object.h>
#include <gdk/gdk.h>
#include <glib.h>
#include <gtk/gtk.h>
#include <cairo-gobject.h>
#include <stdlib.h>
#include <float.h>
#include <math.h>

#if !defined(VALA_EXTERN)
#if defined(_MSC_VER)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define SCREENSHOT_WIDGETS_TYPE_SELECTION_AREA (screenshot_widgets_selection_area_get_type ())
#define SCREENSHOT_WIDGETS_SELECTION_AREA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SCREENSHOT_WIDGETS_TYPE_SELECTION_AREA, ScreenshotWidgetsSelectionArea))
#define SCREENSHOT_WIDGETS_SELECTION_AREA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SCREENSHOT_WIDGETS_TYPE_SELECTION_AREA, ScreenshotWidgetsSelectionAreaClass))
#define SCREENSHOT_WIDGETS_IS_SELECTION_AREA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SCREENSHOT_WIDGETS_TYPE_SELECTION_AREA))
#define SCREENSHOT_WIDGETS_IS_SELECTION_AREA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SCREENSHOT_WIDGETS_TYPE_SELECTION_AREA))
#define SCREENSHOT_WIDGETS_SELECTION_AREA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SCREENSHOT_WIDGETS_TYPE_SELECTION_AREA, ScreenshotWidgetsSelectionAreaClass))

typedef struct _ScreenshotWidgetsSelectionArea ScreenshotWidgetsSelectionArea;
typedef struct _ScreenshotWidgetsSelectionAreaClass ScreenshotWidgetsSelectionAreaClass;
typedef struct _ScreenshotWidgetsSelectionAreaPrivate ScreenshotWidgetsSelectionAreaPrivate;
enum  {
	SCREENSHOT_WIDGETS_SELECTION_AREA_0_PROPERTY,
	SCREENSHOT_WIDGETS_SELECTION_AREA_NUM_PROPERTIES
};
static GParamSpec* screenshot_widgets_selection_area_properties[SCREENSHOT_WIDGETS_SELECTION_AREA_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
enum  {
	SCREENSHOT_WIDGETS_SELECTION_AREA_CAPTURED_SIGNAL,
	SCREENSHOT_WIDGETS_SELECTION_AREA_CANCELLED_SIGNAL,
	SCREENSHOT_WIDGETS_SELECTION_AREA_NUM_SIGNALS
};
static guint screenshot_widgets_selection_area_signals[SCREENSHOT_WIDGETS_SELECTION_AREA_NUM_SIGNALS] = {0};

struct _ScreenshotWidgetsSelectionArea {
	GraniteWidgetsCompositedWindow parent_instance;
	ScreenshotWidgetsSelectionAreaPrivate * priv;
};

struct _ScreenshotWidgetsSelectionAreaClass {
	GraniteWidgetsCompositedWindowClass parent_class;
};

struct _ScreenshotWidgetsSelectionAreaPrivate {
	GdkPoint start_point;
	gboolean dragging;
};

static gint ScreenshotWidgetsSelectionArea_private_offset;
static gpointer screenshot_widgets_selection_area_parent_class = NULL;

VALA_EXTERN GType screenshot_widgets_selection_area_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ScreenshotWidgetsSelectionArea, g_object_unref)
VALA_EXTERN ScreenshotWidgetsSelectionArea* screenshot_widgets_selection_area_new (void);
VALA_EXTERN ScreenshotWidgetsSelectionArea* screenshot_widgets_selection_area_construct (GType object_type);
static gboolean screenshot_widgets_selection_area_real_button_press_event (GtkWidget* base,
                                                                    GdkEventButton* e);
static gboolean screenshot_widgets_selection_area_real_button_release_event (GtkWidget* base,
                                                                      GdkEventButton* e);
static gboolean screenshot_widgets_selection_area_real_motion_notify_event (GtkWidget* base,
                                                                     GdkEventMotion* e);
static gboolean screenshot_widgets_selection_area_real_key_press_event (GtkWidget* base,
                                                                 GdkEventKey* e);
static void screenshot_widgets_selection_area_real_show_all (GtkWidget* base);
VALA_EXTERN void screenshot_widgets_selection_area_close (ScreenshotWidgetsSelectionArea* self);
static gboolean screenshot_widgets_selection_area_real_draw (GtkWidget* base,
                                                      cairo_t* ctx);
static GObject * screenshot_widgets_selection_area_constructor (GType type,
                                                         guint n_construct_properties,
                                                         GObjectConstructParam * construct_properties);
static void screenshot_widgets_selection_area_finalize (GObject * obj);
static GType screenshot_widgets_selection_area_get_type_once (void);

static inline gpointer
screenshot_widgets_selection_area_get_instance_private (ScreenshotWidgetsSelectionArea* self)
{
	return G_STRUCT_MEMBER_P (self, ScreenshotWidgetsSelectionArea_private_offset);
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 41 "../src/Widgets/SelectionArea.vala"
	return self ? g_object_ref (self) : NULL;
#line 117 "SelectionArea.c"
}

ScreenshotWidgetsSelectionArea*
screenshot_widgets_selection_area_construct (GType object_type)
{
	ScreenshotWidgetsSelectionArea * self = NULL;
	GdkScreen* screen = NULL;
	GdkScreen* _tmp0_;
	GdkScreen* _tmp1_;
#line 33 "../src/Widgets/SelectionArea.vala"
	self = (ScreenshotWidgetsSelectionArea*) granite_widgets_composited_window_construct (object_type);
#line 34 "../src/Widgets/SelectionArea.vala"
	gtk_window_stick ((GtkWindow*) self);
#line 35 "../src/Widgets/SelectionArea.vala"
	gtk_window_set_resizable ((GtkWindow*) self, TRUE);
#line 36 "../src/Widgets/SelectionArea.vala"
	gtk_window_set_deletable ((GtkWindow*) self, FALSE);
#line 37 "../src/Widgets/SelectionArea.vala"
	gtk_window_set_skip_taskbar_hint ((GtkWindow*) self, TRUE);
#line 38 "../src/Widgets/SelectionArea.vala"
	gtk_window_set_skip_pager_hint ((GtkWindow*) self, TRUE);
#line 39 "../src/Widgets/SelectionArea.vala"
	gtk_window_set_keep_above ((GtkWindow*) self, TRUE);
#line 41 "../src/Widgets/SelectionArea.vala"
	_tmp0_ = gtk_window_get_screen ((GtkWindow*) self);
#line 41 "../src/Widgets/SelectionArea.vala"
	_tmp1_ = _g_object_ref0 (_tmp0_);
#line 41 "../src/Widgets/SelectionArea.vala"
	screen = _tmp1_;
#line 42 "../src/Widgets/SelectionArea.vala"
	gtk_window_set_default_size ((GtkWindow*) self, gdk_screen_get_width (screen), gdk_screen_get_height (screen));
#line 33 "../src/Widgets/SelectionArea.vala"
	_g_object_unref0 (screen);
#line 33 "../src/Widgets/SelectionArea.vala"
	return self;
#line 153 "SelectionArea.c"
}

ScreenshotWidgetsSelectionArea*
screenshot_widgets_selection_area_new (void)
{
#line 33 "../src/Widgets/SelectionArea.vala"
	return screenshot_widgets_selection_area_construct (SCREENSHOT_WIDGETS_TYPE_SELECTION_AREA);
#line 161 "SelectionArea.c"
}

static gboolean
screenshot_widgets_selection_area_real_button_press_event (GtkWidget* base,
                                                           GdkEventButton* e)
{
	ScreenshotWidgetsSelectionArea * self;
	gboolean _tmp0_ = FALSE;
	gboolean result = FALSE;
#line 45 "../src/Widgets/SelectionArea.vala"
	self = (ScreenshotWidgetsSelectionArea*) base;
#line 45 "../src/Widgets/SelectionArea.vala"
	g_return_val_if_fail (e != NULL, FALSE);
#line 46 "../src/Widgets/SelectionArea.vala"
	if (self->priv->dragging) {
#line 46 "../src/Widgets/SelectionArea.vala"
		_tmp0_ = TRUE;
#line 179 "SelectionArea.c"
	} else {
#line 46 "../src/Widgets/SelectionArea.vala"
		_tmp0_ = e->button != ((guint) 1);
#line 183 "SelectionArea.c"
	}
#line 46 "../src/Widgets/SelectionArea.vala"
	if (_tmp0_) {
#line 47 "../src/Widgets/SelectionArea.vala"
		result = TRUE;
#line 47 "../src/Widgets/SelectionArea.vala"
		return result;
#line 191 "SelectionArea.c"
	}
#line 50 "../src/Widgets/SelectionArea.vala"
	self->priv->dragging = TRUE;
#line 52 "../src/Widgets/SelectionArea.vala"
	self->priv->start_point.x = (gint) e->x_root;
#line 53 "../src/Widgets/SelectionArea.vala"
	self->priv->start_point.y = (gint) e->y_root;
#line 55 "../src/Widgets/SelectionArea.vala"
	result = TRUE;
#line 55 "../src/Widgets/SelectionArea.vala"
	return result;
#line 203 "SelectionArea.c"
}

static gboolean
screenshot_widgets_selection_area_real_button_release_event (GtkWidget* base,
                                                             GdkEventButton* e)
{
	ScreenshotWidgetsSelectionArea * self;
	gboolean _tmp0_ = FALSE;
	gboolean result = FALSE;
#line 58 "../src/Widgets/SelectionArea.vala"
	self = (ScreenshotWidgetsSelectionArea*) base;
#line 58 "../src/Widgets/SelectionArea.vala"
	g_return_val_if_fail (e != NULL, FALSE);
#line 59 "../src/Widgets/SelectionArea.vala"
	if (!self->priv->dragging) {
#line 59 "../src/Widgets/SelectionArea.vala"
		_tmp0_ = TRUE;
#line 221 "SelectionArea.c"
	} else {
#line 59 "../src/Widgets/SelectionArea.vala"
		_tmp0_ = e->button != ((guint) 1);
#line 225 "SelectionArea.c"
	}
#line 59 "../src/Widgets/SelectionArea.vala"
	if (_tmp0_) {
#line 60 "../src/Widgets/SelectionArea.vala"
		result = TRUE;
#line 60 "../src/Widgets/SelectionArea.vala"
		return result;
#line 233 "SelectionArea.c"
	}
#line 63 "../src/Widgets/SelectionArea.vala"
	self->priv->dragging = FALSE;
#line 64 "../src/Widgets/SelectionArea.vala"
	g_signal_emit (self, screenshot_widgets_selection_area_signals[SCREENSHOT_WIDGETS_SELECTION_AREA_CAPTURED_SIGNAL], 0);
#line 66 "../src/Widgets/SelectionArea.vala"
	result = TRUE;
#line 66 "../src/Widgets/SelectionArea.vala"
	return result;
#line 243 "SelectionArea.c"
}

static gboolean
screenshot_widgets_selection_area_real_motion_notify_event (GtkWidget* base,
                                                            GdkEventMotion* e)
{
	ScreenshotWidgetsSelectionArea * self;
	gint x = 0;
	GdkPoint _tmp0_;
	gint y = 0;
	GdkPoint _tmp1_;
	gint width = 0;
	gint height = 0;
	gboolean _tmp2_ = FALSE;
	gboolean result = FALSE;
#line 69 "../src/Widgets/SelectionArea.vala"
	self = (ScreenshotWidgetsSelectionArea*) base;
#line 69 "../src/Widgets/SelectionArea.vala"
	g_return_val_if_fail (e != NULL, FALSE);
#line 70 "../src/Widgets/SelectionArea.vala"
	if (!self->priv->dragging) {
#line 71 "../src/Widgets/SelectionArea.vala"
		result = TRUE;
#line 71 "../src/Widgets/SelectionArea.vala"
		return result;
#line 269 "SelectionArea.c"
	}
#line 74 "../src/Widgets/SelectionArea.vala"
	_tmp0_ = self->priv->start_point;
#line 74 "../src/Widgets/SelectionArea.vala"
	x = _tmp0_.x;
#line 75 "../src/Widgets/SelectionArea.vala"
	_tmp1_ = self->priv->start_point;
#line 75 "../src/Widgets/SelectionArea.vala"
	y = _tmp1_.y;
#line 77 "../src/Widgets/SelectionArea.vala"
	width = abs (x - ((gint) e->x_root));
#line 78 "../src/Widgets/SelectionArea.vala"
	height = abs (y - ((gint) e->y_root));
#line 79 "../src/Widgets/SelectionArea.vala"
	if (width < 1) {
#line 79 "../src/Widgets/SelectionArea.vala"
		_tmp2_ = TRUE;
#line 287 "SelectionArea.c"
	} else {
#line 79 "../src/Widgets/SelectionArea.vala"
		_tmp2_ = height < 1;
#line 291 "SelectionArea.c"
	}
#line 79 "../src/Widgets/SelectionArea.vala"
	if (_tmp2_) {
#line 80 "../src/Widgets/SelectionArea.vala"
		result = TRUE;
#line 80 "../src/Widgets/SelectionArea.vala"
		return result;
#line 299 "SelectionArea.c"
	}
#line 83 "../src/Widgets/SelectionArea.vala"
	x = MIN (x, (gint) e->x_root);
#line 84 "../src/Widgets/SelectionArea.vala"
	y = MIN (y, (gint) e->y_root);
#line 86 "../src/Widgets/SelectionArea.vala"
	gtk_window_move ((GtkWindow*) self, x, y);
#line 87 "../src/Widgets/SelectionArea.vala"
	gtk_window_resize ((GtkWindow*) self, width, height);
#line 89 "../src/Widgets/SelectionArea.vala"
	result = TRUE;
#line 89 "../src/Widgets/SelectionArea.vala"
	return result;
#line 313 "SelectionArea.c"
}

static gboolean
screenshot_widgets_selection_area_real_key_press_event (GtkWidget* base,
                                                        GdkEventKey* e)
{
	ScreenshotWidgetsSelectionArea * self;
	gboolean result = FALSE;
#line 92 "../src/Widgets/SelectionArea.vala"
	self = (ScreenshotWidgetsSelectionArea*) base;
#line 92 "../src/Widgets/SelectionArea.vala"
	g_return_val_if_fail (e != NULL, FALSE);
#line 93 "../src/Widgets/SelectionArea.vala"
	if (e->keyval == GDK_KEY_Escape) {
#line 94 "../src/Widgets/SelectionArea.vala"
		g_signal_emit (self, screenshot_widgets_selection_area_signals[SCREENSHOT_WIDGETS_SELECTION_AREA_CANCELLED_SIGNAL], 0);
#line 330 "SelectionArea.c"
	}
#line 97 "../src/Widgets/SelectionArea.vala"
	result = TRUE;
#line 97 "../src/Widgets/SelectionArea.vala"
	return result;
#line 336 "SelectionArea.c"
}

static void
screenshot_widgets_selection_area_real_show_all (GtkWidget* base)
{
	ScreenshotWidgetsSelectionArea * self;
	GdkDeviceManager* manager = NULL;
	GdkDisplay* _tmp0_;
	GdkDeviceManager* _tmp1_;
	GdkDeviceManager* _tmp2_;
	GdkDevice* pointer = NULL;
	GdkDeviceManager* _tmp3_;
	GdkDevice* _tmp4_;
	GdkDevice* _tmp5_;
	GdkDevice* keyboard = NULL;
	GdkDevice* _tmp6_;
	GdkDevice* _tmp7_;
	GdkDevice* _tmp8_;
	GdkWindow* window = NULL;
	GdkWindow* _tmp9_;
	GdkWindow* _tmp10_;
	GdkGrabStatus status = 0;
	GdkDevice* _tmp11_;
	GdkWindow* _tmp12_;
	GdkWindow* _tmp13_;
	GdkDisplay* _tmp14_;
	GdkCursor* _tmp15_;
	GdkCursor* _tmp16_;
	GdkGrabStatus _tmp17_;
	GdkGrabStatus _tmp18_;
	GdkDevice* _tmp20_;
#line 100 "../src/Widgets/SelectionArea.vala"
	self = (ScreenshotWidgetsSelectionArea*) base;
#line 101 "../src/Widgets/SelectionArea.vala"
	GTK_WIDGET_CLASS (screenshot_widgets_selection_area_parent_class)->show_all ((GtkWidget*) G_TYPE_CHECK_INSTANCE_CAST (self, GRANITE_WIDGETS_TYPE_COMPOSITED_WINDOW, GraniteWidgetsCompositedWindow));
#line 102 "../src/Widgets/SelectionArea.vala"
	_tmp0_ = gdk_display_get_default ();
#line 102 "../src/Widgets/SelectionArea.vala"
	_tmp1_ = gdk_display_get_device_manager (_tmp0_);
#line 102 "../src/Widgets/SelectionArea.vala"
	_tmp2_ = _g_object_ref0 (_tmp1_);
#line 102 "../src/Widgets/SelectionArea.vala"
	manager = _tmp2_;
#line 103 "../src/Widgets/SelectionArea.vala"
	_tmp3_ = manager;
#line 103 "../src/Widgets/SelectionArea.vala"
	_tmp4_ = gdk_device_manager_get_client_pointer (_tmp3_);
#line 103 "../src/Widgets/SelectionArea.vala"
	_tmp5_ = _g_object_ref0 (_tmp4_);
#line 103 "../src/Widgets/SelectionArea.vala"
	pointer = _tmp5_;
#line 104 "../src/Widgets/SelectionArea.vala"
	_tmp6_ = pointer;
#line 104 "../src/Widgets/SelectionArea.vala"
	_tmp7_ = gdk_device_get_associated_device (_tmp6_);
#line 104 "../src/Widgets/SelectionArea.vala"
	_tmp8_ = _g_object_ref0 (_tmp7_);
#line 104 "../src/Widgets/SelectionArea.vala"
	keyboard = _tmp8_;
#line 105 "../src/Widgets/SelectionArea.vala"
	_tmp9_ = gtk_widget_get_window ((GtkWidget*) self);
#line 105 "../src/Widgets/SelectionArea.vala"
	_tmp10_ = _g_object_ref0 (_tmp9_);
#line 105 "../src/Widgets/SelectionArea.vala"
	window = _tmp10_;
#line 107 "../src/Widgets/SelectionArea.vala"
	_tmp11_ = pointer;
#line 107 "../src/Widgets/SelectionArea.vala"
	_tmp12_ = window;
#line 107 "../src/Widgets/SelectionArea.vala"
	_tmp13_ = window;
#line 107 "../src/Widgets/SelectionArea.vala"
	_tmp14_ = gdk_window_get_display (_tmp13_);
#line 107 "../src/Widgets/SelectionArea.vala"
	_tmp15_ = gdk_cursor_new_for_display (_tmp14_, GDK_CROSSHAIR);
#line 107 "../src/Widgets/SelectionArea.vala"
	_tmp16_ = _tmp15_;
#line 107 "../src/Widgets/SelectionArea.vala"
	_tmp17_ = gdk_device_grab (_tmp11_, _tmp12_, GDK_OWNERSHIP_NONE, FALSE, (GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK) | GDK_POINTER_MOTION_MASK, _tmp16_, gtk_get_current_event_time ());
#line 107 "../src/Widgets/SelectionArea.vala"
	_g_object_unref0 (_tmp16_);
#line 107 "../src/Widgets/SelectionArea.vala"
	status = _tmp17_;
#line 114 "../src/Widgets/SelectionArea.vala"
	_tmp18_ = status;
#line 114 "../src/Widgets/SelectionArea.vala"
	if (_tmp18_ != GDK_GRAB_SUCCESS) {
#line 424 "SelectionArea.c"
		GdkDevice* _tmp19_;
#line 115 "../src/Widgets/SelectionArea.vala"
		_tmp19_ = pointer;
#line 115 "../src/Widgets/SelectionArea.vala"
		gdk_device_ungrab (_tmp19_, gtk_get_current_event_time ());
#line 430 "SelectionArea.c"
	}
#line 118 "../src/Widgets/SelectionArea.vala"
	_tmp20_ = keyboard;
#line 118 "../src/Widgets/SelectionArea.vala"
	if (_tmp20_ != NULL) {
#line 436 "SelectionArea.c"
		GdkDevice* _tmp21_;
		GdkWindow* _tmp22_;
		GdkGrabStatus _tmp23_;
#line 119 "../src/Widgets/SelectionArea.vala"
		_tmp21_ = keyboard;
#line 119 "../src/Widgets/SelectionArea.vala"
		_tmp22_ = window;
#line 119 "../src/Widgets/SelectionArea.vala"
		status = gdk_device_grab (_tmp21_, _tmp22_, GDK_OWNERSHIP_NONE, FALSE, GDK_KEY_PRESS_MASK, NULL, gtk_get_current_event_time ());
#line 126 "../src/Widgets/SelectionArea.vala"
		_tmp23_ = status;
#line 126 "../src/Widgets/SelectionArea.vala"
		if (_tmp23_ != GDK_GRAB_SUCCESS) {
#line 450 "SelectionArea.c"
			GdkDevice* _tmp24_;
#line 127 "../src/Widgets/SelectionArea.vala"
			_tmp24_ = keyboard;
#line 127 "../src/Widgets/SelectionArea.vala"
			gdk_device_ungrab (_tmp24_, gtk_get_current_event_time ());
#line 456 "SelectionArea.c"
		}
	}
#line 100 "../src/Widgets/SelectionArea.vala"
	_g_object_unref0 (window);
#line 100 "../src/Widgets/SelectionArea.vala"
	_g_object_unref0 (keyboard);
#line 100 "../src/Widgets/SelectionArea.vala"
	_g_object_unref0 (pointer);
#line 100 "../src/Widgets/SelectionArea.vala"
	_g_object_unref0 (manager);
#line 467 "SelectionArea.c"
}

void
screenshot_widgets_selection_area_close (ScreenshotWidgetsSelectionArea* self)
{
	GdkWindow* _tmp0_;
#line 132 "../src/Widgets/SelectionArea.vala"
	g_return_if_fail (self != NULL);
#line 133 "../src/Widgets/SelectionArea.vala"
	_tmp0_ = gtk_widget_get_window ((GtkWidget*) self);
#line 133 "../src/Widgets/SelectionArea.vala"
	gdk_window_set_cursor (_tmp0_, NULL);
#line 134 "../src/Widgets/SelectionArea.vala"
	gtk_window_close ((GtkWindow*) G_TYPE_CHECK_INSTANCE_CAST (self, GRANITE_WIDGETS_TYPE_COMPOSITED_WINDOW, GraniteWidgetsCompositedWindow));
#line 482 "SelectionArea.c"
}

static gboolean
screenshot_widgets_selection_area_real_draw (GtkWidget* base,
                                             cairo_t* ctx)
{
	ScreenshotWidgetsSelectionArea * self;
	gint w = 0;
	gint h = 0;
	gboolean result = FALSE;
#line 137 "../src/Widgets/SelectionArea.vala"
	self = (ScreenshotWidgetsSelectionArea*) base;
#line 137 "../src/Widgets/SelectionArea.vala"
	g_return_val_if_fail (ctx != NULL, FALSE);
#line 138 "../src/Widgets/SelectionArea.vala"
	if (!self->priv->dragging) {
#line 139 "../src/Widgets/SelectionArea.vala"
		result = TRUE;
#line 139 "../src/Widgets/SelectionArea.vala"
		return result;
#line 503 "SelectionArea.c"
	}
#line 142 "../src/Widgets/SelectionArea.vala"
	w = gtk_widget_get_allocated_width ((GtkWidget*) self);
#line 143 "../src/Widgets/SelectionArea.vala"
	h = gtk_widget_get_allocated_height ((GtkWidget*) self);
#line 145 "../src/Widgets/SelectionArea.vala"
	cairo_rectangle (ctx, (gdouble) 0, (gdouble) 0, (gdouble) w, (gdouble) h);
#line 146 "../src/Widgets/SelectionArea.vala"
	cairo_set_source_rgba (ctx, 0.1, 0.1, 0.1, 0.2);
#line 147 "../src/Widgets/SelectionArea.vala"
	cairo_fill (ctx);
#line 149 "../src/Widgets/SelectionArea.vala"
	cairo_rectangle (ctx, (gdouble) 0, (gdouble) 0, (gdouble) w, (gdouble) h);
#line 150 "../src/Widgets/SelectionArea.vala"
	cairo_set_source_rgb (ctx, 0.7, 0.7, 0.7);
#line 151 "../src/Widgets/SelectionArea.vala"
	cairo_set_line_width (ctx, 1.0);
#line 152 "../src/Widgets/SelectionArea.vala"
	cairo_stroke (ctx);
#line 154 "../src/Widgets/SelectionArea.vala"
	result = GTK_WIDGET_CLASS (screenshot_widgets_selection_area_parent_class)->draw ((GtkWidget*) G_TYPE_CHECK_INSTANCE_CAST (self, GRANITE_WIDGETS_TYPE_COMPOSITED_WINDOW, GraniteWidgetsCompositedWindow), ctx);
#line 154 "../src/Widgets/SelectionArea.vala"
	return result;
#line 527 "SelectionArea.c"
}

static GObject *
screenshot_widgets_selection_area_constructor (GType type,
                                               guint n_construct_properties,
                                               GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	ScreenshotWidgetsSelectionArea * self;
#line 29 "../src/Widgets/SelectionArea.vala"
	parent_class = G_OBJECT_CLASS (screenshot_widgets_selection_area_parent_class);
#line 29 "../src/Widgets/SelectionArea.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 29 "../src/Widgets/SelectionArea.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, SCREENSHOT_WIDGETS_TYPE_SELECTION_AREA, ScreenshotWidgetsSelectionArea);
#line 30 "../src/Widgets/SelectionArea.vala"
	g_object_set ((GtkWindow*) self, "type", GTK_WINDOW_POPUP, NULL);
#line 29 "../src/Widgets/SelectionArea.vala"
	return obj;
#line 548 "SelectionArea.c"
}

static void
screenshot_widgets_selection_area_class_init (ScreenshotWidgetsSelectionAreaClass * klass,
                                              gpointer klass_data)
{
#line 21 "../src/Widgets/SelectionArea.vala"
	screenshot_widgets_selection_area_parent_class = g_type_class_peek_parent (klass);
#line 21 "../src/Widgets/SelectionArea.vala"
	g_type_class_adjust_private_offset (klass, &ScreenshotWidgetsSelectionArea_private_offset);
#line 21 "../src/Widgets/SelectionArea.vala"
	((GtkWidgetClass *) klass)->button_press_event = (gboolean (*) (GtkWidget*, GdkEventButton*)) screenshot_widgets_selection_area_real_button_press_event;
#line 21 "../src/Widgets/SelectionArea.vala"
	((GtkWidgetClass *) klass)->button_release_event = (gboolean (*) (GtkWidget*, GdkEventButton*)) screenshot_widgets_selection_area_real_button_release_event;
#line 21 "../src/Widgets/SelectionArea.vala"
	((GtkWidgetClass *) klass)->motion_notify_event = (gboolean (*) (GtkWidget*, GdkEventMotion*)) screenshot_widgets_selection_area_real_motion_notify_event;
#line 21 "../src/Widgets/SelectionArea.vala"
	((GtkWidgetClass *) klass)->key_press_event = (gboolean (*) (GtkWidget*, GdkEventKey*)) screenshot_widgets_selection_area_real_key_press_event;
#line 21 "../src/Widgets/SelectionArea.vala"
	((GtkWidgetClass *) klass)->show_all = (void (*) (GtkWidget*)) screenshot_widgets_selection_area_real_show_all;
#line 21 "../src/Widgets/SelectionArea.vala"
	((GtkWidgetClass *) klass)->draw = (gboolean (*) (GtkWidget*, cairo_t*)) screenshot_widgets_selection_area_real_draw;
#line 21 "../src/Widgets/SelectionArea.vala"
	G_OBJECT_CLASS (klass)->constructor = screenshot_widgets_selection_area_constructor;
#line 21 "../src/Widgets/SelectionArea.vala"
	G_OBJECT_CLASS (klass)->finalize = screenshot_widgets_selection_area_finalize;
#line 21 "../src/Widgets/SelectionArea.vala"
	screenshot_widgets_selection_area_signals[SCREENSHOT_WIDGETS_SELECTION_AREA_CAPTURED_SIGNAL] = g_signal_new ("captured", SCREENSHOT_WIDGETS_TYPE_SELECTION_AREA, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
#line 21 "../src/Widgets/SelectionArea.vala"
	screenshot_widgets_selection_area_signals[SCREENSHOT_WIDGETS_SELECTION_AREA_CANCELLED_SIGNAL] = g_signal_new ("cancelled", SCREENSHOT_WIDGETS_TYPE_SELECTION_AREA, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
#line 579 "SelectionArea.c"
}

static void
screenshot_widgets_selection_area_instance_init (ScreenshotWidgetsSelectionArea * self,
                                                 gpointer klass)
{
#line 21 "../src/Widgets/SelectionArea.vala"
	self->priv = screenshot_widgets_selection_area_get_instance_private (self);
#line 27 "../src/Widgets/SelectionArea.vala"
	self->priv->dragging = FALSE;
#line 590 "SelectionArea.c"
}

static void
screenshot_widgets_selection_area_finalize (GObject * obj)
{
	ScreenshotWidgetsSelectionArea * self;
#line 21 "../src/Widgets/SelectionArea.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, SCREENSHOT_WIDGETS_TYPE_SELECTION_AREA, ScreenshotWidgetsSelectionArea);
#line 21 "../src/Widgets/SelectionArea.vala"
	G_OBJECT_CLASS (screenshot_widgets_selection_area_parent_class)->finalize (obj);
#line 601 "SelectionArea.c"
}

static GType
screenshot_widgets_selection_area_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (ScreenshotWidgetsSelectionAreaClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) screenshot_widgets_selection_area_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ScreenshotWidgetsSelectionArea), 0, (GInstanceInitFunc) screenshot_widgets_selection_area_instance_init, NULL };
	GType screenshot_widgets_selection_area_type_id;
	screenshot_widgets_selection_area_type_id = g_type_register_static (GRANITE_WIDGETS_TYPE_COMPOSITED_WINDOW, "ScreenshotWidgetsSelectionArea", &g_define_type_info, 0);
	ScreenshotWidgetsSelectionArea_private_offset = g_type_add_instance_private (screenshot_widgets_selection_area_type_id, sizeof (ScreenshotWidgetsSelectionAreaPrivate));
	return screenshot_widgets_selection_area_type_id;
}

GType
screenshot_widgets_selection_area_get_type (void)
{
	static volatile gsize screenshot_widgets_selection_area_type_id__volatile = 0;
	if (g_once_init_enter (&screenshot_widgets_selection_area_type_id__volatile)) {
		GType screenshot_widgets_selection_area_type_id;
		screenshot_widgets_selection_area_type_id = screenshot_widgets_selection_area_get_type_once ();
		g_once_init_leave (&screenshot_widgets_selection_area_type_id__volatile, screenshot_widgets_selection_area_type_id);
	}
	return screenshot_widgets_selection_area_type_id__volatile;
}

