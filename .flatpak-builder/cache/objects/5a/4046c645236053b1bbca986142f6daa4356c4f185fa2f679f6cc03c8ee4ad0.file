/* Application.c generated by valac 0.54.3, the Vala compiler
 * generated from Application.vala, do not modify */

/*
* Copyright (c) 2018 mohelm97 (https://github.com/mohelm97/screenrecorder)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Mohammed ALMadhoun <mohelm97@gmail.com>
*/

#include <gtk/gtk.h>
#include <glib-object.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <glib/gi18n-lib.h>
#include <gst/gst.h>
#include <clutter/clutter.h>
#include <clutter-gtk/clutter-gtk.h>

#if !defined(VALA_EXTERN)
#if defined(_MSC_VER)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define SCREEN_RECORDER_TYPE_SCREEN_RECORDER_APP (screen_recorder_screen_recorder_app_get_type ())
#define SCREEN_RECORDER_SCREEN_RECORDER_APP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SCREEN_RECORDER_TYPE_SCREEN_RECORDER_APP, ScreenRecorderScreenRecorderApp))
#define SCREEN_RECORDER_SCREEN_RECORDER_APP_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SCREEN_RECORDER_TYPE_SCREEN_RECORDER_APP, ScreenRecorderScreenRecorderAppClass))
#define SCREEN_RECORDER_IS_SCREEN_RECORDER_APP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SCREEN_RECORDER_TYPE_SCREEN_RECORDER_APP))
#define SCREEN_RECORDER_IS_SCREEN_RECORDER_APP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SCREEN_RECORDER_TYPE_SCREEN_RECORDER_APP))
#define SCREEN_RECORDER_SCREEN_RECORDER_APP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SCREEN_RECORDER_TYPE_SCREEN_RECORDER_APP, ScreenRecorderScreenRecorderAppClass))

typedef struct _ScreenRecorderScreenRecorderApp ScreenRecorderScreenRecorderApp;
typedef struct _ScreenRecorderScreenRecorderAppClass ScreenRecorderScreenRecorderAppClass;
typedef struct _ScreenRecorderScreenRecorderAppPrivate ScreenRecorderScreenRecorderAppPrivate;

#define SCREEN_RECORDER_TYPE_MAIN_WINDOW (screen_recorder_main_window_get_type ())
#define SCREEN_RECORDER_MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SCREEN_RECORDER_TYPE_MAIN_WINDOW, ScreenRecorderMainWindow))
#define SCREEN_RECORDER_MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SCREEN_RECORDER_TYPE_MAIN_WINDOW, ScreenRecorderMainWindowClass))
#define SCREEN_RECORDER_IS_MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SCREEN_RECORDER_TYPE_MAIN_WINDOW))
#define SCREEN_RECORDER_IS_MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SCREEN_RECORDER_TYPE_MAIN_WINDOW))
#define SCREEN_RECORDER_MAIN_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SCREEN_RECORDER_TYPE_MAIN_WINDOW, ScreenRecorderMainWindowClass))

typedef struct _ScreenRecorderMainWindow ScreenRecorderMainWindow;
typedef struct _ScreenRecorderMainWindowClass ScreenRecorderMainWindowClass;
enum  {
	SCREEN_RECORDER_SCREEN_RECORDER_APP_0_PROPERTY,
	SCREEN_RECORDER_SCREEN_RECORDER_APP_NUM_PROPERTIES
};
static GParamSpec* screen_recorder_screen_recorder_app_properties[SCREEN_RECORDER_SCREEN_RECORDER_APP_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))

struct _ScreenRecorderScreenRecorderApp {
	GtkApplication parent_instance;
	ScreenRecorderScreenRecorderAppPrivate * priv;
};

struct _ScreenRecorderScreenRecorderAppClass {
	GtkApplicationClass parent_class;
};

struct _ScreenRecorderScreenRecorderAppPrivate {
	ScreenRecorderMainWindow* window;
};

static gint ScreenRecorderScreenRecorderApp_private_offset;
static gpointer screen_recorder_screen_recorder_app_parent_class = NULL;
VALA_EXTERN GSettings* screen_recorder_screen_recorder_app_settings;
GSettings* screen_recorder_screen_recorder_app_settings = NULL;

VALA_EXTERN GType screen_recorder_screen_recorder_app_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ScreenRecorderScreenRecorderApp, g_object_unref)
VALA_EXTERN GType screen_recorder_main_window_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ScreenRecorderMainWindow, g_object_unref)
#define SCREEN_RECORDER_SCREEN_RECORDER_APP_SAVE_FOLDER _ ("Screen Records")
VALA_EXTERN ScreenRecorderScreenRecorderApp* screen_recorder_screen_recorder_app_new (void);
VALA_EXTERN ScreenRecorderScreenRecorderApp* screen_recorder_screen_recorder_app_construct (GType object_type);
static void screen_recorder_screen_recorder_app_real_activate (GApplication* base);
VALA_EXTERN ScreenRecorderMainWindow* screen_recorder_main_window_new (GtkApplication* app);
VALA_EXTERN ScreenRecorderMainWindow* screen_recorder_main_window_construct (GType object_type,
                                                                 GtkApplication* app);
static gint screen_recorder_screen_recorder_app_main (gchar** args,
                                               gint args_length1);
VALA_EXTERN void screen_recorder_screen_recorder_app_create_dir_if_missing (const gchar* path);
static GObject * screen_recorder_screen_recorder_app_constructor (GType type,
                                                           guint n_construct_properties,
                                                           GObjectConstructParam * construct_properties);
static void _screen_recorder_screen_recorder_app___lambda28_ (ScreenRecorderScreenRecorderApp* self);
static void __screen_recorder_screen_recorder_app___lambda28__g_simple_action_activate (GSimpleAction* _sender,
                                                                                 GVariant* parameter,
                                                                                 gpointer self);
static void _screen_recorder_screen_recorder_app___lambda29_ (ScreenRecorderScreenRecorderApp* self,
                                                       GVariant* parameter);
static void __screen_recorder_screen_recorder_app___lambda29__g_simple_action_activate (GSimpleAction* _sender,
                                                                                 GVariant* parameter,
                                                                                 gpointer self);
static void screen_recorder_screen_recorder_app_finalize (GObject * obj);
static GType screen_recorder_screen_recorder_app_get_type_once (void);
static void _vala_array_destroy (gpointer array,
                          gssize array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gssize array_length,
                       GDestroyNotify destroy_func);

static inline gpointer
screen_recorder_screen_recorder_app_get_instance_private (ScreenRecorderScreenRecorderApp* self)
{
	return G_STRUCT_MEMBER_P (self, ScreenRecorderScreenRecorderApp_private_offset);
}

ScreenRecorderScreenRecorderApp*
screen_recorder_screen_recorder_app_construct (GType object_type)
{
	ScreenRecorderScreenRecorderApp * self = NULL;
#line 30 "../src/Application.vala"
	self = (ScreenRecorderScreenRecorderApp*) g_object_new (object_type, "application-id", "com.github.mohelm97.screenrecorder", "flags", G_APPLICATION_FLAGS_NONE, NULL);
#line 29 "../src/Application.vala"
	return self;
#line 143 "Application.c"
}

ScreenRecorderScreenRecorderApp*
screen_recorder_screen_recorder_app_new (void)
{
#line 29 "../src/Application.vala"
	return screen_recorder_screen_recorder_app_construct (SCREEN_RECORDER_TYPE_SCREEN_RECORDER_APP);
#line 151 "Application.c"
}

static void
screen_recorder_screen_recorder_app_real_activate (GApplication* base)
{
	ScreenRecorderScreenRecorderApp * self;
	ScreenRecorderMainWindow* _tmp0_;
	ScreenRecorderMainWindow* _tmp2_;
	ScreenRecorderMainWindow* _tmp3_;
	GtkStyleContext* _tmp4_;
	ScreenRecorderMainWindow* _tmp5_;
#line 66 "../src/Application.vala"
	self = (ScreenRecorderScreenRecorderApp*) base;
#line 67 "../src/Application.vala"
	_tmp0_ = self->priv->window;
#line 67 "../src/Application.vala"
	if (_tmp0_ != NULL) {
#line 169 "Application.c"
		ScreenRecorderMainWindow* _tmp1_;
#line 68 "../src/Application.vala"
		_tmp1_ = self->priv->window;
#line 68 "../src/Application.vala"
		gtk_window_present ((GtkWindow*) _tmp1_);
#line 69 "../src/Application.vala"
		return;
#line 177 "Application.c"
	}
#line 71 "../src/Application.vala"
	_tmp2_ = screen_recorder_main_window_new ((GtkApplication*) self);
#line 71 "../src/Application.vala"
	g_object_ref_sink (_tmp2_);
#line 71 "../src/Application.vala"
	_g_object_unref0 (self->priv->window);
#line 71 "../src/Application.vala"
	self->priv->window = _tmp2_;
#line 72 "../src/Application.vala"
	_tmp3_ = self->priv->window;
#line 72 "../src/Application.vala"
	_tmp4_ = gtk_widget_get_style_context ((GtkWidget*) _tmp3_);
#line 72 "../src/Application.vala"
	gtk_style_context_add_class (_tmp4_, "rounded");
#line 73 "../src/Application.vala"
	_tmp5_ = self->priv->window;
#line 73 "../src/Application.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp5_);
#line 197 "Application.c"
}

static gint
screen_recorder_screen_recorder_app_main (gchar** args,
                                          gint args_length1)
{
	ClutterInitError err = 0;
	ClutterInitError _tmp0_;
	ScreenRecorderScreenRecorderApp* app = NULL;
	ScreenRecorderScreenRecorderApp* _tmp4_;
	gint result = 0;
#line 77 "../src/Application.vala"
	gtk_init ((gint*) (&args_length1), &args);
#line 78 "../src/Application.vala"
	gst_init ((gint*) (&args_length1), &args);
#line 79 "../src/Application.vala"
	_tmp0_ = gtk_clutter_init ((gint*) (&args_length1), &args);
#line 79 "../src/Application.vala"
	err = _tmp0_;
#line 80 "../src/Application.vala"
	if (err != CLUTTER_INIT_SUCCESS) {
#line 219 "Application.c"
		GEnumValue* _tmp1_;
		gchar* _tmp2_;
		gchar* _tmp3_;
#line 81 "../src/Application.vala"
		_tmp1_ = g_enum_get_value (g_type_class_ref (clutter_init_error_get_type ()), err);
#line 81 "../src/Application.vala"
		_tmp2_ = g_strconcat ("Could not initalize clutter! ", (_tmp1_ != NULL) ? _tmp1_->value_name : NULL, NULL);
#line 81 "../src/Application.vala"
		_tmp3_ = _tmp2_;
#line 81 "../src/Application.vala"
		g_error ("Application.vala:81: %s", _tmp3_);
#line 81 "../src/Application.vala"
		_g_free0 (_tmp3_);
#line 233 "Application.c"
	}
#line 83 "../src/Application.vala"
	_tmp4_ = screen_recorder_screen_recorder_app_new ();
#line 83 "../src/Application.vala"
	app = _tmp4_;
#line 84 "../src/Application.vala"
	result = g_application_run ((GApplication*) app, (gint) args_length1, args);
#line 84 "../src/Application.vala"
	_g_object_unref0 (app);
#line 84 "../src/Application.vala"
	return result;
#line 245 "Application.c"
}

int
main (int argc,
      char ** argv)
{
#line 76 "../src/Application.vala"
	return screen_recorder_screen_recorder_app_main (argv, argc);
#line 254 "Application.c"
}

void
screen_recorder_screen_recorder_app_create_dir_if_missing (const gchar* path)
{
	GFile* _tmp0_;
	GFile* _tmp1_;
	gboolean _tmp2_;
	GError* _inner_error0_ = NULL;
#line 87 "../src/Application.vala"
	g_return_if_fail (path != NULL);
#line 88 "../src/Application.vala"
	_tmp0_ = g_file_new_for_path (path);
#line 88 "../src/Application.vala"
	_tmp1_ = _tmp0_;
#line 88 "../src/Application.vala"
	_tmp2_ = !g_file_query_exists (_tmp1_, NULL);
#line 88 "../src/Application.vala"
	_g_object_unref0 (_tmp1_);
#line 88 "../src/Application.vala"
	if (_tmp2_) {
#line 276 "Application.c"
		{
			GFile* file = NULL;
			GFile* _tmp3_;
			GFile* _tmp4_;
#line 90 "../src/Application.vala"
			_tmp3_ = g_file_new_for_path (path);
#line 90 "../src/Application.vala"
			file = _tmp3_;
#line 91 "../src/Application.vala"
			_tmp4_ = file;
#line 91 "../src/Application.vala"
			g_file_make_directory (_tmp4_, NULL, &_inner_error0_);
#line 91 "../src/Application.vala"
			if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 91 "../src/Application.vala"
				_g_object_unref0 (file);
#line 293 "Application.c"
				goto __catch0_g_error;
			}
#line 89 "../src/Application.vala"
			_g_object_unref0 (file);
#line 298 "Application.c"
		}
		goto __finally0;
		__catch0_g_error:
		{
			GError* e = NULL;
			GError* _tmp5_;
			const gchar* _tmp6_;
#line 89 "../src/Application.vala"
			e = _inner_error0_;
#line 89 "../src/Application.vala"
			_inner_error0_ = NULL;
#line 93 "../src/Application.vala"
			_tmp5_ = e;
#line 93 "../src/Application.vala"
			_tmp6_ = _tmp5_->message;
#line 93 "../src/Application.vala"
			g_debug ("Application.vala:93: %s", _tmp6_);
#line 89 "../src/Application.vala"
			_g_error_free0 (e);
#line 318 "Application.c"
		}
		__finally0:
#line 89 "../src/Application.vala"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 89 "../src/Application.vala"
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 89 "../src/Application.vala"
			g_clear_error (&_inner_error0_);
#line 89 "../src/Application.vala"
			return;
#line 329 "Application.c"
		}
	}
}

static void
_screen_recorder_screen_recorder_app___lambda28_ (ScreenRecorderScreenRecorderApp* self)
{
	ScreenRecorderMainWindow* _tmp0_;
#line 42 "../src/Application.vala"
	_tmp0_ = self->priv->window;
#line 42 "../src/Application.vala"
	if (_tmp0_ != NULL) {
#line 342 "Application.c"
		ScreenRecorderMainWindow* _tmp1_;
#line 43 "../src/Application.vala"
		_tmp1_ = self->priv->window;
#line 43 "../src/Application.vala"
		gtk_widget_destroy ((GtkWidget*) _tmp1_);
#line 348 "Application.c"
	}
}

static void
__screen_recorder_screen_recorder_app___lambda28__g_simple_action_activate (GSimpleAction* _sender,
                                                                            GVariant* parameter,
                                                                            gpointer self)
{
#line 41 "../src/Application.vala"
	_screen_recorder_screen_recorder_app___lambda28_ ((ScreenRecorderScreenRecorderApp*) self);
#line 359 "Application.c"
}

static void
_screen_recorder_screen_recorder_app___lambda29_ (ScreenRecorderScreenRecorderApp* self,
                                                  GVariant* parameter)
{
	GError* _inner_error0_ = NULL;
#line 49 "../src/Application.vala"
	if (parameter == NULL) {
#line 50 "../src/Application.vala"
		return;
#line 371 "Application.c"
	}
	{
		GFile* records_folder = NULL;
		GSettings* _tmp0_;
		gchar* _tmp1_;
		gchar* _tmp2_;
		GFile* _tmp3_;
		GFile* _tmp4_;
		GFile* _tmp5_;
		gchar* _tmp6_;
		gchar* _tmp7_;
		const gchar* _tmp8_;
		gchar* _tmp9_;
		gchar* _tmp10_;
#line 53 "../src/Application.vala"
		_tmp0_ = screen_recorder_screen_recorder_app_settings;
#line 53 "../src/Application.vala"
		_tmp1_ = g_settings_get_string (_tmp0_, "folder-dir");
#line 53 "../src/Application.vala"
		_tmp2_ = _tmp1_;
#line 53 "../src/Application.vala"
		_tmp3_ = g_file_new_for_path (_tmp2_);
#line 53 "../src/Application.vala"
		_tmp4_ = _tmp3_;
#line 53 "../src/Application.vala"
		_g_free0 (_tmp2_);
#line 53 "../src/Application.vala"
		records_folder = _tmp4_;
#line 54 "../src/Application.vala"
		_tmp5_ = records_folder;
#line 54 "../src/Application.vala"
		_tmp6_ = g_file_get_uri (_tmp5_);
#line 54 "../src/Application.vala"
		_tmp7_ = _tmp6_;
#line 54 "../src/Application.vala"
		g_app_info_launch_default_for_uri (_tmp7_, NULL, &_inner_error0_);
#line 54 "../src/Application.vala"
		_g_free0 (_tmp7_);
#line 54 "../src/Application.vala"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 54 "../src/Application.vala"
			_g_object_unref0 (records_folder);
#line 54 "../src/Application.vala"
			if (_inner_error0_->domain == G_SPAWN_ERROR) {
#line 416 "Application.c"
				goto __catch0_g_spawn_error;
			}
			goto __finally0;
		}
#line 55 "../src/Application.vala"
		_tmp8_ = g_variant_get_string (parameter, NULL);
#line 55 "../src/Application.vala"
		_tmp9_ = g_strdup_printf ("launch_default_for_uri %s", _tmp8_);
#line 55 "../src/Application.vala"
		_tmp10_ = _tmp9_;
#line 55 "../src/Application.vala"
		g_debug ("Application.vala:55: %s", _tmp10_);
#line 55 "../src/Application.vala"
		_g_free0 (_tmp10_);
#line 52 "../src/Application.vala"
		_g_object_unref0 (records_folder);
#line 433 "Application.c"
	}
	goto __finally0;
	__catch0_g_spawn_error:
	{
		GError* e = NULL;
		GError* _tmp11_;
		const gchar* _tmp12_;
#line 52 "../src/Application.vala"
		e = _inner_error0_;
#line 52 "../src/Application.vala"
		_inner_error0_ = NULL;
#line 57 "../src/Application.vala"
		_tmp11_ = e;
#line 57 "../src/Application.vala"
		_tmp12_ = _tmp11_->message;
#line 57 "../src/Application.vala"
		g_warning ("Application.vala:57: %s", _tmp12_);
#line 52 "../src/Application.vala"
		_g_error_free0 (e);
#line 453 "Application.c"
	}
	__finally0:
#line 52 "../src/Application.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 52 "../src/Application.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 52 "../src/Application.vala"
		g_clear_error (&_inner_error0_);
#line 52 "../src/Application.vala"
		return;
#line 464 "Application.c"
	}
}

static void
__screen_recorder_screen_recorder_app___lambda29__g_simple_action_activate (GSimpleAction* _sender,
                                                                            GVariant* parameter,
                                                                            gpointer self)
{
#line 48 "../src/Application.vala"
	_screen_recorder_screen_recorder_app___lambda29_ ((ScreenRecorderScreenRecorderApp*) self, parameter);
#line 475 "Application.c"
}

static GObject *
screen_recorder_screen_recorder_app_constructor (GType type,
                                                 guint n_construct_properties,
                                                 GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	ScreenRecorderScreenRecorderApp * self;
	GSettings* _tmp0_;
	GtkIconTheme* default_theme = NULL;
	GtkIconTheme* _tmp1_;
	GtkIconTheme* _tmp2_;
	GSimpleAction* quit_action = NULL;
	GSimpleAction* _tmp3_;
	GSimpleAction* _tmp4_;
	GSimpleAction* open_records_folder_action = NULL;
	const GVariantType* _tmp5_;
	GSimpleAction* _tmp6_;
	GSimpleAction* _tmp7_;
	GSimpleAction* _tmp8_;
	GSimpleAction* _tmp9_;
	gchar* _tmp10_;
	gchar** _tmp11_;
	gchar** _tmp12_;
	gint _tmp12__length1;
#line 36 "../src/Application.vala"
	parent_class = G_OBJECT_CLASS (screen_recorder_screen_recorder_app_parent_class);
#line 36 "../src/Application.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 36 "../src/Application.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, SCREEN_RECORDER_TYPE_SCREEN_RECORDER_APP, ScreenRecorderScreenRecorderApp);
#line 37 "../src/Application.vala"
	_tmp0_ = g_settings_new ("com.github.mohelm97.screenrecorder");
#line 37 "../src/Application.vala"
	_g_object_unref0 (screen_recorder_screen_recorder_app_settings);
#line 37 "../src/Application.vala"
	screen_recorder_screen_recorder_app_settings = _tmp0_;
#line 38 "../src/Application.vala"
	_tmp1_ = gtk_icon_theme_get_default ();
#line 38 "../src/Application.vala"
	default_theme = _tmp1_;
#line 39 "../src/Application.vala"
	_tmp2_ = default_theme;
#line 39 "../src/Application.vala"
	gtk_icon_theme_add_resource_path (_tmp2_, "/com/github/mohelm97/screenrecorder");
#line 40 "../src/Application.vala"
	_tmp3_ = g_simple_action_new ("quit", NULL);
#line 40 "../src/Application.vala"
	quit_action = _tmp3_;
#line 41 "../src/Application.vala"
	_tmp4_ = quit_action;
#line 41 "../src/Application.vala"
	g_signal_connect_object (_tmp4_, "activate", (GCallback) __screen_recorder_screen_recorder_app___lambda28__g_simple_action_activate, self, 0);
#line 47 "../src/Application.vala"
	_tmp5_ = G_VARIANT_TYPE_STRING;
#line 47 "../src/Application.vala"
	_tmp6_ = g_simple_action_new ("open-records-folder", _tmp5_);
#line 47 "../src/Application.vala"
	open_records_folder_action = _tmp6_;
#line 48 "../src/Application.vala"
	_tmp7_ = open_records_folder_action;
#line 48 "../src/Application.vala"
	g_signal_connect_object (_tmp7_, "activate", (GCallback) __screen_recorder_screen_recorder_app___lambda29__g_simple_action_activate, self, 0);
#line 61 "../src/Application.vala"
	_tmp8_ = quit_action;
#line 61 "../src/Application.vala"
	g_action_map_add_action ((GActionMap*) self, (GAction*) _tmp8_);
#line 62 "../src/Application.vala"
	_tmp9_ = open_records_folder_action;
#line 62 "../src/Application.vala"
	g_action_map_add_action ((GActionMap*) self, (GAction*) _tmp9_);
#line 63 "../src/Application.vala"
	_tmp10_ = g_strdup ("<Control>q");
#line 63 "../src/Application.vala"
	_tmp11_ = g_new0 (gchar*, 1 + 1);
#line 63 "../src/Application.vala"
	_tmp11_[0] = _tmp10_;
#line 63 "../src/Application.vala"
	_tmp12_ = _tmp11_;
#line 63 "../src/Application.vala"
	_tmp12__length1 = 1;
#line 63 "../src/Application.vala"
	gtk_application_set_accels_for_action ((GtkApplication*) self, "app.quit", _tmp12_);
#line 63 "../src/Application.vala"
	_tmp12_ = (_vala_array_free (_tmp12_, _tmp12__length1, (GDestroyNotify) g_free), NULL);
#line 36 "../src/Application.vala"
	_g_object_unref0 (open_records_folder_action);
#line 36 "../src/Application.vala"
	_g_object_unref0 (quit_action);
#line 36 "../src/Application.vala"
	return obj;
#line 569 "Application.c"
}

static void
screen_recorder_screen_recorder_app_class_init (ScreenRecorderScreenRecorderAppClass * klass,
                                                gpointer klass_data)
{
#line 23 "../src/Application.vala"
	screen_recorder_screen_recorder_app_parent_class = g_type_class_peek_parent (klass);
#line 23 "../src/Application.vala"
	g_type_class_adjust_private_offset (klass, &ScreenRecorderScreenRecorderApp_private_offset);
#line 23 "../src/Application.vala"
	((GApplicationClass *) klass)->activate = (void (*) (GApplication*)) screen_recorder_screen_recorder_app_real_activate;
#line 23 "../src/Application.vala"
	G_OBJECT_CLASS (klass)->constructor = screen_recorder_screen_recorder_app_constructor;
#line 23 "../src/Application.vala"
	G_OBJECT_CLASS (klass)->finalize = screen_recorder_screen_recorder_app_finalize;
#line 586 "Application.c"
}

static void
screen_recorder_screen_recorder_app_instance_init (ScreenRecorderScreenRecorderApp * self,
                                                   gpointer klass)
{
#line 23 "../src/Application.vala"
	self->priv = screen_recorder_screen_recorder_app_get_instance_private (self);
#line 25 "../src/Application.vala"
	self->priv->window = NULL;
#line 597 "Application.c"
}

static void
screen_recorder_screen_recorder_app_finalize (GObject * obj)
{
	ScreenRecorderScreenRecorderApp * self;
#line 23 "../src/Application.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, SCREEN_RECORDER_TYPE_SCREEN_RECORDER_APP, ScreenRecorderScreenRecorderApp);
#line 25 "../src/Application.vala"
	_g_object_unref0 (self->priv->window);
#line 23 "../src/Application.vala"
	G_OBJECT_CLASS (screen_recorder_screen_recorder_app_parent_class)->finalize (obj);
#line 610 "Application.c"
}

static GType
screen_recorder_screen_recorder_app_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (ScreenRecorderScreenRecorderAppClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) screen_recorder_screen_recorder_app_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ScreenRecorderScreenRecorderApp), 0, (GInstanceInitFunc) screen_recorder_screen_recorder_app_instance_init, NULL };
	GType screen_recorder_screen_recorder_app_type_id;
	screen_recorder_screen_recorder_app_type_id = g_type_register_static (gtk_application_get_type (), "ScreenRecorderScreenRecorderApp", &g_define_type_info, 0);
	ScreenRecorderScreenRecorderApp_private_offset = g_type_add_instance_private (screen_recorder_screen_recorder_app_type_id, sizeof (ScreenRecorderScreenRecorderAppPrivate));
	return screen_recorder_screen_recorder_app_type_id;
}

GType
screen_recorder_screen_recorder_app_get_type (void)
{
	static volatile gsize screen_recorder_screen_recorder_app_type_id__volatile = 0;
	if (g_once_init_enter (&screen_recorder_screen_recorder_app_type_id__volatile)) {
		GType screen_recorder_screen_recorder_app_type_id;
		screen_recorder_screen_recorder_app_type_id = screen_recorder_screen_recorder_app_get_type_once ();
		g_once_init_leave (&screen_recorder_screen_recorder_app_type_id__volatile, screen_recorder_screen_recorder_app_type_id);
	}
	return screen_recorder_screen_recorder_app_type_id__volatile;
}

static void
_vala_array_destroy (gpointer array,
                     gssize array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gssize i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gssize array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

