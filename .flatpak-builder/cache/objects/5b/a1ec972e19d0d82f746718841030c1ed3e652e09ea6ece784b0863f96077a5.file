/* ScaleComboBox.c generated by valac 0.54.3, the Vala compiler
 * generated from ScaleComboBox.vala, do not modify */

/*
* Copyright (c) 2018 mohelm97 (https://github.com/mohelm97/screenrecorder)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Peter Uithoven <peter@peteruithoven.nl>
*/

#include <gtk/gtk.h>
#include <glib-object.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>

#if !defined(VALA_EXTERN)
#if defined(_MSC_VER)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define SCREEN_RECORDER_TYPE_SCALE_COMBO_BOX (screen_recorder_scale_combo_box_get_type ())
#define SCREEN_RECORDER_SCALE_COMBO_BOX(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SCREEN_RECORDER_TYPE_SCALE_COMBO_BOX, ScreenRecorderScaleComboBox))
#define SCREEN_RECORDER_SCALE_COMBO_BOX_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SCREEN_RECORDER_TYPE_SCALE_COMBO_BOX, ScreenRecorderScaleComboBoxClass))
#define SCREEN_RECORDER_IS_SCALE_COMBO_BOX(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SCREEN_RECORDER_TYPE_SCALE_COMBO_BOX))
#define SCREEN_RECORDER_IS_SCALE_COMBO_BOX_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SCREEN_RECORDER_TYPE_SCALE_COMBO_BOX))
#define SCREEN_RECORDER_SCALE_COMBO_BOX_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SCREEN_RECORDER_TYPE_SCALE_COMBO_BOX, ScreenRecorderScaleComboBoxClass))

typedef struct _ScreenRecorderScaleComboBox ScreenRecorderScaleComboBox;
typedef struct _ScreenRecorderScaleComboBoxClass ScreenRecorderScaleComboBoxClass;
typedef struct _ScreenRecorderScaleComboBoxPrivate ScreenRecorderScaleComboBoxPrivate;
enum  {
	SCREEN_RECORDER_SCALE_COMBO_BOX_0_PROPERTY,
	SCREEN_RECORDER_SCALE_COMBO_BOX_SCALE_PROPERTY,
	SCREEN_RECORDER_SCALE_COMBO_BOX_NUM_PROPERTIES
};
static GParamSpec* screen_recorder_scale_combo_box_properties[SCREEN_RECORDER_SCALE_COMBO_BOX_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))

struct _ScreenRecorderScaleComboBox {
	GtkComboBoxText parent_instance;
	ScreenRecorderScaleComboBoxPrivate * priv;
};

struct _ScreenRecorderScaleComboBoxClass {
	GtkComboBoxTextClass parent_class;
};

static gpointer screen_recorder_scale_combo_box_parent_class = NULL;

VALA_EXTERN GType screen_recorder_scale_combo_box_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ScreenRecorderScaleComboBox, g_object_unref)
VALA_EXTERN ScreenRecorderScaleComboBox* screen_recorder_scale_combo_box_new (void);
VALA_EXTERN ScreenRecorderScaleComboBox* screen_recorder_scale_combo_box_construct (GType object_type);
static void __lambda17_ (ScreenRecorderScaleComboBox* self);
VALA_EXTERN gint screen_recorder_scale_combo_box_get_scale (ScreenRecorderScaleComboBox* self);
VALA_EXTERN void screen_recorder_scale_combo_box_set_scale (ScreenRecorderScaleComboBox* self,
                                                gint value);
static void ___lambda17__gtk_combo_box_changed (GtkComboBox* _sender,
                                         gpointer self);
static GType screen_recorder_scale_combo_box_get_type_once (void);
static void _vala_screen_recorder_scale_combo_box_get_property (GObject * object,
                                                         guint property_id,
                                                         GValue * value,
                                                         GParamSpec * pspec);
static void _vala_screen_recorder_scale_combo_box_set_property (GObject * object,
                                                         guint property_id,
                                                         const GValue * value,
                                                         GParamSpec * pspec);

static void
__lambda17_ (ScreenRecorderScaleComboBox* self)
{
	gint _tmp0_;
	gint _tmp1_;
#line 39 "../src/Widgets/ScaleComboBox.vala"
	_tmp0_ = screen_recorder_scale_combo_box_get_scale (self);
#line 39 "../src/Widgets/ScaleComboBox.vala"
	_tmp1_ = _tmp0_;
#line 39 "../src/Widgets/ScaleComboBox.vala"
	screen_recorder_scale_combo_box_set_scale (self, _tmp1_);
#line 102 "ScaleComboBox.c"
}

static void
___lambda17__gtk_combo_box_changed (GtkComboBox* _sender,
                                    gpointer self)
{
#line 38 "../src/Widgets/ScaleComboBox.vala"
	__lambda17_ ((ScreenRecorderScaleComboBox*) self);
#line 111 "ScaleComboBox.c"
}

ScreenRecorderScaleComboBox*
screen_recorder_scale_combo_box_construct (GType object_type)
{
	ScreenRecorderScaleComboBox * self = NULL;
	gint* scales = NULL;
	gint* _tmp0_;
	gint scales_length1;
	gint _scales_size_;
	gint* _tmp1_;
	gint _tmp1__length1;
#line 32 "../src/Widgets/ScaleComboBox.vala"
	self = (ScreenRecorderScaleComboBox*) g_object_new (object_type, NULL);
#line 33 "../src/Widgets/ScaleComboBox.vala"
	_tmp0_ = g_new0 (gint, 5);
#line 33 "../src/Widgets/ScaleComboBox.vala"
	_tmp0_[0] = 25;
#line 33 "../src/Widgets/ScaleComboBox.vala"
	_tmp0_[1] = 50;
#line 33 "../src/Widgets/ScaleComboBox.vala"
	_tmp0_[2] = 75;
#line 33 "../src/Widgets/ScaleComboBox.vala"
	_tmp0_[3] = 100;
#line 33 "../src/Widgets/ScaleComboBox.vala"
	_tmp0_[4] = 200;
#line 33 "../src/Widgets/ScaleComboBox.vala"
	scales = _tmp0_;
#line 33 "../src/Widgets/ScaleComboBox.vala"
	scales_length1 = 5;
#line 33 "../src/Widgets/ScaleComboBox.vala"
	_scales_size_ = scales_length1;
#line 34 "../src/Widgets/ScaleComboBox.vala"
	_tmp1_ = scales;
#line 34 "../src/Widgets/ScaleComboBox.vala"
	_tmp1__length1 = scales_length1;
#line 148 "ScaleComboBox.c"
	{
		gint* scale_collection = NULL;
		gint scale_collection_length1 = 0;
		gint _scale_collection_size_ = 0;
		gint scale_it = 0;
#line 34 "../src/Widgets/ScaleComboBox.vala"
		scale_collection = _tmp1_;
#line 34 "../src/Widgets/ScaleComboBox.vala"
		scale_collection_length1 = _tmp1__length1;
#line 34 "../src/Widgets/ScaleComboBox.vala"
		for (scale_it = 0; scale_it < scale_collection_length1; scale_it = scale_it + 1) {
#line 160 "ScaleComboBox.c"
			gint scale = 0;
#line 34 "../src/Widgets/ScaleComboBox.vala"
			scale = scale_collection[scale_it];
#line 164 "ScaleComboBox.c"
			{
				gchar* scale_id = NULL;
				gchar* _tmp2_;
				const gchar* _tmp3_;
				const gchar* _tmp4_;
				gchar* _tmp5_;
				gchar* _tmp6_;
#line 35 "../src/Widgets/ScaleComboBox.vala"
				_tmp2_ = g_strdup_printf ("%i", scale);
#line 35 "../src/Widgets/ScaleComboBox.vala"
				scale_id = _tmp2_;
#line 36 "../src/Widgets/ScaleComboBox.vala"
				_tmp3_ = scale_id;
#line 36 "../src/Widgets/ScaleComboBox.vala"
				_tmp4_ = scale_id;
#line 36 "../src/Widgets/ScaleComboBox.vala"
				_tmp5_ = g_strconcat (_tmp4_, "%", NULL);
#line 36 "../src/Widgets/ScaleComboBox.vala"
				_tmp6_ = _tmp5_;
#line 36 "../src/Widgets/ScaleComboBox.vala"
				gtk_combo_box_text_append ((GtkComboBoxText*) self, _tmp3_, _tmp6_);
#line 36 "../src/Widgets/ScaleComboBox.vala"
				_g_free0 (_tmp6_);
#line 34 "../src/Widgets/ScaleComboBox.vala"
				_g_free0 (scale_id);
#line 190 "ScaleComboBox.c"
			}
		}
	}
#line 38 "../src/Widgets/ScaleComboBox.vala"
	g_signal_connect_object ((GtkComboBox*) self, "changed", (GCallback) ___lambda17__gtk_combo_box_changed, self, 0);
#line 32 "../src/Widgets/ScaleComboBox.vala"
	scales = (g_free (scales), NULL);
#line 32 "../src/Widgets/ScaleComboBox.vala"
	return self;
#line 200 "ScaleComboBox.c"
}

ScreenRecorderScaleComboBox*
screen_recorder_scale_combo_box_new (void)
{
#line 32 "../src/Widgets/ScaleComboBox.vala"
	return screen_recorder_scale_combo_box_construct (SCREEN_RECORDER_TYPE_SCALE_COMBO_BOX);
#line 208 "ScaleComboBox.c"
}

gint
screen_recorder_scale_combo_box_get_scale (ScreenRecorderScaleComboBox* self)
{
	gint result;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
#line 25 "../src/Widgets/ScaleComboBox.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 26 "../src/Widgets/ScaleComboBox.vala"
	_tmp0_ = gtk_combo_box_get_active_id ((GtkComboBox*) self);
#line 26 "../src/Widgets/ScaleComboBox.vala"
	_tmp1_ = _tmp0_;
#line 26 "../src/Widgets/ScaleComboBox.vala"
	result = atoi (_tmp1_);
#line 26 "../src/Widgets/ScaleComboBox.vala"
	return result;
#line 227 "ScaleComboBox.c"
}

void
screen_recorder_scale_combo_box_set_scale (ScreenRecorderScaleComboBox* self,
                                           gint value)
{
	gchar* _tmp0_;
	gchar* _tmp1_;
#line 28 "../src/Widgets/ScaleComboBox.vala"
	g_return_if_fail (self != NULL);
#line 29 "../src/Widgets/ScaleComboBox.vala"
	_tmp0_ = g_strdup_printf ("%i", value);
#line 29 "../src/Widgets/ScaleComboBox.vala"
	_tmp1_ = _tmp0_;
#line 29 "../src/Widgets/ScaleComboBox.vala"
	gtk_combo_box_set_active_id ((GtkComboBox*) self, _tmp1_);
#line 29 "../src/Widgets/ScaleComboBox.vala"
	_g_free0 (_tmp1_);
#line 28 "../src/Widgets/ScaleComboBox.vala"
	g_object_notify_by_pspec ((GObject *) self, screen_recorder_scale_combo_box_properties[SCREEN_RECORDER_SCALE_COMBO_BOX_SCALE_PROPERTY]);
#line 248 "ScaleComboBox.c"
}

static void
screen_recorder_scale_combo_box_class_init (ScreenRecorderScaleComboBoxClass * klass,
                                            gpointer klass_data)
{
#line 23 "../src/Widgets/ScaleComboBox.vala"
	screen_recorder_scale_combo_box_parent_class = g_type_class_peek_parent (klass);
#line 23 "../src/Widgets/ScaleComboBox.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_screen_recorder_scale_combo_box_get_property;
#line 23 "../src/Widgets/ScaleComboBox.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_screen_recorder_scale_combo_box_set_property;
#line 23 "../src/Widgets/ScaleComboBox.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), SCREEN_RECORDER_SCALE_COMBO_BOX_SCALE_PROPERTY, screen_recorder_scale_combo_box_properties[SCREEN_RECORDER_SCALE_COMBO_BOX_SCALE_PROPERTY] = g_param_spec_int ("scale", "scale", "scale", G_MININT, G_MAXINT, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 263 "ScaleComboBox.c"
}

static void
screen_recorder_scale_combo_box_instance_init (ScreenRecorderScaleComboBox * self,
                                               gpointer klass)
{
}

static GType
screen_recorder_scale_combo_box_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (ScreenRecorderScaleComboBoxClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) screen_recorder_scale_combo_box_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ScreenRecorderScaleComboBox), 0, (GInstanceInitFunc) screen_recorder_scale_combo_box_instance_init, NULL };
	GType screen_recorder_scale_combo_box_type_id;
	screen_recorder_scale_combo_box_type_id = g_type_register_static (gtk_combo_box_text_get_type (), "ScreenRecorderScaleComboBox", &g_define_type_info, 0);
	return screen_recorder_scale_combo_box_type_id;
}

GType
screen_recorder_scale_combo_box_get_type (void)
{
	static volatile gsize screen_recorder_scale_combo_box_type_id__volatile = 0;
	if (g_once_init_enter (&screen_recorder_scale_combo_box_type_id__volatile)) {
		GType screen_recorder_scale_combo_box_type_id;
		screen_recorder_scale_combo_box_type_id = screen_recorder_scale_combo_box_get_type_once ();
		g_once_init_leave (&screen_recorder_scale_combo_box_type_id__volatile, screen_recorder_scale_combo_box_type_id);
	}
	return screen_recorder_scale_combo_box_type_id__volatile;
}

static void
_vala_screen_recorder_scale_combo_box_get_property (GObject * object,
                                                    guint property_id,
                                                    GValue * value,
                                                    GParamSpec * pspec)
{
	ScreenRecorderScaleComboBox * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, SCREEN_RECORDER_TYPE_SCALE_COMBO_BOX, ScreenRecorderScaleComboBox);
#line 23 "../src/Widgets/ScaleComboBox.vala"
	switch (property_id) {
#line 23 "../src/Widgets/ScaleComboBox.vala"
		case SCREEN_RECORDER_SCALE_COMBO_BOX_SCALE_PROPERTY:
#line 23 "../src/Widgets/ScaleComboBox.vala"
		g_value_set_int (value, screen_recorder_scale_combo_box_get_scale (self));
#line 23 "../src/Widgets/ScaleComboBox.vala"
		break;
#line 309 "ScaleComboBox.c"
		default:
#line 23 "../src/Widgets/ScaleComboBox.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 23 "../src/Widgets/ScaleComboBox.vala"
		break;
#line 315 "ScaleComboBox.c"
	}
}

static void
_vala_screen_recorder_scale_combo_box_set_property (GObject * object,
                                                    guint property_id,
                                                    const GValue * value,
                                                    GParamSpec * pspec)
{
	ScreenRecorderScaleComboBox * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, SCREEN_RECORDER_TYPE_SCALE_COMBO_BOX, ScreenRecorderScaleComboBox);
#line 23 "../src/Widgets/ScaleComboBox.vala"
	switch (property_id) {
#line 23 "../src/Widgets/ScaleComboBox.vala"
		case SCREEN_RECORDER_SCALE_COMBO_BOX_SCALE_PROPERTY:
#line 23 "../src/Widgets/ScaleComboBox.vala"
		screen_recorder_scale_combo_box_set_scale (self, g_value_get_int (value));
#line 23 "../src/Widgets/ScaleComboBox.vala"
		break;
#line 335 "ScaleComboBox.c"
		default:
#line 23 "../src/Widgets/ScaleComboBox.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 23 "../src/Widgets/ScaleComboBox.vala"
		break;
#line 341 "ScaleComboBox.c"
	}
}

