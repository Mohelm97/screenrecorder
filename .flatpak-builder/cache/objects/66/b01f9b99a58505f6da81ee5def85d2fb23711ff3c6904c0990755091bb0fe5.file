/* FFmpegWrapper.c generated by valac 0.54.3, the Vala compiler
 * generated from FFmpegWrapper.vala, do not modify */

/*
* Copyright (c) 2018 mohelm97 (https://github.com/mohelm97/screenrecorder)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Mohammed ALMadhoun <mohelm97@gmail.com>
*/

#include <glib-object.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <float.h>
#include <math.h>

#if !defined(VALA_EXTERN)
#if defined(_MSC_VER)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define SCREEN_RECORDER_TYPE_FFMPEG_WRAPPER (screen_recorder_ffmpeg_wrapper_get_type ())
#define SCREEN_RECORDER_FFMPEG_WRAPPER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SCREEN_RECORDER_TYPE_FFMPEG_WRAPPER, ScreenRecorderFFmpegWrapper))
#define SCREEN_RECORDER_FFMPEG_WRAPPER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SCREEN_RECORDER_TYPE_FFMPEG_WRAPPER, ScreenRecorderFFmpegWrapperClass))
#define SCREEN_RECORDER_IS_FFMPEG_WRAPPER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SCREEN_RECORDER_TYPE_FFMPEG_WRAPPER))
#define SCREEN_RECORDER_IS_FFMPEG_WRAPPER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SCREEN_RECORDER_TYPE_FFMPEG_WRAPPER))
#define SCREEN_RECORDER_FFMPEG_WRAPPER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SCREEN_RECORDER_TYPE_FFMPEG_WRAPPER, ScreenRecorderFFmpegWrapperClass))

typedef struct _ScreenRecorderFFmpegWrapper ScreenRecorderFFmpegWrapper;
typedef struct _ScreenRecorderFFmpegWrapperClass ScreenRecorderFFmpegWrapperClass;
typedef struct _ScreenRecorderFFmpegWrapperPrivate ScreenRecorderFFmpegWrapperPrivate;
enum  {
	SCREEN_RECORDER_FFMPEG_WRAPPER_0_PROPERTY,
	SCREEN_RECORDER_FFMPEG_WRAPPER_NUM_PROPERTIES
};
static GParamSpec* screen_recorder_ffmpeg_wrapper_properties[SCREEN_RECORDER_FFMPEG_WRAPPER_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_regex_unref0(var) ((var == NULL) ? NULL : (var = (g_regex_unref (var), NULL)))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
#define _g_match_info_unref0(var) ((var == NULL) ? NULL : (var = (g_match_info_unref (var), NULL)))
typedef struct _ScreenRecorderFfmpegWrapperRenderFileData ScreenRecorderFfmpegWrapperRenderFileData;

struct _ScreenRecorderFFmpegWrapper {
	GObject parent_instance;
	ScreenRecorderFFmpegWrapperPrivate * priv;
};

struct _ScreenRecorderFFmpegWrapperClass {
	GObjectClass parent_class;
};

struct _ScreenRecorderFFmpegWrapperPrivate {
	GSubprocess* subprocess;
};

struct _ScreenRecorderFfmpegWrapperRenderFileData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	gchar* inputpath;
	gchar* outputpath;
	gchar* extension;
	gboolean result;
	gboolean return_value;
	gchar** spawn_args;
	gchar* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	gchar* _tmp5_;
	gchar** _tmp6_;
	gint spawn_args_length1;
	gint _spawn_args_size_;
	gchar* _tmp7_;
	gchar* _tmp8_;
	gchar* _tmp9_;
	gchar* _tmp10_;
	gchar* _tmp11_;
	gchar* _tmp12_;
	gchar** _tmp13_;
	gchar** _tmp14_;
	gint _tmp14__length1;
	gchar* _tmp15_;
	gchar* _tmp16_;
	GSubprocessLauncher* launcher;
	GSubprocessLauncher* _tmp17_;
	GSubprocess* render_subprocess;
	GSubprocessLauncher* _tmp18_;
	gchar** _tmp19_;
	gint _tmp19__length1;
	GSubprocess* _tmp20_;
	gboolean _tmp21_;
	GSubprocess* _tmp22_;
	GError* e;
	GError* _tmp23_;
	const gchar* _tmp24_;
	GError* _inner_error0_;
};

static gint ScreenRecorderFFmpegWrapper_private_offset;
static gpointer screen_recorder_ffmpeg_wrapper_parent_class = NULL;

VALA_EXTERN GType screen_recorder_ffmpeg_wrapper_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ScreenRecorderFFmpegWrapper, g_object_unref)
VALA_EXTERN ScreenRecorderFFmpegWrapper* screen_recorder_ffmpeg_wrapper_new (const gchar* filepath,
                                                                 const gchar* ext,
                                                                 gint framerate,
                                                                 gint start_x,
                                                                 gint start_y,
                                                                 gint width,
                                                                 gint height,
                                                                 gfloat scale,
                                                                 gboolean show_mouse,
                                                                 gboolean show_borders,
                                                                 gboolean record_cmp,
                                                                 gboolean record_mic);
VALA_EXTERN ScreenRecorderFFmpegWrapper* screen_recorder_ffmpeg_wrapper_construct (GType object_type,
                                                                       const gchar* filepath,
                                                                       const gchar* ext,
                                                                       gint framerate,
                                                                       gint start_x,
                                                                       gint start_y,
                                                                       gint width,
                                                                       gint height,
                                                                       gfloat scale,
                                                                       gboolean show_mouse,
                                                                       gboolean show_borders,
                                                                       gboolean record_cmp,
                                                                       gboolean record_mic);
static void _vala_array_add1 (gchar** * array,
                       gint* length,
                       gint* size,
                       gchar* value);
static void _vala_array_add2 (gchar** * array,
                       gint* length,
                       gint* size,
                       gchar* value);
static void _vala_array_add3 (gchar** * array,
                       gint* length,
                       gint* size,
                       gchar* value);
static void _vala_array_add4 (gchar** * array,
                       gint* length,
                       gint* size,
                       gchar* value);
static gchar* screen_recorder_ffmpeg_wrapper_get_default_audio_output (ScreenRecorderFFmpegWrapper* self);
static void _vala_array_add5 (gchar** * array,
                       gint* length,
                       gint* size,
                       gchar* value);
static void _vala_array_add6 (gchar** * array,
                       gint* length,
                       gint* size,
                       gchar* value);
static void _vala_array_add7 (gchar** * array,
                       gint* length,
                       gint* size,
                       gchar* value);
static void _vala_array_add8 (gchar** * array,
                       gint* length,
                       gint* size,
                       gchar* value);
static void _vala_array_add9 (gchar** * array,
                       gint* length,
                       gint* size,
                       gchar* value);
static void _vala_array_add10 (gchar** * array,
                        gint* length,
                        gint* size,
                        gchar* value);
static void _vala_array_add11 (gchar** * array,
                        gint* length,
                        gint* size,
                        gchar* value);
static void _vala_array_add12 (gchar** * array,
                        gint* length,
                        gint* size,
                        gchar* value);
static void _vala_array_add13 (gchar** * array,
                        gint* length,
                        gint* size,
                        gchar* value);
static void _vala_array_add14 (gchar** * array,
                        gint* length,
                        gint* size,
                        gchar* value);
static void _vala_array_add15 (gchar** * array,
                        gint* length,
                        gint* size,
                        gchar* value);
static void _vala_array_add16 (gchar** * array,
                        gint* length,
                        gint* size,
                        gchar* value);
static void _vala_array_add17 (gchar** * array,
                        gint* length,
                        gint* size,
                        gchar* value);
VALA_EXTERN void screen_recorder_ffmpeg_wrapper_stop (ScreenRecorderFFmpegWrapper* self);
static void screen_recorder_ffmpeg_wrapper_render_file_data_free (gpointer _data);
VALA_EXTERN void screen_recorder_ffmpeg_wrapper_render_file (const gchar* inputpath,
                                                 const gchar* outputpath,
                                                 const gchar* extension,
                                                 GAsyncReadyCallback _callback_,
                                                 gpointer _user_data_);
VALA_EXTERN gboolean screen_recorder_ffmpeg_wrapper_render_file_finish (GAsyncResult* _res_);
static gboolean screen_recorder_ffmpeg_wrapper_render_file_co (ScreenRecorderFfmpegWrapperRenderFileData* _data_);
static void screen_recorder_ffmpeg_wrapper_render_file_ready (GObject* source_object,
                                                       GAsyncResult* _res_,
                                                       gpointer _user_data_);
static void screen_recorder_ffmpeg_wrapper_finalize (GObject * obj);
static GType screen_recorder_ffmpeg_wrapper_get_type_once (void);
static void _vala_array_destroy (gpointer array,
                          gssize array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gssize array_length,
                       GDestroyNotify destroy_func);

static inline gpointer
screen_recorder_ffmpeg_wrapper_get_instance_private (ScreenRecorderFFmpegWrapper* self)
{
	return G_STRUCT_MEMBER_P (self, ScreenRecorderFFmpegWrapper_private_offset);
}

static void
_vala_array_add1 (gchar** * array,
                  gint* length,
                  gint* size,
                  gchar* value)
{
#line 59 "../src/FFmpegWrapper.vala"
	if ((*length) == (*size)) {
#line 59 "../src/FFmpegWrapper.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 59 "../src/FFmpegWrapper.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 263 "FFmpegWrapper.c"
	}
#line 59 "../src/FFmpegWrapper.vala"
	(*array)[(*length)++] = value;
#line 59 "../src/FFmpegWrapper.vala"
	(*array)[*length] = NULL;
#line 269 "FFmpegWrapper.c"
}

static void
_vala_array_add2 (gchar** * array,
                  gint* length,
                  gint* size,
                  gchar* value)
{
#line 60 "../src/FFmpegWrapper.vala"
	if ((*length) == (*size)) {
#line 60 "../src/FFmpegWrapper.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 60 "../src/FFmpegWrapper.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 284 "FFmpegWrapper.c"
	}
#line 60 "../src/FFmpegWrapper.vala"
	(*array)[(*length)++] = value;
#line 60 "../src/FFmpegWrapper.vala"
	(*array)[*length] = NULL;
#line 290 "FFmpegWrapper.c"
}

static void
_vala_array_add3 (gchar** * array,
                  gint* length,
                  gint* size,
                  gchar* value)
{
#line 61 "../src/FFmpegWrapper.vala"
	if ((*length) == (*size)) {
#line 61 "../src/FFmpegWrapper.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 61 "../src/FFmpegWrapper.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 305 "FFmpegWrapper.c"
	}
#line 61 "../src/FFmpegWrapper.vala"
	(*array)[(*length)++] = value;
#line 61 "../src/FFmpegWrapper.vala"
	(*array)[*length] = NULL;
#line 311 "FFmpegWrapper.c"
}

static void
_vala_array_add4 (gchar** * array,
                  gint* length,
                  gint* size,
                  gchar* value)
{
#line 62 "../src/FFmpegWrapper.vala"
	if ((*length) == (*size)) {
#line 62 "../src/FFmpegWrapper.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 62 "../src/FFmpegWrapper.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 326 "FFmpegWrapper.c"
	}
#line 62 "../src/FFmpegWrapper.vala"
	(*array)[(*length)++] = value;
#line 62 "../src/FFmpegWrapper.vala"
	(*array)[*length] = NULL;
#line 332 "FFmpegWrapper.c"
}

static void
_vala_array_add5 (gchar** * array,
                  gint* length,
                  gint* size,
                  gchar* value)
{
#line 67 "../src/FFmpegWrapper.vala"
	if ((*length) == (*size)) {
#line 67 "../src/FFmpegWrapper.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 67 "../src/FFmpegWrapper.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 347 "FFmpegWrapper.c"
	}
#line 67 "../src/FFmpegWrapper.vala"
	(*array)[(*length)++] = value;
#line 67 "../src/FFmpegWrapper.vala"
	(*array)[*length] = NULL;
#line 353 "FFmpegWrapper.c"
}

static void
_vala_array_add6 (gchar** * array,
                  gint* length,
                  gint* size,
                  gchar* value)
{
#line 68 "../src/FFmpegWrapper.vala"
	if ((*length) == (*size)) {
#line 68 "../src/FFmpegWrapper.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 68 "../src/FFmpegWrapper.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 368 "FFmpegWrapper.c"
	}
#line 68 "../src/FFmpegWrapper.vala"
	(*array)[(*length)++] = value;
#line 68 "../src/FFmpegWrapper.vala"
	(*array)[*length] = NULL;
#line 374 "FFmpegWrapper.c"
}

static void
_vala_array_add7 (gchar** * array,
                  gint* length,
                  gint* size,
                  gchar* value)
{
#line 69 "../src/FFmpegWrapper.vala"
	if ((*length) == (*size)) {
#line 69 "../src/FFmpegWrapper.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 69 "../src/FFmpegWrapper.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 389 "FFmpegWrapper.c"
	}
#line 69 "../src/FFmpegWrapper.vala"
	(*array)[(*length)++] = value;
#line 69 "../src/FFmpegWrapper.vala"
	(*array)[*length] = NULL;
#line 395 "FFmpegWrapper.c"
}

static void
_vala_array_add8 (gchar** * array,
                  gint* length,
                  gint* size,
                  gchar* value)
{
#line 70 "../src/FFmpegWrapper.vala"
	if ((*length) == (*size)) {
#line 70 "../src/FFmpegWrapper.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 70 "../src/FFmpegWrapper.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 410 "FFmpegWrapper.c"
	}
#line 70 "../src/FFmpegWrapper.vala"
	(*array)[(*length)++] = value;
#line 70 "../src/FFmpegWrapper.vala"
	(*array)[*length] = NULL;
#line 416 "FFmpegWrapper.c"
}

static void
_vala_array_add9 (gchar** * array,
                  gint* length,
                  gint* size,
                  gchar* value)
{
#line 72 "../src/FFmpegWrapper.vala"
	if ((*length) == (*size)) {
#line 72 "../src/FFmpegWrapper.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 72 "../src/FFmpegWrapper.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 431 "FFmpegWrapper.c"
	}
#line 72 "../src/FFmpegWrapper.vala"
	(*array)[(*length)++] = value;
#line 72 "../src/FFmpegWrapper.vala"
	(*array)[*length] = NULL;
#line 437 "FFmpegWrapper.c"
}

static void
_vala_array_add10 (gchar** * array,
                   gint* length,
                   gint* size,
                   gchar* value)
{
#line 73 "../src/FFmpegWrapper.vala"
	if ((*length) == (*size)) {
#line 73 "../src/FFmpegWrapper.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 73 "../src/FFmpegWrapper.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 452 "FFmpegWrapper.c"
	}
#line 73 "../src/FFmpegWrapper.vala"
	(*array)[(*length)++] = value;
#line 73 "../src/FFmpegWrapper.vala"
	(*array)[*length] = NULL;
#line 458 "FFmpegWrapper.c"
}

static void
_vala_array_add11 (gchar** * array,
                   gint* length,
                   gint* size,
                   gchar* value)
{
#line 74 "../src/FFmpegWrapper.vala"
	if ((*length) == (*size)) {
#line 74 "../src/FFmpegWrapper.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 74 "../src/FFmpegWrapper.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 473 "FFmpegWrapper.c"
	}
#line 74 "../src/FFmpegWrapper.vala"
	(*array)[(*length)++] = value;
#line 74 "../src/FFmpegWrapper.vala"
	(*array)[*length] = NULL;
#line 479 "FFmpegWrapper.c"
}

static void
_vala_array_add12 (gchar** * array,
                   gint* length,
                   gint* size,
                   gchar* value)
{
#line 75 "../src/FFmpegWrapper.vala"
	if ((*length) == (*size)) {
#line 75 "../src/FFmpegWrapper.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 75 "../src/FFmpegWrapper.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 494 "FFmpegWrapper.c"
	}
#line 75 "../src/FFmpegWrapper.vala"
	(*array)[(*length)++] = value;
#line 75 "../src/FFmpegWrapper.vala"
	(*array)[*length] = NULL;
#line 500 "FFmpegWrapper.c"
}

static void
_vala_array_add13 (gchar** * array,
                   gint* length,
                   gint* size,
                   gchar* value)
{
#line 79 "../src/FFmpegWrapper.vala"
	if ((*length) == (*size)) {
#line 79 "../src/FFmpegWrapper.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 79 "../src/FFmpegWrapper.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 515 "FFmpegWrapper.c"
	}
#line 79 "../src/FFmpegWrapper.vala"
	(*array)[(*length)++] = value;
#line 79 "../src/FFmpegWrapper.vala"
	(*array)[*length] = NULL;
#line 521 "FFmpegWrapper.c"
}

static void
_vala_array_add14 (gchar** * array,
                   gint* length,
                   gint* size,
                   gchar* value)
{
#line 80 "../src/FFmpegWrapper.vala"
	if ((*length) == (*size)) {
#line 80 "../src/FFmpegWrapper.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 80 "../src/FFmpegWrapper.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 536 "FFmpegWrapper.c"
	}
#line 80 "../src/FFmpegWrapper.vala"
	(*array)[(*length)++] = value;
#line 80 "../src/FFmpegWrapper.vala"
	(*array)[*length] = NULL;
#line 542 "FFmpegWrapper.c"
}

static void
_vala_array_add15 (gchar** * array,
                   gint* length,
                   gint* size,
                   gchar* value)
{
#line 83 "../src/FFmpegWrapper.vala"
	if ((*length) == (*size)) {
#line 83 "../src/FFmpegWrapper.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 83 "../src/FFmpegWrapper.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 557 "FFmpegWrapper.c"
	}
#line 83 "../src/FFmpegWrapper.vala"
	(*array)[(*length)++] = value;
#line 83 "../src/FFmpegWrapper.vala"
	(*array)[*length] = NULL;
#line 563 "FFmpegWrapper.c"
}

static gchar*
string_replace (const gchar* self,
                const gchar* old,
                const gchar* replacement)
{
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	GError* _inner_error0_ = NULL;
	gchar* result = NULL;
#line 1534 "glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, NULL);
#line 1534 "glib-2.0.vapi"
	g_return_val_if_fail (old != NULL, NULL);
#line 1534 "glib-2.0.vapi"
	g_return_val_if_fail (replacement != NULL, NULL);
#line 1535 "glib-2.0.vapi"
	if ((*((gchar*) self)) == '\0') {
#line 1535 "glib-2.0.vapi"
		_tmp1_ = TRUE;
#line 585 "FFmpegWrapper.c"
	} else {
#line 1535 "glib-2.0.vapi"
		_tmp1_ = (*((gchar*) old)) == '\0';
#line 589 "FFmpegWrapper.c"
	}
#line 1535 "glib-2.0.vapi"
	if (_tmp1_) {
#line 1535 "glib-2.0.vapi"
		_tmp0_ = TRUE;
#line 595 "FFmpegWrapper.c"
	} else {
#line 1535 "glib-2.0.vapi"
		_tmp0_ = g_strcmp0 (old, replacement) == 0;
#line 599 "FFmpegWrapper.c"
	}
#line 1535 "glib-2.0.vapi"
	if (_tmp0_) {
#line 603 "FFmpegWrapper.c"
		gchar* _tmp2_;
#line 1536 "glib-2.0.vapi"
		_tmp2_ = g_strdup (self);
#line 1536 "glib-2.0.vapi"
		result = _tmp2_;
#line 1536 "glib-2.0.vapi"
		return result;
#line 611 "FFmpegWrapper.c"
	}
	{
		GRegex* regex = NULL;
		gchar* _tmp3_;
		gchar* _tmp4_;
		GRegex* _tmp5_;
		GRegex* _tmp6_;
		gchar* _tmp7_ = NULL;
		GRegex* _tmp8_;
		gchar* _tmp9_;
		gchar* _tmp10_;
#line 1539 "glib-2.0.vapi"
		_tmp3_ = g_regex_escape_string (old, -1);
#line 1539 "glib-2.0.vapi"
		_tmp4_ = _tmp3_;
#line 1539 "glib-2.0.vapi"
		_tmp5_ = g_regex_new (_tmp4_, 0, 0, &_inner_error0_);
#line 1539 "glib-2.0.vapi"
		_tmp6_ = _tmp5_;
#line 1539 "glib-2.0.vapi"
		_g_free0 (_tmp4_);
#line 1539 "glib-2.0.vapi"
		regex = _tmp6_;
#line 1539 "glib-2.0.vapi"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 1539 "glib-2.0.vapi"
			if (_inner_error0_->domain == G_REGEX_ERROR) {
#line 639 "FFmpegWrapper.c"
				goto __catch0_g_regex_error;
			}
#line 1539 "glib-2.0.vapi"
			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 1539 "glib-2.0.vapi"
			g_clear_error (&_inner_error0_);
#line 1539 "glib-2.0.vapi"
			return NULL;
#line 648 "FFmpegWrapper.c"
		}
#line 1540 "glib-2.0.vapi"
		_tmp8_ = regex;
#line 1540 "glib-2.0.vapi"
		_tmp9_ = g_regex_replace_literal (_tmp8_, self, (gssize) -1, 0, replacement, 0, &_inner_error0_);
#line 1540 "glib-2.0.vapi"
		_tmp7_ = _tmp9_;
#line 1540 "glib-2.0.vapi"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 1540 "glib-2.0.vapi"
			_g_regex_unref0 (regex);
#line 1540 "glib-2.0.vapi"
			if (_inner_error0_->domain == G_REGEX_ERROR) {
#line 662 "FFmpegWrapper.c"
				goto __catch0_g_regex_error;
			}
#line 1540 "glib-2.0.vapi"
			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 1540 "glib-2.0.vapi"
			g_clear_error (&_inner_error0_);
#line 1540 "glib-2.0.vapi"
			return NULL;
#line 671 "FFmpegWrapper.c"
		}
#line 1540 "glib-2.0.vapi"
		_tmp10_ = _tmp7_;
#line 1540 "glib-2.0.vapi"
		_tmp7_ = NULL;
#line 1540 "glib-2.0.vapi"
		result = _tmp10_;
#line 1540 "glib-2.0.vapi"
		_g_free0 (_tmp7_);
#line 1540 "glib-2.0.vapi"
		_g_regex_unref0 (regex);
#line 1540 "glib-2.0.vapi"
		return result;
#line 685 "FFmpegWrapper.c"
	}
	goto __finally0;
	__catch0_g_regex_error:
	{
#line 1538 "glib-2.0.vapi"
		g_clear_error (&_inner_error0_);
#line 1542 "glib-2.0.vapi"
		g_assert_not_reached ();
#line 694 "FFmpegWrapper.c"
	}
	__finally0:
#line 1538 "glib-2.0.vapi"
	g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 1538 "glib-2.0.vapi"
	g_clear_error (&_inner_error0_);
#line 1538 "glib-2.0.vapi"
	return NULL;
#line 703 "FFmpegWrapper.c"
}

static void
_vala_array_add16 (gchar** * array,
                   gint* length,
                   gint* size,
                   gchar* value)
{
#line 88 "../src/FFmpegWrapper.vala"
	if ((*length) == (*size)) {
#line 88 "../src/FFmpegWrapper.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 88 "../src/FFmpegWrapper.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 718 "FFmpegWrapper.c"
	}
#line 88 "../src/FFmpegWrapper.vala"
	(*array)[(*length)++] = value;
#line 88 "../src/FFmpegWrapper.vala"
	(*array)[*length] = NULL;
#line 724 "FFmpegWrapper.c"
}

static void
_vala_array_add17 (gchar** * array,
                   gint* length,
                   gint* size,
                   gchar* value)
{
#line 90 "../src/FFmpegWrapper.vala"
	if ((*length) == (*size)) {
#line 90 "../src/FFmpegWrapper.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 90 "../src/FFmpegWrapper.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 739 "FFmpegWrapper.c"
	}
#line 90 "../src/FFmpegWrapper.vala"
	(*array)[(*length)++] = value;
#line 90 "../src/FFmpegWrapper.vala"
	(*array)[*length] = NULL;
#line 745 "FFmpegWrapper.c"
}

static gchar*
_vala_g_strjoinv (const gchar* separator,
                  gchar** str_array,
                  gint str_array_length1)
{
	gboolean _tmp0_ = FALSE;
	gchar* result = NULL;
#line 1200 "glib-2.0.vapi"
	if (separator == NULL) {
#line 1201 "glib-2.0.vapi"
		separator = "";
#line 759 "FFmpegWrapper.c"
	}
#line 1203 "glib-2.0.vapi"
	if (str_array != NULL) {
#line 763 "FFmpegWrapper.c"
		gboolean _tmp1_ = FALSE;
#line 1203 "glib-2.0.vapi"
		if (str_array_length1 > 0) {
#line 1203 "glib-2.0.vapi"
			_tmp1_ = TRUE;
#line 769 "FFmpegWrapper.c"
		} else {
			gboolean _tmp2_ = FALSE;
#line 1203 "glib-2.0.vapi"
			if (str_array_length1 == -1) {
#line 774 "FFmpegWrapper.c"
				const gchar* _tmp3_;
#line 1203 "glib-2.0.vapi"
				_tmp3_ = str_array[0];
#line 1203 "glib-2.0.vapi"
				_tmp2_ = _tmp3_ != NULL;
#line 780 "FFmpegWrapper.c"
			} else {
#line 1203 "glib-2.0.vapi"
				_tmp2_ = FALSE;
#line 784 "FFmpegWrapper.c"
			}
#line 1203 "glib-2.0.vapi"
			_tmp1_ = _tmp2_;
#line 788 "FFmpegWrapper.c"
		}
#line 1203 "glib-2.0.vapi"
		_tmp0_ = _tmp1_;
#line 792 "FFmpegWrapper.c"
	} else {
#line 1203 "glib-2.0.vapi"
		_tmp0_ = FALSE;
#line 796 "FFmpegWrapper.c"
	}
#line 1203 "glib-2.0.vapi"
	if (_tmp0_) {
#line 800 "FFmpegWrapper.c"
		gint i = 0;
		gsize len = 0UL;
		gint _tmp16_;
		gint _tmp17_;
		const gchar* res = NULL;
		void* _tmp18_;
		void* ptr = NULL;
		const gchar* _tmp19_;
		const gchar* _tmp20_;
		void* _tmp21_;
		const gchar* _tmp31_;
#line 1205 "glib-2.0.vapi"
		len = (gsize) 1;
#line 814 "FFmpegWrapper.c"
		{
			gboolean _tmp4_ = FALSE;
#line 1206 "glib-2.0.vapi"
			i = 0;
#line 1206 "glib-2.0.vapi"
			_tmp4_ = TRUE;
#line 1206 "glib-2.0.vapi"
			while (TRUE) {
#line 823 "FFmpegWrapper.c"
				gboolean _tmp6_ = FALSE;
				gboolean _tmp7_ = FALSE;
				gint _tmp10_ = 0;
				const gchar* _tmp11_;
#line 1206 "glib-2.0.vapi"
				if (!_tmp4_) {
#line 830 "FFmpegWrapper.c"
					gint _tmp5_;
#line 1206 "glib-2.0.vapi"
					_tmp5_ = i;
#line 1206 "glib-2.0.vapi"
					i = _tmp5_ + 1;
#line 836 "FFmpegWrapper.c"
				}
#line 1206 "glib-2.0.vapi"
				_tmp4_ = FALSE;
#line 1206 "glib-2.0.vapi"
				if (str_array_length1 != -1) {
#line 1206 "glib-2.0.vapi"
					_tmp7_ = i < str_array_length1;
#line 844 "FFmpegWrapper.c"
				} else {
#line 1206 "glib-2.0.vapi"
					_tmp7_ = FALSE;
#line 848 "FFmpegWrapper.c"
				}
#line 1206 "glib-2.0.vapi"
				if (_tmp7_) {
#line 1206 "glib-2.0.vapi"
					_tmp6_ = TRUE;
#line 854 "FFmpegWrapper.c"
				} else {
					gboolean _tmp8_ = FALSE;
#line 1206 "glib-2.0.vapi"
					if (str_array_length1 == -1) {
#line 859 "FFmpegWrapper.c"
						const gchar* _tmp9_;
#line 1206 "glib-2.0.vapi"
						_tmp9_ = str_array[i];
#line 1206 "glib-2.0.vapi"
						_tmp8_ = _tmp9_ != NULL;
#line 865 "FFmpegWrapper.c"
					} else {
#line 1206 "glib-2.0.vapi"
						_tmp8_ = FALSE;
#line 869 "FFmpegWrapper.c"
					}
#line 1206 "glib-2.0.vapi"
					_tmp6_ = _tmp8_;
#line 873 "FFmpegWrapper.c"
				}
#line 1206 "glib-2.0.vapi"
				if (!_tmp6_) {
#line 1206 "glib-2.0.vapi"
					break;
#line 879 "FFmpegWrapper.c"
				}
#line 1207 "glib-2.0.vapi"
				_tmp11_ = str_array[i];
#line 1207 "glib-2.0.vapi"
				if (_tmp11_ != NULL) {
#line 885 "FFmpegWrapper.c"
					const gchar* _tmp12_;
					gint _tmp13_;
					gint _tmp14_;
#line 1207 "glib-2.0.vapi"
					_tmp12_ = str_array[i];
#line 1207 "glib-2.0.vapi"
					_tmp13_ = strlen ((const gchar*) _tmp12_);
#line 1207 "glib-2.0.vapi"
					_tmp14_ = _tmp13_;
#line 1207 "glib-2.0.vapi"
					_tmp10_ = _tmp14_;
#line 897 "FFmpegWrapper.c"
				} else {
#line 1207 "glib-2.0.vapi"
					_tmp10_ = 0;
#line 901 "FFmpegWrapper.c"
				}
#line 1207 "glib-2.0.vapi"
				len += (gsize) _tmp10_;
#line 905 "FFmpegWrapper.c"
			}
		}
#line 1209 "glib-2.0.vapi"
		if (i == 0) {
#line 910 "FFmpegWrapper.c"
			gchar* _tmp15_;
#line 1210 "glib-2.0.vapi"
			_tmp15_ = g_strdup ("");
#line 1210 "glib-2.0.vapi"
			result = _tmp15_;
#line 1210 "glib-2.0.vapi"
			return result;
#line 918 "FFmpegWrapper.c"
		}
#line 1212 "glib-2.0.vapi"
		str_array_length1 = i;
#line 1213 "glib-2.0.vapi"
		_tmp16_ = strlen ((const gchar*) separator);
#line 1213 "glib-2.0.vapi"
		_tmp17_ = _tmp16_;
#line 1213 "glib-2.0.vapi"
		len += (gsize) (_tmp17_ * (i - 1));
#line 1215 "glib-2.0.vapi"
		_tmp18_ = g_malloc (len);
#line 1215 "glib-2.0.vapi"
		res = _tmp18_;
#line 1216 "glib-2.0.vapi"
		_tmp19_ = res;
#line 1216 "glib-2.0.vapi"
		_tmp20_ = str_array[0];
#line 1216 "glib-2.0.vapi"
		_tmp21_ = g_stpcpy ((void*) _tmp19_, (const gchar*) _tmp20_);
#line 1216 "glib-2.0.vapi"
		ptr = _tmp21_;
#line 940 "FFmpegWrapper.c"
		{
			gboolean _tmp22_ = FALSE;
#line 1217 "glib-2.0.vapi"
			i = 1;
#line 1217 "glib-2.0.vapi"
			_tmp22_ = TRUE;
#line 1217 "glib-2.0.vapi"
			while (TRUE) {
#line 949 "FFmpegWrapper.c"
				void* _tmp24_;
				void* _tmp25_;
				const gchar* _tmp26_ = NULL;
				const gchar* _tmp27_;
				void* _tmp29_;
				void* _tmp30_;
#line 1217 "glib-2.0.vapi"
				if (!_tmp22_) {
#line 958 "FFmpegWrapper.c"
					gint _tmp23_;
#line 1217 "glib-2.0.vapi"
					_tmp23_ = i;
#line 1217 "glib-2.0.vapi"
					i = _tmp23_ + 1;
#line 964 "FFmpegWrapper.c"
				}
#line 1217 "glib-2.0.vapi"
				_tmp22_ = FALSE;
#line 1217 "glib-2.0.vapi"
				if (!(i < str_array_length1)) {
#line 1217 "glib-2.0.vapi"
					break;
#line 972 "FFmpegWrapper.c"
				}
#line 1218 "glib-2.0.vapi"
				_tmp24_ = ptr;
#line 1218 "glib-2.0.vapi"
				_tmp25_ = g_stpcpy (_tmp24_, (const gchar*) separator);
#line 1218 "glib-2.0.vapi"
				ptr = _tmp25_;
#line 1219 "glib-2.0.vapi"
				_tmp27_ = str_array[i];
#line 1219 "glib-2.0.vapi"
				if (_tmp27_ != NULL) {
#line 984 "FFmpegWrapper.c"
					const gchar* _tmp28_;
#line 1219 "glib-2.0.vapi"
					_tmp28_ = str_array[i];
#line 1219 "glib-2.0.vapi"
					_tmp26_ = (const gchar*) _tmp28_;
#line 990 "FFmpegWrapper.c"
				} else {
#line 1219 "glib-2.0.vapi"
					_tmp26_ = "";
#line 994 "FFmpegWrapper.c"
				}
#line 1219 "glib-2.0.vapi"
				_tmp29_ = ptr;
#line 1219 "glib-2.0.vapi"
				_tmp30_ = g_stpcpy (_tmp29_, _tmp26_);
#line 1219 "glib-2.0.vapi"
				ptr = _tmp30_;
#line 1002 "FFmpegWrapper.c"
			}
		}
#line 1222 "glib-2.0.vapi"
		_tmp31_ = res;
#line 1222 "glib-2.0.vapi"
		res = NULL;
#line 1222 "glib-2.0.vapi"
		result = (gchar*) _tmp31_;
#line 1222 "glib-2.0.vapi"
		return result;
#line 1013 "FFmpegWrapper.c"
	} else {
		gchar* _tmp32_;
#line 1224 "glib-2.0.vapi"
		_tmp32_ = g_strdup ("");
#line 1224 "glib-2.0.vapi"
		result = _tmp32_;
#line 1224 "glib-2.0.vapi"
		return result;
#line 1022 "FFmpegWrapper.c"
	}
}

ScreenRecorderFFmpegWrapper*
screen_recorder_ffmpeg_wrapper_construct (GType object_type,
                                          const gchar* filepath,
                                          const gchar* ext,
                                          gint framerate,
                                          gint start_x,
                                          gint start_y,
                                          gint width,
                                          gint height,
                                          gfloat scale,
                                          gboolean show_mouse,
                                          gboolean show_borders,
                                          gboolean record_cmp,
                                          gboolean record_mic)
{
	ScreenRecorderFFmpegWrapper * self = NULL;
	GError* _inner_error0_ = NULL;
#line 26 "../src/FFmpegWrapper.vala"
	g_return_val_if_fail (filepath != NULL, NULL);
#line 26 "../src/FFmpegWrapper.vala"
	g_return_val_if_fail (ext != NULL, NULL);
#line 26 "../src/FFmpegWrapper.vala"
	self = (ScreenRecorderFFmpegWrapper*) g_object_new (object_type, NULL);
#line 1049 "FFmpegWrapper.c"
	{
		gchar* display = NULL;
		const gchar* _tmp0_;
		gchar* _tmp1_;
		const gchar* _tmp2_;
		gboolean is_gif = FALSE;
		const gchar* _tmp4_ = NULL;
		const gchar* _tmp5_ = NULL;
		gchar** spawn_args = NULL;
		gchar* _tmp6_;
		gchar* _tmp7_;
		gchar* _tmp8_;
		gchar* _tmp9_;
		gchar* _tmp10_;
		gchar* _tmp11_;
		gchar* _tmp12_;
		gchar* _tmp13_;
		gchar* _tmp14_;
		gchar* _tmp15_;
		gchar* _tmp16_;
		gchar* _tmp17_;
		gchar* _tmp18_;
		gchar* _tmp19_;
		gchar* _tmp20_;
		const gchar* _tmp21_;
		gchar* _tmp22_;
		gchar** _tmp23_;
		gint spawn_args_length1;
		gint _spawn_args_size_;
		gboolean _tmp24_ = FALSE;
		gboolean _tmp29_ = FALSE;
		gchar* _tmp41_;
		gchar* _tmp42_;
		gchar* _tmp43_;
		gchar* filter = NULL;
		gchar* _tmp44_;
		gchar* _tmp45_;
		gchar* _tmp46_;
		gchar* _tmp47_;
		const gchar* _tmp50_;
		gchar* _tmp51_;
		gchar* _tmp52_;
		gchar** _tmp53_;
		gint _tmp53__length1;
		gchar* _tmp54_;
		gchar* _tmp55_;
		GSubprocessLauncher* launcher = NULL;
		GSubprocessLauncher* _tmp56_;
		GSubprocess* _tmp57_ = NULL;
		gchar** _tmp58_;
		gint _tmp58__length1;
		GSubprocess* _tmp59_;
		GSubprocess* _tmp60_;
#line 40 "../src/FFmpegWrapper.vala"
		width = width + (width % 2);
#line 41 "../src/FFmpegWrapper.vala"
		height = height + (height % 2);
#line 42 "../src/FFmpegWrapper.vala"
		_tmp0_ = g_getenv ("DISPLAY");
#line 42 "../src/FFmpegWrapper.vala"
		_tmp1_ = g_strdup (_tmp0_);
#line 42 "../src/FFmpegWrapper.vala"
		display = _tmp1_;
#line 43 "../src/FFmpegWrapper.vala"
		_tmp2_ = display;
#line 43 "../src/FFmpegWrapper.vala"
		if (_tmp2_ == NULL) {
#line 1117 "FFmpegWrapper.c"
			gchar* _tmp3_;
#line 44 "../src/FFmpegWrapper.vala"
			_tmp3_ = g_strdup (":0");
#line 44 "../src/FFmpegWrapper.vala"
			_g_free0 (display);
#line 44 "../src/FFmpegWrapper.vala"
			display = _tmp3_;
#line 1125 "FFmpegWrapper.c"
		}
#line 46 "../src/FFmpegWrapper.vala"
		is_gif = g_strcmp0 (ext, "gif") == 0;
#line 52 "../src/FFmpegWrapper.vala"
		if (show_borders) {
#line 52 "../src/FFmpegWrapper.vala"
			_tmp4_ = "1";
#line 1133 "FFmpegWrapper.c"
		} else {
#line 52 "../src/FFmpegWrapper.vala"
			_tmp4_ = "0";
#line 1137 "FFmpegWrapper.c"
		}
#line 54 "../src/FFmpegWrapper.vala"
		if (show_mouse) {
#line 54 "../src/FFmpegWrapper.vala"
			_tmp5_ = "1";
#line 1143 "FFmpegWrapper.c"
		} else {
#line 54 "../src/FFmpegWrapper.vala"
			_tmp5_ = "0";
#line 1147 "FFmpegWrapper.c"
		}
#line 47 "../src/FFmpegWrapper.vala"
		_tmp6_ = g_strdup ("ffmpeg");
#line 47 "../src/FFmpegWrapper.vala"
		_tmp7_ = g_strdup ("-y");
#line 47 "../src/FFmpegWrapper.vala"
		_tmp8_ = g_strdup ("-video_size");
#line 47 "../src/FFmpegWrapper.vala"
		_tmp9_ = g_strdup_printf ("%ix%i", width, height);
#line 47 "../src/FFmpegWrapper.vala"
		_tmp10_ = g_strdup ("-framerate");
#line 47 "../src/FFmpegWrapper.vala"
		_tmp11_ = g_strdup_printf ("%i", framerate);
#line 47 "../src/FFmpegWrapper.vala"
		_tmp12_ = g_strdup ("-show_region");
#line 47 "../src/FFmpegWrapper.vala"
		_tmp13_ = g_strdup (_tmp4_);
#line 47 "../src/FFmpegWrapper.vala"
		_tmp14_ = g_strdup ("-region_border");
#line 47 "../src/FFmpegWrapper.vala"
		_tmp15_ = g_strdup ("2");
#line 47 "../src/FFmpegWrapper.vala"
		_tmp16_ = g_strdup ("-draw_mouse");
#line 47 "../src/FFmpegWrapper.vala"
		_tmp17_ = g_strdup (_tmp5_);
#line 47 "../src/FFmpegWrapper.vala"
		_tmp18_ = g_strdup ("-f");
#line 47 "../src/FFmpegWrapper.vala"
		_tmp19_ = g_strdup ("x11grab");
#line 47 "../src/FFmpegWrapper.vala"
		_tmp20_ = g_strdup ("-i");
#line 47 "../src/FFmpegWrapper.vala"
		_tmp21_ = display;
#line 47 "../src/FFmpegWrapper.vala"
		_tmp22_ = g_strdup_printf ("%s+%i,%i", _tmp21_, start_x, start_y);
#line 47 "../src/FFmpegWrapper.vala"
		_tmp23_ = g_new0 (gchar*, 16 + 1);
#line 47 "../src/FFmpegWrapper.vala"
		_tmp23_[0] = _tmp6_;
#line 47 "../src/FFmpegWrapper.vala"
		_tmp23_[1] = _tmp7_;
#line 47 "../src/FFmpegWrapper.vala"
		_tmp23_[2] = _tmp8_;
#line 47 "../src/FFmpegWrapper.vala"
		_tmp23_[3] = _tmp9_;
#line 47 "../src/FFmpegWrapper.vala"
		_tmp23_[4] = _tmp10_;
#line 47 "../src/FFmpegWrapper.vala"
		_tmp23_[5] = _tmp11_;
#line 47 "../src/FFmpegWrapper.vala"
		_tmp23_[6] = _tmp12_;
#line 47 "../src/FFmpegWrapper.vala"
		_tmp23_[7] = _tmp13_;
#line 47 "../src/FFmpegWrapper.vala"
		_tmp23_[8] = _tmp14_;
#line 47 "../src/FFmpegWrapper.vala"
		_tmp23_[9] = _tmp15_;
#line 47 "../src/FFmpegWrapper.vala"
		_tmp23_[10] = _tmp16_;
#line 47 "../src/FFmpegWrapper.vala"
		_tmp23_[11] = _tmp17_;
#line 47 "../src/FFmpegWrapper.vala"
		_tmp23_[12] = _tmp18_;
#line 47 "../src/FFmpegWrapper.vala"
		_tmp23_[13] = _tmp19_;
#line 47 "../src/FFmpegWrapper.vala"
		_tmp23_[14] = _tmp20_;
#line 47 "../src/FFmpegWrapper.vala"
		_tmp23_[15] = _tmp22_;
#line 47 "../src/FFmpegWrapper.vala"
		spawn_args = _tmp23_;
#line 47 "../src/FFmpegWrapper.vala"
		spawn_args_length1 = 16;
#line 47 "../src/FFmpegWrapper.vala"
		_spawn_args_size_ = spawn_args_length1;
#line 58 "../src/FFmpegWrapper.vala"
		if (record_mic) {
#line 58 "../src/FFmpegWrapper.vala"
			_tmp24_ = !is_gif;
#line 1227 "FFmpegWrapper.c"
		} else {
#line 58 "../src/FFmpegWrapper.vala"
			_tmp24_ = FALSE;
#line 1231 "FFmpegWrapper.c"
		}
#line 58 "../src/FFmpegWrapper.vala"
		if (_tmp24_) {
#line 1235 "FFmpegWrapper.c"
			gchar* _tmp25_;
			gchar* _tmp26_;
			gchar* _tmp27_;
			gchar* _tmp28_;
#line 59 "../src/FFmpegWrapper.vala"
			_tmp25_ = g_strdup ("-f");
#line 59 "../src/FFmpegWrapper.vala"
			_vala_array_add1 (&spawn_args, &spawn_args_length1, &_spawn_args_size_, _tmp25_);
#line 60 "../src/FFmpegWrapper.vala"
			_tmp26_ = g_strdup ("pulse");
#line 60 "../src/FFmpegWrapper.vala"
			_vala_array_add2 (&spawn_args, &spawn_args_length1, &_spawn_args_size_, _tmp26_);
#line 61 "../src/FFmpegWrapper.vala"
			_tmp27_ = g_strdup ("-i");
#line 61 "../src/FFmpegWrapper.vala"
			_vala_array_add3 (&spawn_args, &spawn_args_length1, &_spawn_args_size_, _tmp27_);
#line 62 "../src/FFmpegWrapper.vala"
			_tmp28_ = g_strdup ("default");
#line 62 "../src/FFmpegWrapper.vala"
			_vala_array_add4 (&spawn_args, &spawn_args_length1, &_spawn_args_size_, _tmp28_);
#line 1256 "FFmpegWrapper.c"
		}
#line 64 "../src/FFmpegWrapper.vala"
		if (record_cmp) {
#line 64 "../src/FFmpegWrapper.vala"
			_tmp29_ = !is_gif;
#line 1262 "FFmpegWrapper.c"
		} else {
#line 64 "../src/FFmpegWrapper.vala"
			_tmp29_ = FALSE;
#line 1266 "FFmpegWrapper.c"
		}
#line 64 "../src/FFmpegWrapper.vala"
		if (_tmp29_) {
#line 1270 "FFmpegWrapper.c"
			gchar* default_audio_output = NULL;
			gchar* _tmp30_;
			const gchar* _tmp31_;
#line 65 "../src/FFmpegWrapper.vala"
			_tmp30_ = screen_recorder_ffmpeg_wrapper_get_default_audio_output (self);
#line 65 "../src/FFmpegWrapper.vala"
			default_audio_output = _tmp30_;
#line 66 "../src/FFmpegWrapper.vala"
			_tmp31_ = default_audio_output;
#line 66 "../src/FFmpegWrapper.vala"
			if (g_strcmp0 (_tmp31_, "") != 0) {
#line 1282 "FFmpegWrapper.c"
				gchar* _tmp32_;
				gchar* _tmp33_;
				gchar* _tmp34_;
				const gchar* _tmp35_;
				gchar* _tmp36_;
#line 67 "../src/FFmpegWrapper.vala"
				_tmp32_ = g_strdup ("-f");
#line 67 "../src/FFmpegWrapper.vala"
				_vala_array_add5 (&spawn_args, &spawn_args_length1, &_spawn_args_size_, _tmp32_);
#line 68 "../src/FFmpegWrapper.vala"
				_tmp33_ = g_strdup ("pulse");
#line 68 "../src/FFmpegWrapper.vala"
				_vala_array_add6 (&spawn_args, &spawn_args_length1, &_spawn_args_size_, _tmp33_);
#line 69 "../src/FFmpegWrapper.vala"
				_tmp34_ = g_strdup ("-i");
#line 69 "../src/FFmpegWrapper.vala"
				_vala_array_add7 (&spawn_args, &spawn_args_length1, &_spawn_args_size_, _tmp34_);
#line 70 "../src/FFmpegWrapper.vala"
				_tmp35_ = default_audio_output;
#line 70 "../src/FFmpegWrapper.vala"
				_tmp36_ = g_strdup (_tmp35_);
#line 70 "../src/FFmpegWrapper.vala"
				_vala_array_add8 (&spawn_args, &spawn_args_length1, &_spawn_args_size_, _tmp36_);
#line 71 "../src/FFmpegWrapper.vala"
				if (record_mic) {
#line 1308 "FFmpegWrapper.c"
					gchar* _tmp37_;
					gchar* _tmp38_;
					gchar* _tmp39_;
					gchar* _tmp40_;
#line 72 "../src/FFmpegWrapper.vala"
					_tmp37_ = g_strdup ("-filter_complex");
#line 72 "../src/FFmpegWrapper.vala"
					_vala_array_add9 (&spawn_args, &spawn_args_length1, &_spawn_args_size_, _tmp37_);
#line 73 "../src/FFmpegWrapper.vala"
					_tmp38_ = g_strdup ("amerge");
#line 73 "../src/FFmpegWrapper.vala"
					_vala_array_add10 (&spawn_args, &spawn_args_length1, &_spawn_args_size_, _tmp38_);
#line 74 "../src/FFmpegWrapper.vala"
					_tmp39_ = g_strdup ("-ac");
#line 74 "../src/FFmpegWrapper.vala"
					_vala_array_add11 (&spawn_args, &spawn_args_length1, &_spawn_args_size_, _tmp39_);
#line 75 "../src/FFmpegWrapper.vala"
					_tmp40_ = g_strdup ("2");
#line 75 "../src/FFmpegWrapper.vala"
					_vala_array_add12 (&spawn_args, &spawn_args_length1, &_spawn_args_size_, _tmp40_);
#line 1329 "FFmpegWrapper.c"
				}
			}
#line 64 "../src/FFmpegWrapper.vala"
			_g_free0 (default_audio_output);
#line 1334 "FFmpegWrapper.c"
		}
#line 79 "../src/FFmpegWrapper.vala"
		_tmp41_ = g_strdup ("-preset");
#line 79 "../src/FFmpegWrapper.vala"
		_vala_array_add13 (&spawn_args, &spawn_args_length1, &_spawn_args_size_, _tmp41_);
#line 80 "../src/FFmpegWrapper.vala"
		_tmp42_ = g_strdup ("ultrafast");
#line 80 "../src/FFmpegWrapper.vala"
		_vala_array_add14 (&spawn_args, &spawn_args_length1, &_spawn_args_size_, _tmp42_);
#line 83 "../src/FFmpegWrapper.vala"
		_tmp43_ = g_strdup ("-filter:v");
#line 83 "../src/FFmpegWrapper.vala"
		_vala_array_add15 (&spawn_args, &spawn_args_length1, &_spawn_args_size_, _tmp43_);
#line 84 "../src/FFmpegWrapper.vala"
		_tmp44_ = g_strdup_printf ("scale=iw*%.2f:-1", (gdouble) scale);
#line 84 "../src/FFmpegWrapper.vala"
		_tmp45_ = _tmp44_;
#line 84 "../src/FFmpegWrapper.vala"
		_tmp46_ = string_replace (_tmp45_, ",", ".");
#line 84 "../src/FFmpegWrapper.vala"
		_tmp47_ = _tmp46_;
#line 84 "../src/FFmpegWrapper.vala"
		_g_free0 (_tmp45_);
#line 84 "../src/FFmpegWrapper.vala"
		filter = _tmp47_;
#line 85 "../src/FFmpegWrapper.vala"
		if (!is_gif) {
#line 1362 "FFmpegWrapper.c"
			const gchar* _tmp48_;
			gchar* _tmp49_;
#line 86 "../src/FFmpegWrapper.vala"
			_tmp48_ = filter;
#line 86 "../src/FFmpegWrapper.vala"
			_tmp49_ = g_strconcat (_tmp48_, ", crop=iw-mod(iw\\,2):ih-mod(ih\\,2)", NULL);
#line 86 "../src/FFmpegWrapper.vala"
			_g_free0 (filter);
#line 86 "../src/FFmpegWrapper.vala"
			filter = _tmp49_;
#line 1373 "FFmpegWrapper.c"
		}
#line 88 "../src/FFmpegWrapper.vala"
		_tmp50_ = filter;
#line 88 "../src/FFmpegWrapper.vala"
		_tmp51_ = g_strdup (_tmp50_);
#line 88 "../src/FFmpegWrapper.vala"
		_vala_array_add16 (&spawn_args, &spawn_args_length1, &_spawn_args_size_, _tmp51_);
#line 90 "../src/FFmpegWrapper.vala"
		_tmp52_ = g_strdup (filepath);
#line 90 "../src/FFmpegWrapper.vala"
		_vala_array_add17 (&spawn_args, &spawn_args_length1, &_spawn_args_size_, _tmp52_);
#line 92 "../src/FFmpegWrapper.vala"
		_tmp53_ = spawn_args;
#line 92 "../src/FFmpegWrapper.vala"
		_tmp53__length1 = spawn_args_length1;
#line 92 "../src/FFmpegWrapper.vala"
		_tmp54_ = _vala_g_strjoinv (" ", _tmp53_, (gint) _tmp53__length1);
#line 92 "../src/FFmpegWrapper.vala"
		_tmp55_ = _tmp54_;
#line 92 "../src/FFmpegWrapper.vala"
		g_debug ("FFmpegWrapper.vala:92: ffmpeg command: %s", _tmp55_);
#line 92 "../src/FFmpegWrapper.vala"
		_g_free0 (_tmp55_);
#line 93 "../src/FFmpegWrapper.vala"
		_tmp56_ = g_subprocess_launcher_new (G_SUBPROCESS_FLAGS_STDERR_SILENCE);
#line 93 "../src/FFmpegWrapper.vala"
		launcher = _tmp56_;
#line 94 "../src/FFmpegWrapper.vala"
		_tmp58_ = spawn_args;
#line 94 "../src/FFmpegWrapper.vala"
		_tmp58__length1 = spawn_args_length1;
#line 94 "../src/FFmpegWrapper.vala"
		_tmp59_ = g_subprocess_launcher_spawnv (launcher, _tmp58_, &_inner_error0_);
#line 94 "../src/FFmpegWrapper.vala"
		_tmp57_ = _tmp59_;
#line 94 "../src/FFmpegWrapper.vala"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 94 "../src/FFmpegWrapper.vala"
			_g_object_unref0 (launcher);
#line 94 "../src/FFmpegWrapper.vala"
			_g_free0 (filter);
#line 94 "../src/FFmpegWrapper.vala"
			spawn_args = (_vala_array_free (spawn_args, spawn_args_length1, (GDestroyNotify) g_free), NULL);
#line 94 "../src/FFmpegWrapper.vala"
			_g_free0 (display);
#line 1419 "FFmpegWrapper.c"
			goto __catch0_g_error;
		}
#line 94 "../src/FFmpegWrapper.vala"
		_tmp60_ = _tmp57_;
#line 94 "../src/FFmpegWrapper.vala"
		_tmp57_ = NULL;
#line 94 "../src/FFmpegWrapper.vala"
		_g_object_unref0 (self->priv->subprocess);
#line 94 "../src/FFmpegWrapper.vala"
		self->priv->subprocess = _tmp60_;
#line 39 "../src/FFmpegWrapper.vala"
		_g_object_unref0 (_tmp57_);
#line 39 "../src/FFmpegWrapper.vala"
		_g_object_unref0 (launcher);
#line 39 "../src/FFmpegWrapper.vala"
		_g_free0 (filter);
#line 39 "../src/FFmpegWrapper.vala"
		spawn_args = (_vala_array_free (spawn_args, spawn_args_length1, (GDestroyNotify) g_free), NULL);
#line 39 "../src/FFmpegWrapper.vala"
		_g_free0 (display);
#line 1440 "FFmpegWrapper.c"
	}
	goto __finally0;
	__catch0_g_error:
	{
		GError* e = NULL;
		GError* _tmp61_;
		const gchar* _tmp62_;
#line 39 "../src/FFmpegWrapper.vala"
		e = _inner_error0_;
#line 39 "../src/FFmpegWrapper.vala"
		_inner_error0_ = NULL;
#line 96 "../src/FFmpegWrapper.vala"
		_tmp61_ = e;
#line 96 "../src/FFmpegWrapper.vala"
		_tmp62_ = _tmp61_->message;
#line 96 "../src/FFmpegWrapper.vala"
		g_warning ("FFmpegWrapper.vala:96: %s", _tmp62_);
#line 39 "../src/FFmpegWrapper.vala"
		_g_error_free0 (e);
#line 1460 "FFmpegWrapper.c"
	}
	__finally0:
#line 39 "../src/FFmpegWrapper.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 39 "../src/FFmpegWrapper.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 39 "../src/FFmpegWrapper.vala"
		g_clear_error (&_inner_error0_);
#line 39 "../src/FFmpegWrapper.vala"
		return NULL;
#line 1471 "FFmpegWrapper.c"
	}
#line 26 "../src/FFmpegWrapper.vala"
	return self;
#line 1475 "FFmpegWrapper.c"
}

ScreenRecorderFFmpegWrapper*
screen_recorder_ffmpeg_wrapper_new (const gchar* filepath,
                                    const gchar* ext,
                                    gint framerate,
                                    gint start_x,
                                    gint start_y,
                                    gint width,
                                    gint height,
                                    gfloat scale,
                                    gboolean show_mouse,
                                    gboolean show_borders,
                                    gboolean record_cmp,
                                    gboolean record_mic)
{
#line 26 "../src/FFmpegWrapper.vala"
	return screen_recorder_ffmpeg_wrapper_construct (SCREEN_RECORDER_TYPE_FFMPEG_WRAPPER, filepath, ext, framerate, start_x, start_y, width, height, scale, show_mouse, show_borders, record_cmp, record_mic);
#line 1494 "FFmpegWrapper.c"
}

void
screen_recorder_ffmpeg_wrapper_stop (ScreenRecorderFFmpegWrapper* self)
{
	GSubprocess* _tmp0_;
	GError* _inner_error0_ = NULL;
#line 100 "../src/FFmpegWrapper.vala"
	g_return_if_fail (self != NULL);
#line 101 "../src/FFmpegWrapper.vala"
	_tmp0_ = self->priv->subprocess;
#line 101 "../src/FFmpegWrapper.vala"
	g_subprocess_send_signal (_tmp0_, 2);
#line 1508 "FFmpegWrapper.c"
	{
		GSubprocess* _tmp1_;
#line 103 "../src/FFmpegWrapper.vala"
		_tmp1_ = self->priv->subprocess;
#line 103 "../src/FFmpegWrapper.vala"
		g_subprocess_wait (_tmp1_, NULL, &_inner_error0_);
#line 103 "../src/FFmpegWrapper.vala"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 1517 "FFmpegWrapper.c"
			goto __catch0_g_error;
		}
	}
	goto __finally0;
	__catch0_g_error:
	{
		GError* e = NULL;
		GError* _tmp2_;
		const gchar* _tmp3_;
#line 102 "../src/FFmpegWrapper.vala"
		e = _inner_error0_;
#line 102 "../src/FFmpegWrapper.vala"
		_inner_error0_ = NULL;
#line 105 "../src/FFmpegWrapper.vala"
		_tmp2_ = e;
#line 105 "../src/FFmpegWrapper.vala"
		_tmp3_ = _tmp2_->message;
#line 105 "../src/FFmpegWrapper.vala"
		g_warning ("FFmpegWrapper.vala:105: %s", _tmp3_);
#line 102 "../src/FFmpegWrapper.vala"
		_g_error_free0 (e);
#line 1539 "FFmpegWrapper.c"
	}
	__finally0:
#line 102 "../src/FFmpegWrapper.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 102 "../src/FFmpegWrapper.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 102 "../src/FFmpegWrapper.vala"
		g_clear_error (&_inner_error0_);
#line 102 "../src/FFmpegWrapper.vala"
		return;
#line 1550 "FFmpegWrapper.c"
	}
}

static gchar*
screen_recorder_ffmpeg_wrapper_get_default_audio_output (ScreenRecorderFFmpegWrapper* self)
{
	gchar* default_output = NULL;
	gchar* _tmp0_;
	const gchar* _tmp12_;
	gchar* _tmp13_;
	GError* _inner_error0_ = NULL;
	gchar* result = NULL;
#line 109 "../src/FFmpegWrapper.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 115 "../src/FFmpegWrapper.vala"
	_tmp0_ = g_strdup ("");
#line 115 "../src/FFmpegWrapper.vala"
	default_output = _tmp0_;
#line 1569 "FFmpegWrapper.c"
	{
		gchar* sound_outputs = NULL;
		gchar* _tmp1_;
		gchar* _tmp2_ = NULL;
		GRegex* re = NULL;
		GRegex* _tmp3_;
		GMatchInfo* mi = NULL;
		GRegex* _tmp4_;
		const gchar* _tmp5_;
		GMatchInfo* _tmp6_ = NULL;
		gboolean _tmp7_;
#line 117 "../src/FFmpegWrapper.vala"
		_tmp1_ = g_strdup ("");
#line 117 "../src/FFmpegWrapper.vala"
		sound_outputs = _tmp1_;
#line 118 "../src/FFmpegWrapper.vala"
		g_spawn_command_line_sync ("pacmd list-sinks", &_tmp2_, NULL, NULL, &_inner_error0_);
#line 118 "../src/FFmpegWrapper.vala"
		_g_free0 (sound_outputs);
#line 118 "../src/FFmpegWrapper.vala"
		sound_outputs = _tmp2_;
#line 118 "../src/FFmpegWrapper.vala"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 118 "../src/FFmpegWrapper.vala"
			_g_free0 (sound_outputs);
#line 1595 "FFmpegWrapper.c"
			goto __catch0_g_error;
		}
#line 119 "../src/FFmpegWrapper.vala"
		_tmp3_ = g_regex_new ("(?<=\\*\\sindex:\\s\\d\\s\\sname:\\s<)[\\w\\.\\-]*", 0, 0, &_inner_error0_);
#line 119 "../src/FFmpegWrapper.vala"
		re = _tmp3_;
#line 119 "../src/FFmpegWrapper.vala"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 119 "../src/FFmpegWrapper.vala"
			_g_free0 (sound_outputs);
#line 1606 "FFmpegWrapper.c"
			goto __catch0_g_error;
		}
#line 121 "../src/FFmpegWrapper.vala"
		_tmp4_ = re;
#line 121 "../src/FFmpegWrapper.vala"
		_tmp5_ = sound_outputs;
#line 121 "../src/FFmpegWrapper.vala"
		_tmp7_ = g_regex_match (_tmp4_, _tmp5_, 0, &_tmp6_);
#line 121 "../src/FFmpegWrapper.vala"
		_g_match_info_unref0 (mi);
#line 121 "../src/FFmpegWrapper.vala"
		mi = _tmp6_;
#line 121 "../src/FFmpegWrapper.vala"
		if (_tmp7_) {
#line 1621 "FFmpegWrapper.c"
			GMatchInfo* _tmp8_;
			gchar* _tmp9_;
#line 122 "../src/FFmpegWrapper.vala"
			_tmp8_ = mi;
#line 122 "../src/FFmpegWrapper.vala"
			_tmp9_ = g_match_info_fetch (_tmp8_, 0);
#line 122 "../src/FFmpegWrapper.vala"
			_g_free0 (default_output);
#line 122 "../src/FFmpegWrapper.vala"
			default_output = _tmp9_;
#line 1632 "FFmpegWrapper.c"
		}
#line 116 "../src/FFmpegWrapper.vala"
		_g_match_info_unref0 (mi);
#line 116 "../src/FFmpegWrapper.vala"
		_g_regex_unref0 (re);
#line 116 "../src/FFmpegWrapper.vala"
		_g_free0 (sound_outputs);
#line 1640 "FFmpegWrapper.c"
	}
	goto __finally0;
	__catch0_g_error:
	{
		GError* e = NULL;
		GError* _tmp10_;
		const gchar* _tmp11_;
#line 116 "../src/FFmpegWrapper.vala"
		e = _inner_error0_;
#line 116 "../src/FFmpegWrapper.vala"
		_inner_error0_ = NULL;
#line 125 "../src/FFmpegWrapper.vala"
		_tmp10_ = e;
#line 125 "../src/FFmpegWrapper.vala"
		_tmp11_ = _tmp10_->message;
#line 125 "../src/FFmpegWrapper.vala"
		g_warning ("FFmpegWrapper.vala:125: %s", _tmp11_);
#line 116 "../src/FFmpegWrapper.vala"
		_g_error_free0 (e);
#line 1660 "FFmpegWrapper.c"
	}
	__finally0:
#line 116 "../src/FFmpegWrapper.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 116 "../src/FFmpegWrapper.vala"
		_g_free0 (default_output);
#line 116 "../src/FFmpegWrapper.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 116 "../src/FFmpegWrapper.vala"
		g_clear_error (&_inner_error0_);
#line 116 "../src/FFmpegWrapper.vala"
		return NULL;
#line 1673 "FFmpegWrapper.c"
	}
#line 127 "../src/FFmpegWrapper.vala"
	_tmp12_ = default_output;
#line 127 "../src/FFmpegWrapper.vala"
	_tmp13_ = g_strconcat (_tmp12_, ".monitor", NULL);
#line 127 "../src/FFmpegWrapper.vala"
	result = _tmp13_;
#line 127 "../src/FFmpegWrapper.vala"
	_g_free0 (default_output);
#line 127 "../src/FFmpegWrapper.vala"
	return result;
#line 1685 "FFmpegWrapper.c"
}

static void
screen_recorder_ffmpeg_wrapper_render_file_data_free (gpointer _data)
{
	ScreenRecorderFfmpegWrapperRenderFileData* _data_;
	_data_ = _data;
#line 23 "../src/FFmpegWrapper.vala"
	_g_free0 (_data_->inputpath);
#line 23 "../src/FFmpegWrapper.vala"
	_g_free0 (_data_->outputpath);
#line 23 "../src/FFmpegWrapper.vala"
	_g_free0 (_data_->extension);
#line 23 "../src/FFmpegWrapper.vala"
	g_slice_free (ScreenRecorderFfmpegWrapperRenderFileData, _data_);
#line 1701 "FFmpegWrapper.c"
}

void
screen_recorder_ffmpeg_wrapper_render_file (const gchar* inputpath,
                                            const gchar* outputpath,
                                            const gchar* extension,
                                            GAsyncReadyCallback _callback_,
                                            gpointer _user_data_)
{
	ScreenRecorderFfmpegWrapperRenderFileData* _data_;
	gchar* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
#line 23 "../src/FFmpegWrapper.vala"
	g_return_if_fail (inputpath != NULL);
#line 23 "../src/FFmpegWrapper.vala"
	g_return_if_fail (outputpath != NULL);
#line 23 "../src/FFmpegWrapper.vala"
	g_return_if_fail (extension != NULL);
#line 23 "../src/FFmpegWrapper.vala"
	_data_ = g_slice_new0 (ScreenRecorderFfmpegWrapperRenderFileData);
#line 23 "../src/FFmpegWrapper.vala"
	_data_->_async_result = g_task_new (NULL, NULL, _callback_, _user_data_);
#line 23 "../src/FFmpegWrapper.vala"
	g_task_set_task_data (_data_->_async_result, _data_, screen_recorder_ffmpeg_wrapper_render_file_data_free);
#line 23 "../src/FFmpegWrapper.vala"
	_tmp0_ = g_strdup (inputpath);
#line 23 "../src/FFmpegWrapper.vala"
	_g_free0 (_data_->inputpath);
#line 23 "../src/FFmpegWrapper.vala"
	_data_->inputpath = _tmp0_;
#line 23 "../src/FFmpegWrapper.vala"
	_tmp1_ = g_strdup (outputpath);
#line 23 "../src/FFmpegWrapper.vala"
	_g_free0 (_data_->outputpath);
#line 23 "../src/FFmpegWrapper.vala"
	_data_->outputpath = _tmp1_;
#line 23 "../src/FFmpegWrapper.vala"
	_tmp2_ = g_strdup (extension);
#line 23 "../src/FFmpegWrapper.vala"
	_g_free0 (_data_->extension);
#line 23 "../src/FFmpegWrapper.vala"
	_data_->extension = _tmp2_;
#line 23 "../src/FFmpegWrapper.vala"
	screen_recorder_ffmpeg_wrapper_render_file_co (_data_);
#line 1747 "FFmpegWrapper.c"
}

gboolean
screen_recorder_ffmpeg_wrapper_render_file_finish (GAsyncResult* _res_)
{
	gboolean result;
	ScreenRecorderFfmpegWrapperRenderFileData* _data_;
#line 23 "../src/FFmpegWrapper.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
#line 23 "../src/FFmpegWrapper.vala"
	result = _data_->result;
#line 23 "../src/FFmpegWrapper.vala"
	return result;
#line 1761 "FFmpegWrapper.c"
}

static void
screen_recorder_ffmpeg_wrapper_render_file_ready (GObject* source_object,
                                                  GAsyncResult* _res_,
                                                  gpointer _user_data_)
{
	ScreenRecorderFfmpegWrapperRenderFileData* _data_;
#line 152 "../src/FFmpegWrapper.vala"
	_data_ = _user_data_;
#line 152 "../src/FFmpegWrapper.vala"
	_data_->_source_object_ = source_object;
#line 152 "../src/FFmpegWrapper.vala"
	_data_->_res_ = _res_;
#line 152 "../src/FFmpegWrapper.vala"
	screen_recorder_ffmpeg_wrapper_render_file_co (_data_);
#line 1778 "FFmpegWrapper.c"
}

static gboolean
screen_recorder_ffmpeg_wrapper_render_file_co (ScreenRecorderFfmpegWrapperRenderFileData* _data_)
{
#line 130 "../src/FFmpegWrapper.vala"
	switch (_data_->_state_) {
#line 130 "../src/FFmpegWrapper.vala"
		case 0:
#line 1788 "FFmpegWrapper.c"
		goto _state_0;
#line 130 "../src/FFmpegWrapper.vala"
		case 1:
#line 1792 "FFmpegWrapper.c"
		goto _state_1;
		default:
#line 130 "../src/FFmpegWrapper.vala"
		g_assert_not_reached ();
#line 1797 "FFmpegWrapper.c"
	}
	_state_0:
#line 131 "../src/FFmpegWrapper.vala"
	_data_->return_value = FALSE;
#line 1802 "FFmpegWrapper.c"
	{
#line 133 "../src/FFmpegWrapper.vala"
		_data_->_tmp0_ = g_strdup ("ffmpeg");
#line 133 "../src/FFmpegWrapper.vala"
		_data_->_tmp1_ = g_strdup ("-i");
#line 133 "../src/FFmpegWrapper.vala"
		_data_->_tmp2_ = g_strdup (_data_->inputpath);
#line 133 "../src/FFmpegWrapper.vala"
		_data_->_tmp3_ = g_strdup ("-pix_fmt");
#line 133 "../src/FFmpegWrapper.vala"
		_data_->_tmp4_ = g_strdup ("yuv420p");
#line 133 "../src/FFmpegWrapper.vala"
		_data_->_tmp5_ = g_strdup (_data_->outputpath);
#line 133 "../src/FFmpegWrapper.vala"
		_data_->_tmp6_ = g_new0 (gchar*, 6 + 1);
#line 133 "../src/FFmpegWrapper.vala"
		_data_->_tmp6_[0] = _data_->_tmp0_;
#line 133 "../src/FFmpegWrapper.vala"
		_data_->_tmp6_[1] = _data_->_tmp1_;
#line 133 "../src/FFmpegWrapper.vala"
		_data_->_tmp6_[2] = _data_->_tmp2_;
#line 133 "../src/FFmpegWrapper.vala"
		_data_->_tmp6_[3] = _data_->_tmp3_;
#line 133 "../src/FFmpegWrapper.vala"
		_data_->_tmp6_[4] = _data_->_tmp4_;
#line 133 "../src/FFmpegWrapper.vala"
		_data_->_tmp6_[5] = _data_->_tmp5_;
#line 133 "../src/FFmpegWrapper.vala"
		_data_->spawn_args = _data_->_tmp6_;
#line 133 "../src/FFmpegWrapper.vala"
		_data_->spawn_args_length1 = 6;
#line 133 "../src/FFmpegWrapper.vala"
		_data_->_spawn_args_size_ = _data_->spawn_args_length1;
#line 139 "../src/FFmpegWrapper.vala"
		if (g_strcmp0 (_data_->extension, "gif") == 0) {
#line 140 "../src/FFmpegWrapper.vala"
			_data_->_tmp7_ = g_strdup ("ffmpeg");
#line 140 "../src/FFmpegWrapper.vala"
			_data_->_tmp8_ = g_strdup ("-i");
#line 140 "../src/FFmpegWrapper.vala"
			_data_->_tmp9_ = g_strdup (_data_->inputpath);
#line 140 "../src/FFmpegWrapper.vala"
			_data_->_tmp10_ = g_strdup ("-filter_complex");
#line 140 "../src/FFmpegWrapper.vala"
			_data_->_tmp11_ = g_strdup ("[0:v] split [a][b];[a] palettegen [p];[b][p] paletteuse");
#line 140 "../src/FFmpegWrapper.vala"
			_data_->_tmp12_ = g_strdup (_data_->outputpath);
#line 140 "../src/FFmpegWrapper.vala"
			_data_->_tmp13_ = g_new0 (gchar*, 6 + 1);
#line 140 "../src/FFmpegWrapper.vala"
			_data_->_tmp13_[0] = _data_->_tmp7_;
#line 140 "../src/FFmpegWrapper.vala"
			_data_->_tmp13_[1] = _data_->_tmp8_;
#line 140 "../src/FFmpegWrapper.vala"
			_data_->_tmp13_[2] = _data_->_tmp9_;
#line 140 "../src/FFmpegWrapper.vala"
			_data_->_tmp13_[3] = _data_->_tmp10_;
#line 140 "../src/FFmpegWrapper.vala"
			_data_->_tmp13_[4] = _data_->_tmp11_;
#line 140 "../src/FFmpegWrapper.vala"
			_data_->_tmp13_[5] = _data_->_tmp12_;
#line 140 "../src/FFmpegWrapper.vala"
			_data_->spawn_args = (_vala_array_free (_data_->spawn_args, _data_->spawn_args_length1, (GDestroyNotify) g_free), NULL);
#line 140 "../src/FFmpegWrapper.vala"
			_data_->spawn_args = _data_->_tmp13_;
#line 140 "../src/FFmpegWrapper.vala"
			_data_->spawn_args_length1 = 6;
#line 140 "../src/FFmpegWrapper.vala"
			_data_->_spawn_args_size_ = _data_->spawn_args_length1;
#line 1872 "FFmpegWrapper.c"
		}
#line 149 "../src/FFmpegWrapper.vala"
		_data_->_tmp14_ = _data_->spawn_args;
#line 149 "../src/FFmpegWrapper.vala"
		_data_->_tmp14__length1 = _data_->spawn_args_length1;
#line 149 "../src/FFmpegWrapper.vala"
		_data_->_tmp15_ = _vala_g_strjoinv (" ", _data_->_tmp14_, (gint) _data_->_tmp14__length1);
#line 149 "../src/FFmpegWrapper.vala"
		_data_->_tmp16_ = _data_->_tmp15_;
#line 149 "../src/FFmpegWrapper.vala"
		g_debug ("FFmpegWrapper.vala:149: ffmpeg command: %s", _data_->_tmp16_);
#line 149 "../src/FFmpegWrapper.vala"
		_g_free0 (_data_->_tmp16_);
#line 150 "../src/FFmpegWrapper.vala"
		_data_->_tmp17_ = g_subprocess_launcher_new (G_SUBPROCESS_FLAGS_STDERR_SILENCE);
#line 150 "../src/FFmpegWrapper.vala"
		_data_->launcher = _data_->_tmp17_;
#line 151 "../src/FFmpegWrapper.vala"
		_data_->_tmp18_ = _data_->launcher;
#line 151 "../src/FFmpegWrapper.vala"
		_data_->_tmp19_ = _data_->spawn_args;
#line 151 "../src/FFmpegWrapper.vala"
		_data_->_tmp19__length1 = _data_->spawn_args_length1;
#line 151 "../src/FFmpegWrapper.vala"
		_data_->_tmp20_ = g_subprocess_launcher_spawnv (_data_->_tmp18_, _data_->_tmp19_, &_data_->_inner_error0_);
#line 151 "../src/FFmpegWrapper.vala"
		_data_->render_subprocess = _data_->_tmp20_;
#line 151 "../src/FFmpegWrapper.vala"
		if (G_UNLIKELY (_data_->_inner_error0_ != NULL)) {
#line 151 "../src/FFmpegWrapper.vala"
			_g_object_unref0 (_data_->launcher);
#line 151 "../src/FFmpegWrapper.vala"
			_data_->spawn_args = (_vala_array_free (_data_->spawn_args, _data_->spawn_args_length1, (GDestroyNotify) g_free), NULL);
#line 1906 "FFmpegWrapper.c"
			goto __catch0_g_error;
		}
#line 152 "../src/FFmpegWrapper.vala"
		_data_->_tmp22_ = _data_->render_subprocess;
#line 152 "../src/FFmpegWrapper.vala"
		_data_->_state_ = 1;
#line 152 "../src/FFmpegWrapper.vala"
		g_subprocess_wait_check_async (_data_->_tmp22_, NULL, screen_recorder_ffmpeg_wrapper_render_file_ready, _data_);
#line 152 "../src/FFmpegWrapper.vala"
		return FALSE;
#line 1917 "FFmpegWrapper.c"
		_state_1:
#line 152 "../src/FFmpegWrapper.vala"
		_data_->_tmp21_ = g_subprocess_wait_check_finish (_data_->_tmp22_, _data_->_res_, &_data_->_inner_error0_);
#line 152 "../src/FFmpegWrapper.vala"
		if (G_UNLIKELY (_data_->_inner_error0_ != NULL)) {
#line 152 "../src/FFmpegWrapper.vala"
			_g_object_unref0 (_data_->render_subprocess);
#line 152 "../src/FFmpegWrapper.vala"
			_g_object_unref0 (_data_->launcher);
#line 152 "../src/FFmpegWrapper.vala"
			_data_->spawn_args = (_vala_array_free (_data_->spawn_args, _data_->spawn_args_length1, (GDestroyNotify) g_free), NULL);
#line 1929 "FFmpegWrapper.c"
			goto __catch0_g_error;
		}
#line 152 "../src/FFmpegWrapper.vala"
		_data_->return_value = _data_->_tmp21_;
#line 132 "../src/FFmpegWrapper.vala"
		_g_object_unref0 (_data_->render_subprocess);
#line 132 "../src/FFmpegWrapper.vala"
		_g_object_unref0 (_data_->launcher);
#line 132 "../src/FFmpegWrapper.vala"
		_data_->spawn_args = (_vala_array_free (_data_->spawn_args, _data_->spawn_args_length1, (GDestroyNotify) g_free), NULL);
#line 1940 "FFmpegWrapper.c"
	}
	goto __finally0;
	__catch0_g_error:
	{
#line 132 "../src/FFmpegWrapper.vala"
		_data_->e = _data_->_inner_error0_;
#line 132 "../src/FFmpegWrapper.vala"
		_data_->_inner_error0_ = NULL;
#line 154 "../src/FFmpegWrapper.vala"
		_data_->_tmp23_ = _data_->e;
#line 154 "../src/FFmpegWrapper.vala"
		_data_->_tmp24_ = _data_->_tmp23_->message;
#line 154 "../src/FFmpegWrapper.vala"
		g_warning ("FFmpegWrapper.vala:154: %s", _data_->_tmp24_);
#line 132 "../src/FFmpegWrapper.vala"
		_g_error_free0 (_data_->e);
#line 1957 "FFmpegWrapper.c"
	}
	__finally0:
#line 132 "../src/FFmpegWrapper.vala"
	if (G_UNLIKELY (_data_->_inner_error0_ != NULL)) {
#line 132 "../src/FFmpegWrapper.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error0_->message, g_quark_to_string (_data_->_inner_error0_->domain), _data_->_inner_error0_->code);
#line 132 "../src/FFmpegWrapper.vala"
		g_clear_error (&_data_->_inner_error0_);
#line 132 "../src/FFmpegWrapper.vala"
		g_object_unref (_data_->_async_result);
#line 132 "../src/FFmpegWrapper.vala"
		return FALSE;
#line 1970 "FFmpegWrapper.c"
	}
#line 156 "../src/FFmpegWrapper.vala"
	_data_->result = _data_->return_value;
#line 156 "../src/FFmpegWrapper.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 156 "../src/FFmpegWrapper.vala"
	if (_data_->_state_ != 0) {
#line 156 "../src/FFmpegWrapper.vala"
		while (!g_task_get_completed (_data_->_async_result)) {
#line 156 "../src/FFmpegWrapper.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1982 "FFmpegWrapper.c"
		}
	}
#line 156 "../src/FFmpegWrapper.vala"
	g_object_unref (_data_->_async_result);
#line 156 "../src/FFmpegWrapper.vala"
	return FALSE;
#line 1989 "FFmpegWrapper.c"
}

static void
screen_recorder_ffmpeg_wrapper_class_init (ScreenRecorderFFmpegWrapperClass * klass,
                                           gpointer klass_data)
{
#line 23 "../src/FFmpegWrapper.vala"
	screen_recorder_ffmpeg_wrapper_parent_class = g_type_class_peek_parent (klass);
#line 23 "../src/FFmpegWrapper.vala"
	g_type_class_adjust_private_offset (klass, &ScreenRecorderFFmpegWrapper_private_offset);
#line 23 "../src/FFmpegWrapper.vala"
	G_OBJECT_CLASS (klass)->finalize = screen_recorder_ffmpeg_wrapper_finalize;
#line 2002 "FFmpegWrapper.c"
}

static void
screen_recorder_ffmpeg_wrapper_instance_init (ScreenRecorderFFmpegWrapper * self,
                                              gpointer klass)
{
#line 23 "../src/FFmpegWrapper.vala"
	self->priv = screen_recorder_ffmpeg_wrapper_get_instance_private (self);
#line 2011 "FFmpegWrapper.c"
}

static void
screen_recorder_ffmpeg_wrapper_finalize (GObject * obj)
{
	ScreenRecorderFFmpegWrapper * self;
#line 23 "../src/FFmpegWrapper.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, SCREEN_RECORDER_TYPE_FFMPEG_WRAPPER, ScreenRecorderFFmpegWrapper);
#line 24 "../src/FFmpegWrapper.vala"
	_g_object_unref0 (self->priv->subprocess);
#line 23 "../src/FFmpegWrapper.vala"
	G_OBJECT_CLASS (screen_recorder_ffmpeg_wrapper_parent_class)->finalize (obj);
#line 2024 "FFmpegWrapper.c"
}

static GType
screen_recorder_ffmpeg_wrapper_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (ScreenRecorderFFmpegWrapperClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) screen_recorder_ffmpeg_wrapper_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ScreenRecorderFFmpegWrapper), 0, (GInstanceInitFunc) screen_recorder_ffmpeg_wrapper_instance_init, NULL };
	GType screen_recorder_ffmpeg_wrapper_type_id;
	screen_recorder_ffmpeg_wrapper_type_id = g_type_register_static (G_TYPE_OBJECT, "ScreenRecorderFFmpegWrapper", &g_define_type_info, 0);
	ScreenRecorderFFmpegWrapper_private_offset = g_type_add_instance_private (screen_recorder_ffmpeg_wrapper_type_id, sizeof (ScreenRecorderFFmpegWrapperPrivate));
	return screen_recorder_ffmpeg_wrapper_type_id;
}

GType
screen_recorder_ffmpeg_wrapper_get_type (void)
{
	static volatile gsize screen_recorder_ffmpeg_wrapper_type_id__volatile = 0;
	if (g_once_init_enter (&screen_recorder_ffmpeg_wrapper_type_id__volatile)) {
		GType screen_recorder_ffmpeg_wrapper_type_id;
		screen_recorder_ffmpeg_wrapper_type_id = screen_recorder_ffmpeg_wrapper_get_type_once ();
		g_once_init_leave (&screen_recorder_ffmpeg_wrapper_type_id__volatile, screen_recorder_ffmpeg_wrapper_type_id);
	}
	return screen_recorder_ffmpeg_wrapper_type_id__volatile;
}

static void
_vala_array_destroy (gpointer array,
                     gssize array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gssize i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gssize array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

