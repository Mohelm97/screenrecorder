/* KeybindingManager.c generated by valac 0.54.3, the Vala compiler
 * generated from KeybindingManager.vala, do not modify */

#include <glib-object.h>
#include <gee.h>
#include <glib.h>
#include <gdk/gdk.h>
#include <stdlib.h>
#include <string.h>
#include <gtk/gtk.h>
#include <X11/Xlib.h>
#include <X11/Xatom.h>
#include <X11/Xutil.h>
#include <X11/Xregion.h>
#include <gdk/gdkx.h>
#include <gobject/gvaluecollector.h>

#if !defined(VALA_EXTERN)
#if defined(_MSC_VER)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_KEYBINDING_MANAGER (keybinding_manager_get_type ())
#define KEYBINDING_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_KEYBINDING_MANAGER, KeybindingManager))
#define KEYBINDING_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_KEYBINDING_MANAGER, KeybindingManagerClass))
#define IS_KEYBINDING_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_KEYBINDING_MANAGER))
#define IS_KEYBINDING_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_KEYBINDING_MANAGER))
#define KEYBINDING_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_KEYBINDING_MANAGER, KeybindingManagerClass))

typedef struct _KeybindingManager KeybindingManager;
typedef struct _KeybindingManagerClass KeybindingManagerClass;
typedef struct _KeybindingManagerPrivate KeybindingManagerPrivate;
enum  {
	KEYBINDING_MANAGER_0_PROPERTY,
	KEYBINDING_MANAGER_NUM_PROPERTIES
};
static GParamSpec* keybinding_manager_properties[KEYBINDING_MANAGER_NUM_PROPERTIES];

#define KEYBINDING_MANAGER_TYPE_KEYBINDING (keybinding_manager_keybinding_get_type ())
#define KEYBINDING_MANAGER_KEYBINDING(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), KEYBINDING_MANAGER_TYPE_KEYBINDING, KeybindingManagerKeybinding))
#define KEYBINDING_MANAGER_KEYBINDING_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), KEYBINDING_MANAGER_TYPE_KEYBINDING, KeybindingManagerKeybindingClass))
#define KEYBINDING_MANAGER_IS_KEYBINDING(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), KEYBINDING_MANAGER_TYPE_KEYBINDING))
#define KEYBINDING_MANAGER_IS_KEYBINDING_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), KEYBINDING_MANAGER_TYPE_KEYBINDING))
#define KEYBINDING_MANAGER_KEYBINDING_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), KEYBINDING_MANAGER_TYPE_KEYBINDING, KeybindingManagerKeybindingClass))

typedef struct _KeybindingManagerKeybinding KeybindingManagerKeybinding;
typedef struct _KeybindingManagerKeybindingClass KeybindingManagerKeybindingClass;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef void (*KeybindingManagerKeybindingHandlerFunc) (GdkEvent* event, gpointer user_data);
#define _g_free0(var) (var = (g_free (var), NULL))
#define _keybinding_manager_keybinding_unref0(var) ((var == NULL) ? NULL : (var = (keybinding_manager_keybinding_unref (var), NULL)))
typedef struct _KeybindingManagerKeybindingPrivate KeybindingManagerKeybindingPrivate;
typedef struct _KeybindingManagerParamSpecKeybinding KeybindingManagerParamSpecKeybinding;

struct _KeybindingManager {
	GObject parent_instance;
	KeybindingManagerPrivate * priv;
};

struct _KeybindingManagerClass {
	GObjectClass parent_class;
};

struct _KeybindingManagerKeybinding {
	GTypeInstance parent_instance;
	volatile int ref_count;
	KeybindingManagerKeybindingPrivate * priv;
};

struct _KeybindingManagerKeybindingClass {
	GTypeClass parent_class;
	void (*finalize) (KeybindingManagerKeybinding *self);
};

struct _KeybindingManagerKeybindingPrivate {
	gchar* _accelerator;
	gint _keycode;
	GdkModifierType _modifiers;
	KeybindingManagerKeybindingHandlerFunc _handler;
	gpointer _handler_target;
};

struct _KeybindingManagerParamSpecKeybinding {
	GParamSpec parent_instance;
};

static gpointer keybinding_manager_parent_class = NULL;
static GeeArrayList* keybinding_manager_bindings;
static GeeArrayList* keybinding_manager_bindings = NULL;
static guint* keybinding_manager_lock_modifiers;
static gint keybinding_manager_lock_modifiers_length1;
static guint* keybinding_manager_lock_modifiers = NULL;
static gint keybinding_manager_lock_modifiers_length1 = 0;
static gint _keybinding_manager_lock_modifiers_size_ = 0;
static gint KeybindingManagerKeybinding_private_offset;
static gpointer keybinding_manager_keybinding_parent_class = NULL;

VALA_EXTERN GType keybinding_manager_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (KeybindingManager, g_object_unref)
static gpointer keybinding_manager_keybinding_ref (gpointer instance);
static void keybinding_manager_keybinding_unref (gpointer instance);
static GParamSpec* keybinding_manager_param_spec_keybinding (const gchar* name,
                                                      const gchar* nick,
                                                      const gchar* blurb,
                                                      GType object_type,
                                                      GParamFlags flags) G_GNUC_UNUSED ;
static void keybinding_manager_value_set_keybinding (GValue* value,
                                              gpointer v_object) G_GNUC_UNUSED ;
static void keybinding_manager_value_take_keybinding (GValue* value,
                                               gpointer v_object) G_GNUC_UNUSED ;
static gpointer keybinding_manager_value_get_keybinding (const GValue* value) G_GNUC_UNUSED ;
static GType keybinding_manager_keybinding_get_type (void) G_GNUC_CONST  G_GNUC_UNUSED ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (KeybindingManagerKeybinding, keybinding_manager_keybinding_unref)
VALA_EXTERN KeybindingManager* keybinding_manager_new (void);
VALA_EXTERN KeybindingManager* keybinding_manager_construct (GType object_type);
VALA_EXTERN GdkFilterReturn keybinding_manager_event_filter (KeybindingManager* self,
                                                 GdkXEvent* gdk_xevent,
                                                 GdkEvent* gdk_event);
static GdkFilterReturn _keybinding_manager_event_filter_gdk_filter_func (GdkXEvent* xevent,
                                                                  GdkEvent* event,
                                                                  gpointer self);
VALA_EXTERN void keybinding_manager_bind (KeybindingManager* self,
                              const gchar* accelerator,
                              KeybindingManagerKeybindingHandlerFunc handler,
                              gpointer handler_target);
static KeybindingManagerKeybinding* keybinding_manager_keybinding_new (const gchar* accelerator,
                                                                gint keycode,
                                                                GdkModifierType modifiers,
                                                                KeybindingManagerKeybindingHandlerFunc handler,
                                                                gpointer handler_target);
static KeybindingManagerKeybinding* keybinding_manager_keybinding_construct (GType object_type,
                                                                      const gchar* accelerator,
                                                                      gint keycode,
                                                                      GdkModifierType modifiers,
                                                                      KeybindingManagerKeybindingHandlerFunc handler,
                                                                      gpointer handler_target);
VALA_EXTERN void keybinding_manager_unbind (KeybindingManager* self,
                                const gchar* accelerator);
static const gchar* keybinding_manager_keybinding_get_accelerator (KeybindingManagerKeybinding* self);
static gint keybinding_manager_keybinding_get_keycode (KeybindingManagerKeybinding* self);
static GdkModifierType keybinding_manager_keybinding_get_modifiers (KeybindingManagerKeybinding* self);
static KeybindingManagerKeybindingHandlerFunc keybinding_manager_keybinding_get_handler (KeybindingManagerKeybinding* self,
                                                                                  gpointer* result_target);
static void keybinding_manager_keybinding_set_accelerator (KeybindingManagerKeybinding* self,
                                                    const gchar* value);
static void keybinding_manager_keybinding_set_keycode (KeybindingManagerKeybinding* self,
                                                gint value);
static void keybinding_manager_keybinding_set_modifiers (KeybindingManagerKeybinding* self,
                                                  GdkModifierType value);
static void keybinding_manager_keybinding_set_handler (KeybindingManagerKeybinding* self,
                                                KeybindingManagerKeybindingHandlerFunc value,
                                                gpointer value_target);
static void keybinding_manager_keybinding_finalize (KeybindingManagerKeybinding * obj);
static GType keybinding_manager_keybinding_get_type_once (void);
static void keybinding_manager_finalize (GObject * obj);
static GType keybinding_manager_get_type_once (void);

static gpointer
_g_object_ref0 (gpointer self)
{
#line 62 "../src/Utils/KeybindingManager.vala"
	return self ? g_object_ref (self) : NULL;
#line 169 "KeybindingManager.c"
}

static GdkFilterReturn
_keybinding_manager_event_filter_gdk_filter_func (GdkXEvent* xevent,
                                                  GdkEvent* event,
                                                  gpointer self)
{
	GdkFilterReturn result;
	result = keybinding_manager_event_filter ((KeybindingManager*) self, xevent, event);
#line 64 "../src/Utils/KeybindingManager.vala"
	return result;
#line 181 "KeybindingManager.c"
}

KeybindingManager*
keybinding_manager_construct (GType object_type)
{
	KeybindingManager * self = NULL;
	GdkWindow* rootwin = NULL;
	GdkWindow* _tmp0_;
	GdkWindow* _tmp1_;
	GdkWindow* _tmp2_;
#line 59 "../src/Utils/KeybindingManager.vala"
	self = (KeybindingManager*) g_object_new (object_type, NULL);
#line 62 "../src/Utils/KeybindingManager.vala"
	_tmp0_ = gdk_get_default_root_window ();
#line 62 "../src/Utils/KeybindingManager.vala"
	_tmp1_ = _g_object_ref0 (_tmp0_);
#line 62 "../src/Utils/KeybindingManager.vala"
	rootwin = _tmp1_;
#line 63 "../src/Utils/KeybindingManager.vala"
	_tmp2_ = rootwin;
#line 63 "../src/Utils/KeybindingManager.vala"
	if (_tmp2_ != NULL) {
#line 204 "KeybindingManager.c"
		GdkWindow* _tmp3_;
#line 64 "../src/Utils/KeybindingManager.vala"
		_tmp3_ = rootwin;
#line 64 "../src/Utils/KeybindingManager.vala"
		gdk_window_add_filter (_tmp3_, _keybinding_manager_event_filter_gdk_filter_func, self);
#line 210 "KeybindingManager.c"
	}
#line 59 "../src/Utils/KeybindingManager.vala"
	_g_object_unref0 (rootwin);
#line 59 "../src/Utils/KeybindingManager.vala"
	return self;
#line 216 "KeybindingManager.c"
}

KeybindingManager*
keybinding_manager_new (void)
{
#line 59 "../src/Utils/KeybindingManager.vala"
	return keybinding_manager_construct (TYPE_KEYBINDING_MANAGER);
#line 224 "KeybindingManager.c"
}

/**
     * Bind accelerator to given handler
     *
     * @param accelerator accelerator parsable by Gtk.accelerator_parse
     * @param handler handler called when given accelerator is pressed
     */
void
keybinding_manager_bind (KeybindingManager* self,
                         const gchar* accelerator,
                         KeybindingManagerKeybindingHandlerFunc handler,
                         gpointer handler_target)
{
	gchar* _tmp0_;
	gchar* _tmp1_;
	guint keysym = 0U;
	GdkModifierType modifiers = 0U;
	guint _tmp2_ = 0U;
	GdkModifierType _tmp3_ = 0U;
	GdkWindow* rootwin = NULL;
	GdkWindow* _tmp4_;
	GdkWindow* _tmp5_;
	Display* display = NULL;
	GdkWindow* _tmp6_;
	GdkDisplay* _tmp7_;
	Display* _tmp8_;
	XID xid = 0;
	GdkWindow* _tmp9_;
	gint keycode = 0;
	Display* _tmp10_;
#line 74 "../src/Utils/KeybindingManager.vala"
	g_return_if_fail (self != NULL);
#line 74 "../src/Utils/KeybindingManager.vala"
	g_return_if_fail (accelerator != NULL);
#line 76 "../src/Utils/KeybindingManager.vala"
	_tmp0_ = g_strconcat ("Binding key ", accelerator, NULL);
#line 76 "../src/Utils/KeybindingManager.vala"
	_tmp1_ = _tmp0_;
#line 76 "../src/Utils/KeybindingManager.vala"
	g_debug ("KeybindingManager.vala:76: %s", _tmp1_);
#line 76 "../src/Utils/KeybindingManager.vala"
	_g_free0 (_tmp1_);
#line 81 "../src/Utils/KeybindingManager.vala"
	gtk_accelerator_parse (accelerator, &_tmp2_, &_tmp3_);
#line 81 "../src/Utils/KeybindingManager.vala"
	keysym = _tmp2_;
#line 81 "../src/Utils/KeybindingManager.vala"
	modifiers = _tmp3_;
#line 83 "../src/Utils/KeybindingManager.vala"
	_tmp4_ = gdk_get_default_root_window ();
#line 83 "../src/Utils/KeybindingManager.vala"
	_tmp5_ = _g_object_ref0 (_tmp4_);
#line 83 "../src/Utils/KeybindingManager.vala"
	rootwin = _tmp5_;
#line 84 "../src/Utils/KeybindingManager.vala"
	_tmp6_ = rootwin;
#line 84 "../src/Utils/KeybindingManager.vala"
	_tmp7_ = gdk_window_get_display (_tmp6_);
#line 84 "../src/Utils/KeybindingManager.vala"
	_tmp8_ = gdk_x11_display_get_xdisplay (G_TYPE_CHECK_INSTANCE_CAST (_tmp7_, gdk_x11_display_get_type (), GdkX11Display));
#line 84 "../src/Utils/KeybindingManager.vala"
	display = _tmp8_;
#line 85 "../src/Utils/KeybindingManager.vala"
	_tmp9_ = rootwin;
#line 85 "../src/Utils/KeybindingManager.vala"
	xid = (XID) gdk_x11_window_get_xid (G_TYPE_CHECK_INSTANCE_CAST (_tmp9_, gdk_x11_window_get_type (), GdkX11Window));
#line 86 "../src/Utils/KeybindingManager.vala"
	_tmp10_ = display;
#line 86 "../src/Utils/KeybindingManager.vala"
	keycode = (gint) XKeysymToKeycode (_tmp10_, (gulong) keysym);
#line 88 "../src/Utils/KeybindingManager.vala"
	if (keycode != 0) {
#line 298 "KeybindingManager.c"
		guint* _tmp11_;
		gint _tmp11__length1;
		KeybindingManagerKeybinding* binding = NULL;
		GdkModifierType _tmp14_;
		KeybindingManagerKeybinding* _tmp15_;
		GeeArrayList* _tmp16_;
		KeybindingManagerKeybinding* _tmp17_;
		gchar* _tmp18_;
		gchar* _tmp19_;
#line 91 "../src/Utils/KeybindingManager.vala"
		gdk_error_trap_push ();
#line 95 "../src/Utils/KeybindingManager.vala"
		_tmp11_ = keybinding_manager_lock_modifiers;
#line 95 "../src/Utils/KeybindingManager.vala"
		_tmp11__length1 = keybinding_manager_lock_modifiers_length1;
#line 314 "KeybindingManager.c"
		{
			guint* lock_modifier_collection = NULL;
			gint lock_modifier_collection_length1 = 0;
			gint _lock_modifier_collection_size_ = 0;
			gint lock_modifier_it = 0;
#line 95 "../src/Utils/KeybindingManager.vala"
			lock_modifier_collection = _tmp11_;
#line 95 "../src/Utils/KeybindingManager.vala"
			lock_modifier_collection_length1 = _tmp11__length1;
#line 95 "../src/Utils/KeybindingManager.vala"
			for (lock_modifier_it = 0; lock_modifier_it < lock_modifier_collection_length1; lock_modifier_it = lock_modifier_it + 1) {
#line 326 "KeybindingManager.c"
				guint lock_modifier = 0U;
#line 95 "../src/Utils/KeybindingManager.vala"
				lock_modifier = lock_modifier_collection[lock_modifier_it];
#line 330 "KeybindingManager.c"
				{
					Display* _tmp12_;
					GdkModifierType _tmp13_;
#line 96 "../src/Utils/KeybindingManager.vala"
					_tmp12_ = display;
#line 96 "../src/Utils/KeybindingManager.vala"
					_tmp13_ = modifiers;
#line 96 "../src/Utils/KeybindingManager.vala"
					XGrabKey (_tmp12_, keycode, (guint) (_tmp13_ | lock_modifier), (Window) xid, FALSE, (gint) GrabModeAsync, (gint) GrabModeAsync);
#line 340 "KeybindingManager.c"
				}
			}
		}
#line 101 "../src/Utils/KeybindingManager.vala"
		gdk_flush ();
#line 104 "../src/Utils/KeybindingManager.vala"
		_tmp14_ = modifiers;
#line 104 "../src/Utils/KeybindingManager.vala"
		_tmp15_ = keybinding_manager_keybinding_new (accelerator, keycode, _tmp14_, handler, handler_target);
#line 104 "../src/Utils/KeybindingManager.vala"
		binding = _tmp15_;
#line 105 "../src/Utils/KeybindingManager.vala"
		_tmp16_ = keybinding_manager_bindings;
#line 105 "../src/Utils/KeybindingManager.vala"
		_tmp17_ = binding;
#line 105 "../src/Utils/KeybindingManager.vala"
		gee_abstract_collection_add ((GeeAbstractCollection*) _tmp16_, _tmp17_);
#line 106 "../src/Utils/KeybindingManager.vala"
		_tmp18_ = g_strconcat ("Successfully binded key ", accelerator, NULL);
#line 106 "../src/Utils/KeybindingManager.vala"
		_tmp19_ = _tmp18_;
#line 106 "../src/Utils/KeybindingManager.vala"
		g_debug ("KeybindingManager.vala:106: %s", _tmp19_);
#line 106 "../src/Utils/KeybindingManager.vala"
		_g_free0 (_tmp19_);
#line 88 "../src/Utils/KeybindingManager.vala"
		_keybinding_manager_keybinding_unref0 (binding);
#line 368 "KeybindingManager.c"
	}
#line 74 "../src/Utils/KeybindingManager.vala"
	_g_object_unref0 (rootwin);
#line 372 "KeybindingManager.c"
}

/**
     * Unbind given accelerator.
     *
     * @param accelerator accelerator parsable by Gtk.accelerator_parse
     */
void
keybinding_manager_unbind (KeybindingManager* self,
                           const gchar* accelerator)
{
	gchar* _tmp0_;
	gchar* _tmp1_;
	GdkWindow* rootwin = NULL;
	GdkWindow* _tmp2_;
	GdkWindow* _tmp3_;
	Display* display = NULL;
	GdkWindow* _tmp4_;
	GdkDisplay* _tmp5_;
	Display* _tmp6_;
	XID xid = 0;
	GdkWindow* _tmp7_;
	GeeList* remove_bindings = NULL;
	GeeArrayList* _tmp8_;
	GeeArrayList* _tmp31_;
	GeeList* _tmp32_;
#line 115 "../src/Utils/KeybindingManager.vala"
	g_return_if_fail (self != NULL);
#line 115 "../src/Utils/KeybindingManager.vala"
	g_return_if_fail (accelerator != NULL);
#line 117 "../src/Utils/KeybindingManager.vala"
	_tmp0_ = g_strconcat ("Unbinding key ", accelerator, NULL);
#line 117 "../src/Utils/KeybindingManager.vala"
	_tmp1_ = _tmp0_;
#line 117 "../src/Utils/KeybindingManager.vala"
	g_debug ("KeybindingManager.vala:117: %s", _tmp1_);
#line 117 "../src/Utils/KeybindingManager.vala"
	_g_free0 (_tmp1_);
#line 119 "../src/Utils/KeybindingManager.vala"
	_tmp2_ = gdk_get_default_root_window ();
#line 119 "../src/Utils/KeybindingManager.vala"
	_tmp3_ = _g_object_ref0 (_tmp2_);
#line 119 "../src/Utils/KeybindingManager.vala"
	rootwin = _tmp3_;
#line 120 "../src/Utils/KeybindingManager.vala"
	_tmp4_ = rootwin;
#line 120 "../src/Utils/KeybindingManager.vala"
	_tmp5_ = gdk_window_get_display (_tmp4_);
#line 120 "../src/Utils/KeybindingManager.vala"
	_tmp6_ = gdk_x11_display_get_xdisplay (G_TYPE_CHECK_INSTANCE_CAST (_tmp5_, gdk_x11_display_get_type (), GdkX11Display));
#line 120 "../src/Utils/KeybindingManager.vala"
	display = _tmp6_;
#line 121 "../src/Utils/KeybindingManager.vala"
	_tmp7_ = rootwin;
#line 121 "../src/Utils/KeybindingManager.vala"
	xid = (XID) gdk_x11_window_get_xid (G_TYPE_CHECK_INSTANCE_CAST (_tmp7_, gdk_x11_window_get_type (), GdkX11Window));
#line 124 "../src/Utils/KeybindingManager.vala"
	_tmp8_ = gee_array_list_new (KEYBINDING_MANAGER_TYPE_KEYBINDING, (GBoxedCopyFunc) keybinding_manager_keybinding_ref, (GDestroyNotify) keybinding_manager_keybinding_unref, NULL, NULL, NULL);
#line 124 "../src/Utils/KeybindingManager.vala"
	remove_bindings = (GeeList*) _tmp8_;
#line 433 "KeybindingManager.c"
	{
		GeeArrayList* _binding_list = NULL;
		GeeArrayList* _tmp9_;
		gint _binding_size = 0;
		GeeArrayList* _tmp10_;
		gint _tmp11_;
		gint _tmp12_;
		gint _binding_index = 0;
#line 125 "../src/Utils/KeybindingManager.vala"
		_tmp9_ = keybinding_manager_bindings;
#line 125 "../src/Utils/KeybindingManager.vala"
		_binding_list = _tmp9_;
#line 125 "../src/Utils/KeybindingManager.vala"
		_tmp10_ = _binding_list;
#line 125 "../src/Utils/KeybindingManager.vala"
		_tmp11_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp10_);
#line 125 "../src/Utils/KeybindingManager.vala"
		_tmp12_ = _tmp11_;
#line 125 "../src/Utils/KeybindingManager.vala"
		_binding_size = _tmp12_;
#line 125 "../src/Utils/KeybindingManager.vala"
		_binding_index = -1;
#line 125 "../src/Utils/KeybindingManager.vala"
		while (TRUE) {
#line 458 "KeybindingManager.c"
			gint _tmp13_;
			gint _tmp14_;
			KeybindingManagerKeybinding* binding = NULL;
			GeeArrayList* _tmp15_;
			gpointer _tmp16_;
			GEqualFunc _tmp17_;
			KeybindingManagerKeybinding* _tmp18_;
			const gchar* _tmp19_;
			const gchar* _tmp20_;
#line 125 "../src/Utils/KeybindingManager.vala"
			_binding_index = _binding_index + 1;
#line 125 "../src/Utils/KeybindingManager.vala"
			_tmp13_ = _binding_index;
#line 125 "../src/Utils/KeybindingManager.vala"
			_tmp14_ = _binding_size;
#line 125 "../src/Utils/KeybindingManager.vala"
			if (!(_tmp13_ < _tmp14_)) {
#line 125 "../src/Utils/KeybindingManager.vala"
				break;
#line 478 "KeybindingManager.c"
			}
#line 125 "../src/Utils/KeybindingManager.vala"
			_tmp15_ = _binding_list;
#line 125 "../src/Utils/KeybindingManager.vala"
			_tmp16_ = gee_abstract_list_get ((GeeAbstractList*) _tmp15_, _binding_index);
#line 125 "../src/Utils/KeybindingManager.vala"
			binding = (KeybindingManagerKeybinding*) _tmp16_;
#line 126 "../src/Utils/KeybindingManager.vala"
			_tmp17_ = g_str_equal;
#line 126 "../src/Utils/KeybindingManager.vala"
			_tmp18_ = binding;
#line 126 "../src/Utils/KeybindingManager.vala"
			_tmp19_ = keybinding_manager_keybinding_get_accelerator (_tmp18_);
#line 126 "../src/Utils/KeybindingManager.vala"
			_tmp20_ = _tmp19_;
#line 126 "../src/Utils/KeybindingManager.vala"
			if (_tmp17_ (accelerator, _tmp20_)) {
#line 496 "KeybindingManager.c"
				guint* _tmp21_;
				gint _tmp21__length1;
				GeeList* _tmp29_;
				KeybindingManagerKeybinding* _tmp30_;
#line 127 "../src/Utils/KeybindingManager.vala"
				_tmp21_ = keybinding_manager_lock_modifiers;
#line 127 "../src/Utils/KeybindingManager.vala"
				_tmp21__length1 = keybinding_manager_lock_modifiers_length1;
#line 505 "KeybindingManager.c"
				{
					guint* lock_modifier_collection = NULL;
					gint lock_modifier_collection_length1 = 0;
					gint _lock_modifier_collection_size_ = 0;
					gint lock_modifier_it = 0;
#line 127 "../src/Utils/KeybindingManager.vala"
					lock_modifier_collection = _tmp21_;
#line 127 "../src/Utils/KeybindingManager.vala"
					lock_modifier_collection_length1 = _tmp21__length1;
#line 127 "../src/Utils/KeybindingManager.vala"
					for (lock_modifier_it = 0; lock_modifier_it < lock_modifier_collection_length1; lock_modifier_it = lock_modifier_it + 1) {
#line 517 "KeybindingManager.c"
						guint lock_modifier = 0U;
#line 127 "../src/Utils/KeybindingManager.vala"
						lock_modifier = lock_modifier_collection[lock_modifier_it];
#line 521 "KeybindingManager.c"
						{
							Display* _tmp22_;
							KeybindingManagerKeybinding* _tmp23_;
							gint _tmp24_;
							gint _tmp25_;
							KeybindingManagerKeybinding* _tmp26_;
							GdkModifierType _tmp27_;
							GdkModifierType _tmp28_;
#line 128 "../src/Utils/KeybindingManager.vala"
							_tmp22_ = display;
#line 128 "../src/Utils/KeybindingManager.vala"
							_tmp23_ = binding;
#line 128 "../src/Utils/KeybindingManager.vala"
							_tmp24_ = keybinding_manager_keybinding_get_keycode (_tmp23_);
#line 128 "../src/Utils/KeybindingManager.vala"
							_tmp25_ = _tmp24_;
#line 128 "../src/Utils/KeybindingManager.vala"
							_tmp26_ = binding;
#line 128 "../src/Utils/KeybindingManager.vala"
							_tmp27_ = keybinding_manager_keybinding_get_modifiers (_tmp26_);
#line 128 "../src/Utils/KeybindingManager.vala"
							_tmp28_ = _tmp27_;
#line 128 "../src/Utils/KeybindingManager.vala"
							XUngrabKey (_tmp22_, _tmp25_, (guint) _tmp28_, (Window) xid);
#line 546 "KeybindingManager.c"
						}
					}
				}
#line 130 "../src/Utils/KeybindingManager.vala"
				_tmp29_ = remove_bindings;
#line 130 "../src/Utils/KeybindingManager.vala"
				_tmp30_ = binding;
#line 130 "../src/Utils/KeybindingManager.vala"
				gee_collection_add ((GeeCollection*) _tmp29_, _tmp30_);
#line 556 "KeybindingManager.c"
			}
#line 125 "../src/Utils/KeybindingManager.vala"
			_keybinding_manager_keybinding_unref0 (binding);
#line 560 "KeybindingManager.c"
		}
	}
#line 135 "../src/Utils/KeybindingManager.vala"
	_tmp31_ = keybinding_manager_bindings;
#line 135 "../src/Utils/KeybindingManager.vala"
	_tmp32_ = remove_bindings;
#line 135 "../src/Utils/KeybindingManager.vala"
	gee_collection_remove_all ((GeeCollection*) _tmp31_, (GeeCollection*) _tmp32_);
#line 115 "../src/Utils/KeybindingManager.vala"
	_g_object_unref0 (remove_bindings);
#line 115 "../src/Utils/KeybindingManager.vala"
	_g_object_unref0 (rootwin);
#line 573 "KeybindingManager.c"
}

/**
     * Event filter method needed to fetch X.Events
     */
GdkFilterReturn
keybinding_manager_event_filter (KeybindingManager* self,
                                 GdkXEvent* gdk_xevent,
                                 GdkEvent* gdk_event)
{
	XEvent* xevent = NULL;
	XEvent* _tmp0_;
	GdkFilterReturn result = 0;
#line 141 "../src/Utils/KeybindingManager.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 141 "../src/Utils/KeybindingManager.vala"
	g_return_val_if_fail (gdk_xevent != NULL, 0);
#line 141 "../src/Utils/KeybindingManager.vala"
	g_return_val_if_fail (gdk_event != NULL, 0);
#line 143 "../src/Utils/KeybindingManager.vala"
	xevent = (XEvent*) gdk_xevent;
#line 145 "../src/Utils/KeybindingManager.vala"
	_tmp0_ = xevent;
#line 145 "../src/Utils/KeybindingManager.vala"
	if ((*_tmp0_).type == ((gint) KeyPress)) {
#line 599 "KeybindingManager.c"
		{
			GeeArrayList* _binding_list = NULL;
			GeeArrayList* _tmp1_;
			gint _binding_size = 0;
			GeeArrayList* _tmp2_;
			gint _tmp3_;
			gint _tmp4_;
			gint _binding_index = 0;
#line 146 "../src/Utils/KeybindingManager.vala"
			_tmp1_ = keybinding_manager_bindings;
#line 146 "../src/Utils/KeybindingManager.vala"
			_binding_list = _tmp1_;
#line 146 "../src/Utils/KeybindingManager.vala"
			_tmp2_ = _binding_list;
#line 146 "../src/Utils/KeybindingManager.vala"
			_tmp3_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp2_);
#line 146 "../src/Utils/KeybindingManager.vala"
			_tmp4_ = _tmp3_;
#line 146 "../src/Utils/KeybindingManager.vala"
			_binding_size = _tmp4_;
#line 146 "../src/Utils/KeybindingManager.vala"
			_binding_index = -1;
#line 146 "../src/Utils/KeybindingManager.vala"
			while (TRUE) {
#line 624 "KeybindingManager.c"
				gint _tmp5_;
				gint _tmp6_;
				KeybindingManagerKeybinding* binding = NULL;
				GeeArrayList* _tmp7_;
				gpointer _tmp8_;
				guint event_mods = 0U;
				XEvent* _tmp9_;
				XKeyEvent _tmp10_;
				guint* _tmp11_;
				gint _tmp11__length1;
				guint _tmp12_;
				gboolean _tmp13_ = FALSE;
				XEvent* _tmp14_;
				XKeyEvent _tmp15_;
				KeybindingManagerKeybinding* _tmp16_;
				gint _tmp17_;
				gint _tmp18_;
#line 146 "../src/Utils/KeybindingManager.vala"
				_binding_index = _binding_index + 1;
#line 146 "../src/Utils/KeybindingManager.vala"
				_tmp5_ = _binding_index;
#line 146 "../src/Utils/KeybindingManager.vala"
				_tmp6_ = _binding_size;
#line 146 "../src/Utils/KeybindingManager.vala"
				if (!(_tmp5_ < _tmp6_)) {
#line 146 "../src/Utils/KeybindingManager.vala"
					break;
#line 652 "KeybindingManager.c"
				}
#line 146 "../src/Utils/KeybindingManager.vala"
				_tmp7_ = _binding_list;
#line 146 "../src/Utils/KeybindingManager.vala"
				_tmp8_ = gee_abstract_list_get ((GeeAbstractList*) _tmp7_, _binding_index);
#line 146 "../src/Utils/KeybindingManager.vala"
				binding = (KeybindingManagerKeybinding*) _tmp8_;
#line 148 "../src/Utils/KeybindingManager.vala"
				_tmp9_ = xevent;
#line 148 "../src/Utils/KeybindingManager.vala"
				_tmp10_ = (*_tmp9_).xkey;
#line 148 "../src/Utils/KeybindingManager.vala"
				_tmp11_ = keybinding_manager_lock_modifiers;
#line 148 "../src/Utils/KeybindingManager.vala"
				_tmp11__length1 = keybinding_manager_lock_modifiers_length1;
#line 148 "../src/Utils/KeybindingManager.vala"
				_tmp12_ = _tmp11_[7];
#line 148 "../src/Utils/KeybindingManager.vala"
				event_mods = _tmp10_.state & (~_tmp12_);
#line 149 "../src/Utils/KeybindingManager.vala"
				_tmp14_ = xevent;
#line 149 "../src/Utils/KeybindingManager.vala"
				_tmp15_ = (*_tmp14_).xkey;
#line 149 "../src/Utils/KeybindingManager.vala"
				_tmp16_ = binding;
#line 149 "../src/Utils/KeybindingManager.vala"
				_tmp17_ = keybinding_manager_keybinding_get_keycode (_tmp16_);
#line 149 "../src/Utils/KeybindingManager.vala"
				_tmp18_ = _tmp17_;
#line 149 "../src/Utils/KeybindingManager.vala"
				if (_tmp15_.keycode == ((guint) _tmp18_)) {
#line 684 "KeybindingManager.c"
					KeybindingManagerKeybinding* _tmp19_;
					GdkModifierType _tmp20_;
					GdkModifierType _tmp21_;
#line 149 "../src/Utils/KeybindingManager.vala"
					_tmp19_ = binding;
#line 149 "../src/Utils/KeybindingManager.vala"
					_tmp20_ = keybinding_manager_keybinding_get_modifiers (_tmp19_);
#line 149 "../src/Utils/KeybindingManager.vala"
					_tmp21_ = _tmp20_;
#line 149 "../src/Utils/KeybindingManager.vala"
					_tmp13_ = event_mods == ((guint) _tmp21_);
#line 696 "KeybindingManager.c"
				} else {
#line 149 "../src/Utils/KeybindingManager.vala"
					_tmp13_ = FALSE;
#line 700 "KeybindingManager.c"
				}
#line 149 "../src/Utils/KeybindingManager.vala"
				if (_tmp13_) {
#line 704 "KeybindingManager.c"
					KeybindingManagerKeybinding* _tmp22_;
					KeybindingManagerKeybindingHandlerFunc _tmp23_ = NULL;
					gpointer _tmp23__target = NULL;
					KeybindingManagerKeybindingHandlerFunc _tmp24_;
					gpointer _tmp24__target;
#line 151 "../src/Utils/KeybindingManager.vala"
					_tmp22_ = binding;
#line 151 "../src/Utils/KeybindingManager.vala"
					_tmp23_ = keybinding_manager_keybinding_get_handler (_tmp22_, &_tmp23__target);
#line 151 "../src/Utils/KeybindingManager.vala"
					_tmp24_ = _tmp23_;
#line 151 "../src/Utils/KeybindingManager.vala"
					_tmp24__target = _tmp23__target;
#line 151 "../src/Utils/KeybindingManager.vala"
					_tmp24_ (gdk_event, _tmp24__target);
#line 720 "KeybindingManager.c"
				}
#line 146 "../src/Utils/KeybindingManager.vala"
				_keybinding_manager_keybinding_unref0 (binding);
#line 724 "KeybindingManager.c"
			}
		}
	}
#line 156 "../src/Utils/KeybindingManager.vala"
	result = GDK_FILTER_CONTINUE;
#line 156 "../src/Utils/KeybindingManager.vala"
	return result;
#line 732 "KeybindingManager.c"
}

static inline gpointer
keybinding_manager_keybinding_get_instance_private (KeybindingManagerKeybinding* self)
{
	return G_STRUCT_MEMBER_P (self, KeybindingManagerKeybinding_private_offset);
}

static KeybindingManagerKeybinding*
keybinding_manager_keybinding_construct (GType object_type,
                                         const gchar* accelerator,
                                         gint keycode,
                                         GdkModifierType modifiers,
                                         KeybindingManagerKeybindingHandlerFunc handler,
                                         gpointer handler_target)
{
	KeybindingManagerKeybinding* self = NULL;
#line 37 "../src/Utils/KeybindingManager.vala"
	g_return_val_if_fail (accelerator != NULL, NULL);
#line 37 "../src/Utils/KeybindingManager.vala"
	self = (KeybindingManagerKeybinding*) g_type_create_instance (object_type);
#line 40 "../src/Utils/KeybindingManager.vala"
	keybinding_manager_keybinding_set_accelerator (self, accelerator);
#line 41 "../src/Utils/KeybindingManager.vala"
	keybinding_manager_keybinding_set_keycode (self, keycode);
#line 42 "../src/Utils/KeybindingManager.vala"
	keybinding_manager_keybinding_set_modifiers (self, modifiers);
#line 43 "../src/Utils/KeybindingManager.vala"
	keybinding_manager_keybinding_set_handler (self, handler, handler_target);
#line 37 "../src/Utils/KeybindingManager.vala"
	return self;
#line 764 "KeybindingManager.c"
}

static KeybindingManagerKeybinding*
keybinding_manager_keybinding_new (const gchar* accelerator,
                                   gint keycode,
                                   GdkModifierType modifiers,
                                   KeybindingManagerKeybindingHandlerFunc handler,
                                   gpointer handler_target)
{
#line 37 "../src/Utils/KeybindingManager.vala"
	return keybinding_manager_keybinding_construct (KEYBINDING_MANAGER_TYPE_KEYBINDING, accelerator, keycode, modifiers, handler, handler_target);
#line 776 "KeybindingManager.c"
}

static const gchar*
keybinding_manager_keybinding_get_accelerator (KeybindingManagerKeybinding* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 46 "../src/Utils/KeybindingManager.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 46 "../src/Utils/KeybindingManager.vala"
	_tmp0_ = self->priv->_accelerator;
#line 46 "../src/Utils/KeybindingManager.vala"
	result = _tmp0_;
#line 46 "../src/Utils/KeybindingManager.vala"
	return result;
#line 792 "KeybindingManager.c"
}

static void
keybinding_manager_keybinding_set_accelerator (KeybindingManagerKeybinding* self,
                                               const gchar* value)
{
	gchar* _tmp0_;
#line 46 "../src/Utils/KeybindingManager.vala"
	g_return_if_fail (self != NULL);
#line 46 "../src/Utils/KeybindingManager.vala"
	_tmp0_ = g_strdup (value);
#line 46 "../src/Utils/KeybindingManager.vala"
	_g_free0 (self->priv->_accelerator);
#line 46 "../src/Utils/KeybindingManager.vala"
	self->priv->_accelerator = _tmp0_;
#line 808 "KeybindingManager.c"
}

static gint
keybinding_manager_keybinding_get_keycode (KeybindingManagerKeybinding* self)
{
	gint result;
#line 47 "../src/Utils/KeybindingManager.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 47 "../src/Utils/KeybindingManager.vala"
	result = self->priv->_keycode;
#line 47 "../src/Utils/KeybindingManager.vala"
	return result;
#line 821 "KeybindingManager.c"
}

static void
keybinding_manager_keybinding_set_keycode (KeybindingManagerKeybinding* self,
                                           gint value)
{
#line 47 "../src/Utils/KeybindingManager.vala"
	g_return_if_fail (self != NULL);
#line 47 "../src/Utils/KeybindingManager.vala"
	self->priv->_keycode = value;
#line 832 "KeybindingManager.c"
}

static GdkModifierType
keybinding_manager_keybinding_get_modifiers (KeybindingManagerKeybinding* self)
{
	GdkModifierType result;
	GdkModifierType _tmp0_;
#line 48 "../src/Utils/KeybindingManager.vala"
	g_return_val_if_fail (self != NULL, 0U);
#line 48 "../src/Utils/KeybindingManager.vala"
	_tmp0_ = self->priv->_modifiers;
#line 48 "../src/Utils/KeybindingManager.vala"
	result = _tmp0_;
#line 48 "../src/Utils/KeybindingManager.vala"
	return result;
#line 848 "KeybindingManager.c"
}

static void
keybinding_manager_keybinding_set_modifiers (KeybindingManagerKeybinding* self,
                                             GdkModifierType value)
{
#line 48 "../src/Utils/KeybindingManager.vala"
	g_return_if_fail (self != NULL);
#line 48 "../src/Utils/KeybindingManager.vala"
	self->priv->_modifiers = value;
#line 859 "KeybindingManager.c"
}

static KeybindingManagerKeybindingHandlerFunc
keybinding_manager_keybinding_get_handler (KeybindingManagerKeybinding* self,
                                           gpointer* result_target)
{
	KeybindingManagerKeybindingHandlerFunc result;
	KeybindingManagerKeybindingHandlerFunc _tmp0_;
	gpointer _tmp0__target;
	KeybindingManagerKeybindingHandlerFunc _tmp1_;
	gpointer _tmp1__target;
#line 49 "../src/Utils/KeybindingManager.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 49 "../src/Utils/KeybindingManager.vala"
	_tmp0_ = self->priv->_handler;
#line 49 "../src/Utils/KeybindingManager.vala"
	_tmp0__target = self->priv->_handler_target;
#line 49 "../src/Utils/KeybindingManager.vala"
	_tmp1_ = _tmp0_;
#line 49 "../src/Utils/KeybindingManager.vala"
	_tmp1__target = _tmp0__target;
#line 49 "../src/Utils/KeybindingManager.vala"
	*result_target = _tmp1__target;
#line 49 "../src/Utils/KeybindingManager.vala"
	result = _tmp1_;
#line 49 "../src/Utils/KeybindingManager.vala"
	return result;
#line 887 "KeybindingManager.c"
}

static void
keybinding_manager_keybinding_set_handler (KeybindingManagerKeybinding* self,
                                           KeybindingManagerKeybindingHandlerFunc value,
                                           gpointer value_target)
{
#line 49 "../src/Utils/KeybindingManager.vala"
	g_return_if_fail (self != NULL);
#line 49 "../src/Utils/KeybindingManager.vala"
	self->priv->_handler = value;
#line 49 "../src/Utils/KeybindingManager.vala"
	self->priv->_handler_target = value_target;
#line 901 "KeybindingManager.c"
}

static void
keybinding_manager_value_keybinding_init (GValue* value)
{
#line 35 "../src/Utils/KeybindingManager.vala"
	value->data[0].v_pointer = NULL;
#line 909 "KeybindingManager.c"
}

static void
keybinding_manager_value_keybinding_free_value (GValue* value)
{
#line 35 "../src/Utils/KeybindingManager.vala"
	if (value->data[0].v_pointer) {
#line 35 "../src/Utils/KeybindingManager.vala"
		keybinding_manager_keybinding_unref (value->data[0].v_pointer);
#line 919 "KeybindingManager.c"
	}
}

static void
keybinding_manager_value_keybinding_copy_value (const GValue* src_value,
                                                GValue* dest_value)
{
#line 35 "../src/Utils/KeybindingManager.vala"
	if (src_value->data[0].v_pointer) {
#line 35 "../src/Utils/KeybindingManager.vala"
		dest_value->data[0].v_pointer = keybinding_manager_keybinding_ref (src_value->data[0].v_pointer);
#line 931 "KeybindingManager.c"
	} else {
#line 35 "../src/Utils/KeybindingManager.vala"
		dest_value->data[0].v_pointer = NULL;
#line 935 "KeybindingManager.c"
	}
}

static gpointer
keybinding_manager_value_keybinding_peek_pointer (const GValue* value)
{
#line 35 "../src/Utils/KeybindingManager.vala"
	return value->data[0].v_pointer;
#line 944 "KeybindingManager.c"
}

static gchar*
keybinding_manager_value_keybinding_collect_value (GValue* value,
                                                   guint n_collect_values,
                                                   GTypeCValue* collect_values,
                                                   guint collect_flags)
{
#line 35 "../src/Utils/KeybindingManager.vala"
	if (collect_values[0].v_pointer) {
#line 955 "KeybindingManager.c"
		KeybindingManagerKeybinding * object;
		object = collect_values[0].v_pointer;
#line 35 "../src/Utils/KeybindingManager.vala"
		if (object->parent_instance.g_class == NULL) {
#line 35 "../src/Utils/KeybindingManager.vala"
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 962 "KeybindingManager.c"
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
#line 35 "../src/Utils/KeybindingManager.vala"
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 966 "KeybindingManager.c"
		}
#line 35 "../src/Utils/KeybindingManager.vala"
		value->data[0].v_pointer = keybinding_manager_keybinding_ref (object);
#line 970 "KeybindingManager.c"
	} else {
#line 35 "../src/Utils/KeybindingManager.vala"
		value->data[0].v_pointer = NULL;
#line 974 "KeybindingManager.c"
	}
#line 35 "../src/Utils/KeybindingManager.vala"
	return NULL;
#line 978 "KeybindingManager.c"
}

static gchar*
keybinding_manager_value_keybinding_lcopy_value (const GValue* value,
                                                 guint n_collect_values,
                                                 GTypeCValue* collect_values,
                                                 guint collect_flags)
{
	KeybindingManagerKeybinding ** object_p;
	object_p = collect_values[0].v_pointer;
#line 35 "../src/Utils/KeybindingManager.vala"
	if (!object_p) {
#line 35 "../src/Utils/KeybindingManager.vala"
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
#line 993 "KeybindingManager.c"
	}
#line 35 "../src/Utils/KeybindingManager.vala"
	if (!value->data[0].v_pointer) {
#line 35 "../src/Utils/KeybindingManager.vala"
		*object_p = NULL;
#line 999 "KeybindingManager.c"
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
#line 35 "../src/Utils/KeybindingManager.vala"
		*object_p = value->data[0].v_pointer;
#line 1003 "KeybindingManager.c"
	} else {
#line 35 "../src/Utils/KeybindingManager.vala"
		*object_p = keybinding_manager_keybinding_ref (value->data[0].v_pointer);
#line 1007 "KeybindingManager.c"
	}
#line 35 "../src/Utils/KeybindingManager.vala"
	return NULL;
#line 1011 "KeybindingManager.c"
}

static GParamSpec*
keybinding_manager_param_spec_keybinding (const gchar* name,
                                          const gchar* nick,
                                          const gchar* blurb,
                                          GType object_type,
                                          GParamFlags flags)
{
	KeybindingManagerParamSpecKeybinding* spec;
#line 35 "../src/Utils/KeybindingManager.vala"
	g_return_val_if_fail (g_type_is_a (object_type, KEYBINDING_MANAGER_TYPE_KEYBINDING), NULL);
#line 35 "../src/Utils/KeybindingManager.vala"
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
#line 35 "../src/Utils/KeybindingManager.vala"
	G_PARAM_SPEC (spec)->value_type = object_type;
#line 35 "../src/Utils/KeybindingManager.vala"
	return G_PARAM_SPEC (spec);
#line 1030 "KeybindingManager.c"
}

static gpointer
keybinding_manager_value_get_keybinding (const GValue* value)
{
#line 35 "../src/Utils/KeybindingManager.vala"
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, KEYBINDING_MANAGER_TYPE_KEYBINDING), NULL);
#line 35 "../src/Utils/KeybindingManager.vala"
	return value->data[0].v_pointer;
#line 1040 "KeybindingManager.c"
}

static void
keybinding_manager_value_set_keybinding (GValue* value,
                                         gpointer v_object)
{
	KeybindingManagerKeybinding * old;
#line 35 "../src/Utils/KeybindingManager.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, KEYBINDING_MANAGER_TYPE_KEYBINDING));
#line 35 "../src/Utils/KeybindingManager.vala"
	old = value->data[0].v_pointer;
#line 35 "../src/Utils/KeybindingManager.vala"
	if (v_object) {
#line 35 "../src/Utils/KeybindingManager.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, KEYBINDING_MANAGER_TYPE_KEYBINDING));
#line 35 "../src/Utils/KeybindingManager.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 35 "../src/Utils/KeybindingManager.vala"
		value->data[0].v_pointer = v_object;
#line 35 "../src/Utils/KeybindingManager.vala"
		keybinding_manager_keybinding_ref (value->data[0].v_pointer);
#line 1062 "KeybindingManager.c"
	} else {
#line 35 "../src/Utils/KeybindingManager.vala"
		value->data[0].v_pointer = NULL;
#line 1066 "KeybindingManager.c"
	}
#line 35 "../src/Utils/KeybindingManager.vala"
	if (old) {
#line 35 "../src/Utils/KeybindingManager.vala"
		keybinding_manager_keybinding_unref (old);
#line 1072 "KeybindingManager.c"
	}
}

static void
keybinding_manager_value_take_keybinding (GValue* value,
                                          gpointer v_object)
{
	KeybindingManagerKeybinding * old;
#line 35 "../src/Utils/KeybindingManager.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, KEYBINDING_MANAGER_TYPE_KEYBINDING));
#line 35 "../src/Utils/KeybindingManager.vala"
	old = value->data[0].v_pointer;
#line 35 "../src/Utils/KeybindingManager.vala"
	if (v_object) {
#line 35 "../src/Utils/KeybindingManager.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, KEYBINDING_MANAGER_TYPE_KEYBINDING));
#line 35 "../src/Utils/KeybindingManager.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 35 "../src/Utils/KeybindingManager.vala"
		value->data[0].v_pointer = v_object;
#line 1093 "KeybindingManager.c"
	} else {
#line 35 "../src/Utils/KeybindingManager.vala"
		value->data[0].v_pointer = NULL;
#line 1097 "KeybindingManager.c"
	}
#line 35 "../src/Utils/KeybindingManager.vala"
	if (old) {
#line 35 "../src/Utils/KeybindingManager.vala"
		keybinding_manager_keybinding_unref (old);
#line 1103 "KeybindingManager.c"
	}
}

static void
keybinding_manager_keybinding_class_init (KeybindingManagerKeybindingClass * klass,
                                          gpointer klass_data)
{
#line 35 "../src/Utils/KeybindingManager.vala"
	keybinding_manager_keybinding_parent_class = g_type_class_peek_parent (klass);
#line 35 "../src/Utils/KeybindingManager.vala"
	((KeybindingManagerKeybindingClass *) klass)->finalize = keybinding_manager_keybinding_finalize;
#line 35 "../src/Utils/KeybindingManager.vala"
	g_type_class_adjust_private_offset (klass, &KeybindingManagerKeybinding_private_offset);
#line 1117 "KeybindingManager.c"
}

static void
keybinding_manager_keybinding_instance_init (KeybindingManagerKeybinding * self,
                                             gpointer klass)
{
#line 35 "../src/Utils/KeybindingManager.vala"
	self->priv = keybinding_manager_keybinding_get_instance_private (self);
#line 35 "../src/Utils/KeybindingManager.vala"
	self->ref_count = 1;
#line 1128 "KeybindingManager.c"
}

static void
keybinding_manager_keybinding_finalize (KeybindingManagerKeybinding * obj)
{
	KeybindingManagerKeybinding * self;
#line 35 "../src/Utils/KeybindingManager.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, KEYBINDING_MANAGER_TYPE_KEYBINDING, KeybindingManagerKeybinding);
#line 35 "../src/Utils/KeybindingManager.vala"
	g_signal_handlers_destroy (self);
#line 46 "../src/Utils/KeybindingManager.vala"
	_g_free0 (self->priv->_accelerator);
#line 1141 "KeybindingManager.c"
}

/**
     * Helper class to store keybinding
     */
static GType
keybinding_manager_keybinding_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { keybinding_manager_value_keybinding_init, keybinding_manager_value_keybinding_free_value, keybinding_manager_value_keybinding_copy_value, keybinding_manager_value_keybinding_peek_pointer, "p", keybinding_manager_value_keybinding_collect_value, "p", keybinding_manager_value_keybinding_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (KeybindingManagerKeybindingClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) keybinding_manager_keybinding_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (KeybindingManagerKeybinding), 0, (GInstanceInitFunc) keybinding_manager_keybinding_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType keybinding_manager_keybinding_type_id;
	keybinding_manager_keybinding_type_id = g_type_register_fundamental (g_type_fundamental_next (), "KeybindingManagerKeybinding", &g_define_type_info, &g_define_type_fundamental_info, 0);
	KeybindingManagerKeybinding_private_offset = g_type_add_instance_private (keybinding_manager_keybinding_type_id, sizeof (KeybindingManagerKeybindingPrivate));
	return keybinding_manager_keybinding_type_id;
}

static GType
keybinding_manager_keybinding_get_type (void)
{
	static volatile gsize keybinding_manager_keybinding_type_id__volatile = 0;
	if (g_once_init_enter (&keybinding_manager_keybinding_type_id__volatile)) {
		GType keybinding_manager_keybinding_type_id;
		keybinding_manager_keybinding_type_id = keybinding_manager_keybinding_get_type_once ();
		g_once_init_leave (&keybinding_manager_keybinding_type_id__volatile, keybinding_manager_keybinding_type_id);
	}
	return keybinding_manager_keybinding_type_id__volatile;
}

static gpointer
keybinding_manager_keybinding_ref (gpointer instance)
{
	KeybindingManagerKeybinding * self;
	self = instance;
#line 35 "../src/Utils/KeybindingManager.vala"
	g_atomic_int_inc (&self->ref_count);
#line 35 "../src/Utils/KeybindingManager.vala"
	return instance;
#line 1180 "KeybindingManager.c"
}

static void
keybinding_manager_keybinding_unref (gpointer instance)
{
	KeybindingManagerKeybinding * self;
	self = instance;
#line 35 "../src/Utils/KeybindingManager.vala"
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
#line 35 "../src/Utils/KeybindingManager.vala"
		KEYBINDING_MANAGER_KEYBINDING_GET_CLASS (self)->finalize (self);
#line 35 "../src/Utils/KeybindingManager.vala"
		g_type_free_instance ((GTypeInstance *) self);
#line 1194 "KeybindingManager.c"
	}
}

static void
keybinding_manager_class_init (KeybindingManagerClass * klass,
                               gpointer klass_data)
{
	GeeArrayList* _tmp0_;
	guint* _tmp1_;
#line 10 "../src/Utils/KeybindingManager.vala"
	keybinding_manager_parent_class = g_type_class_peek_parent (klass);
#line 10 "../src/Utils/KeybindingManager.vala"
	G_OBJECT_CLASS (klass)->finalize = keybinding_manager_finalize;
#line 15 "../src/Utils/KeybindingManager.vala"
	_tmp0_ = gee_array_list_new (KEYBINDING_MANAGER_TYPE_KEYBINDING, (GBoxedCopyFunc) keybinding_manager_keybinding_ref, (GDestroyNotify) keybinding_manager_keybinding_unref, NULL, NULL, NULL);
#line 15 "../src/Utils/KeybindingManager.vala"
	keybinding_manager_bindings = _tmp0_;
#line 21 "../src/Utils/KeybindingManager.vala"
	_tmp1_ = g_new0 (guint, 8);
#line 21 "../src/Utils/KeybindingManager.vala"
	_tmp1_[0] = (guint) 0;
#line 21 "../src/Utils/KeybindingManager.vala"
	_tmp1_[1] = (guint) GDK_MOD2_MASK;
#line 21 "../src/Utils/KeybindingManager.vala"
	_tmp1_[2] = (guint) GDK_LOCK_MASK;
#line 21 "../src/Utils/KeybindingManager.vala"
	_tmp1_[3] = (guint) GDK_MOD5_MASK;
#line 21 "../src/Utils/KeybindingManager.vala"
	_tmp1_[4] = (guint) (GDK_MOD2_MASK | GDK_LOCK_MASK);
#line 21 "../src/Utils/KeybindingManager.vala"
	_tmp1_[5] = (guint) (GDK_MOD2_MASK | GDK_MOD5_MASK);
#line 21 "../src/Utils/KeybindingManager.vala"
	_tmp1_[6] = (guint) (GDK_LOCK_MASK | GDK_MOD5_MASK);
#line 21 "../src/Utils/KeybindingManager.vala"
	_tmp1_[7] = (guint) ((GDK_MOD2_MASK | GDK_LOCK_MASK) | GDK_MOD5_MASK);
#line 21 "../src/Utils/KeybindingManager.vala"
	keybinding_manager_lock_modifiers = _tmp1_;
#line 21 "../src/Utils/KeybindingManager.vala"
	keybinding_manager_lock_modifiers_length1 = 8;
#line 1234 "KeybindingManager.c"
}

static void
keybinding_manager_instance_init (KeybindingManager * self,
                                  gpointer klass)
{
}

static void
keybinding_manager_finalize (GObject * obj)
{
	KeybindingManager * self;
#line 10 "../src/Utils/KeybindingManager.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_KEYBINDING_MANAGER, KeybindingManager);
#line 10 "../src/Utils/KeybindingManager.vala"
	G_OBJECT_CLASS (keybinding_manager_parent_class)->finalize (obj);
#line 1251 "KeybindingManager.c"
}

/**
 * This class is in charge to grab keybindings on the X11 display
 * and filter X11-events and passing on such events to the registed
 * handler methods.
 * 
 * @author Oliver Sauder 
 * 
 * Ported to Gtk3 by Mohelm97, 2018
 */
static GType
keybinding_manager_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (KeybindingManagerClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) keybinding_manager_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (KeybindingManager), 0, (GInstanceInitFunc) keybinding_manager_instance_init, NULL };
	GType keybinding_manager_type_id;
	keybinding_manager_type_id = g_type_register_static (G_TYPE_OBJECT, "KeybindingManager", &g_define_type_info, 0);
	return keybinding_manager_type_id;
}

GType
keybinding_manager_get_type (void)
{
	static volatile gsize keybinding_manager_type_id__volatile = 0;
	if (g_once_init_enter (&keybinding_manager_type_id__volatile)) {
		GType keybinding_manager_type_id;
		keybinding_manager_type_id = keybinding_manager_get_type_once ();
		g_once_init_leave (&keybinding_manager_type_id__volatile, keybinding_manager_type_id);
	}
	return keybinding_manager_type_id__volatile;
}

